{"version":3,"file":"qr-scanner.umd.min.js","sources":["src/qr-scanner.js"],"sourcesContent":["export default class QrScanner {\n    /* async */\n    static hasCamera() {\n        return QrScanner.listCameras(false)\n            .then(cameras => !!cameras.length)\n            .catch(() => false);\n    }\n\n    /* async */\n    static listCameras(requestLabels = false) {\n        if (!navigator.mediaDevices) return Promise.resolve([]);\n\n        // Note that enumerateDevices can always be called and does not prompt the user for permission.\n        // However, enumerateDevices only includes device labels if served via https and an active media stream exists\n        // or permission to access the camera was given. Therefore, ask for camera permission by opening a stream, if\n        // labels were requested.\n        let openedStream = null;\n        return (requestLabels\n            ? navigator.mediaDevices.getUserMedia({ audio: false, video: true })\n                .then(stream => openedStream = stream)\n                // Fail gracefully, especially if the device has no camera or on mobile when the camera is already in\n                // use and some browsers disallow a second stream.\n                .catch(() => {})\n            : Promise.resolve()\n        )\n            .then(() => navigator.mediaDevices.enumerateDevices())\n            .then(devices => devices.filter(device => device.kind === 'videoinput').map((device, i) => ({\n                id: device.deviceId,\n                label: device.label || (i === 0 ? 'Default Camera' : `Camera ${i + 1}`),\n            })))\n            .finally(() => {\n                // close the stream we just opened for getting camera access for listing the device labels\n                if (!openedStream) return;\n                for (const track of openedStream.getTracks()) {\n                    track.stop();\n                    openedStream.removeTrack(track);\n                }\n            });\n    }\n\n    constructor(\n        video,\n        onDecode,\n        canvasSizeOrOnDecodeError = this._onDecodeError,\n        canvasSizeOrCalculateScanRegion = this._calculateScanRegion,\n        preferredCamera = 'environment'\n    ) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n        this._onDecode = onDecode;\n        this._legacyCanvasSize = QrScanner.DEFAULT_CANVAS_SIZE;\n        this._preferredCamera = preferredCamera;\n        this._active = false;\n        this._paused = false;\n        this._flashOn = false;\n\n        if (typeof canvasSizeOrOnDecodeError === 'number') {\n            // legacy function signature where the third argument is the canvas size\n            this._legacyCanvasSize = canvasSizeOrOnDecodeError;\n            console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                + 'the future');\n        } else {\n            this._onDecodeError = canvasSizeOrOnDecodeError;\n        }\n\n        if (typeof canvasSizeOrCalculateScanRegion === 'number') {\n            // legacy function signature where the fourth argument is the canvas size\n            this._legacyCanvasSize = canvasSizeOrCalculateScanRegion;\n            console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                + 'the future');\n        } else {\n            this._calculateScanRegion = canvasSizeOrCalculateScanRegion;\n        }\n\n        this._scanRegion = this._calculateScanRegion(video);\n\n        this._onPlay = this._onPlay.bind(this);\n        this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n\n        // Allow inline playback on iPhone instead of requiring full screen playback,\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\n        this.$video.playsInline = true;\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\n        // includes no audio, but just to be safe.\n        this.$video.muted = true;\n        this.$video.disablePictureInPicture = true;\n        this.$video.addEventListener('play', this._onPlay);\n        this.$video.addEventListener('loadedmetadata', this._onLoadedMetaData);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        this._qrEnginePromise = QrScanner.createQrEngine();\n    }\n\n    /* async */\n    hasFlash() {\n        if (!('ImageCapture' in window)) {\n            return Promise.resolve(false);\n        }\n\n        const track = this.$video.srcObject ? this.$video.srcObject.getVideoTracks()[0] : null;\n        if (!track) {\n            return Promise.reject('Camera not started or not available');\n        }\n\n        const imageCapture = new ImageCapture(track);\n        return imageCapture.getPhotoCapabilities()\n            .then((result) => {\n                return result.fillLightMode.includes('flash');\n            })\n            .catch((error) => {\n                console.warn(error);\n                return false;\n            });\n    }\n\n    isFlashOn() {\n      return this._flashOn;\n    }\n\n    /* async */\n    toggleFlash() {\n      return this._setFlash(!this._flashOn);\n    }\n\n    /* async */\n    turnFlashOff() {\n      return this._setFlash(false);\n    }\n\n    /* async */\n    turnFlashOn() {\n      return this._setFlash(true);\n    }\n\n    destroy() {\n        this.$video.removeEventListener('loadedmetadata', this._onLoadedMetaData);\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        this.stop();\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\n    }\n\n    /* async */\n    start() {\n        if (this._active && !this._paused) {\n            return Promise.resolve();\n        }\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n        this._active = true;\n        if (document.hidden) {\n            // camera will be started as soon as tab is in foreground\n            return Promise.resolve();\n        }\n        this._paused = false;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            this.$video.play();\n            return Promise.resolve();\n        }\n\n        let facingModeGuess = this._preferredCamera === 'environment' || this._preferredCamera === 'user'\n            ? this._preferredCamera\n            : null;\n        return this._getCameraStream(this._preferredCamera, true)\n            .catch(() => {\n                // If _preferredCamera was a facing mode, we (probably) don't have a camera of the requested facing mode\n                // and switch our facing mode guess.\n                facingModeGuess = facingModeGuess === 'environment'\n                    ? 'user' // switch as the requested facing mode was not available\n                    : 'environment'; // switch, or also assume 'environment' as default if facingModeGuess was null\n                // Retry unconstrained. Throws if camera is not accessible (e.g. due to not https)\n                return this._getCameraStream();\n            })\n            .then(stream => {\n                // Try to determine the facing mode from the stream, otherwise use our guess or 'environment' as\n                // default. Note that the guess is not always accurate as Safari returns cameras of different facing\n                // mode, even for exact facingMode constraints.\n                facingModeGuess = this._getFacingMode(stream) || facingModeGuess || 'environment';\n                this.$video.srcObject = stream;\n                this.$video.play();\n                this._setVideoMirror(facingModeGuess);\n            })\n            .catch(e => {\n                this._active = false;\n                throw e;\n            });\n    }\n\n    stop() {\n        this.pause();\n        this._active = false;\n    }\n\n    pause(stopStreamImmediately = false) {\n        this._paused = true;\n        if (!this._active) {\n            return Promise.resolve(true);\n        }\n        this.$video.pause();\n\n        const stopStream = () => {\n            const tracks = this.$video.srcObject ? this.$video.srcObject.getTracks() : [];\n            for (const track of tracks) {\n                track.stop(); //  note that this will also automatically turn the flashlight off\n                this.$video.srcObject.removeTrack(track);\n            }\n            this.$video.srcObject = null;\n        };\n\n        if (stopStreamImmediately) {\n            stopStream();\n            return Promise.resolve(true);\n        }\n\n        return new Promise((resolve) => setTimeout(resolve, 300))\n            .then(() => {\n                if (!this._paused) return false;\n                stopStream();\n                return true;\n            });\n    }\n\n    /* async */\n    setCamera(facingModeOrDeviceId) {\n        if (facingModeOrDeviceId === this._preferredCamera) return Promise.resolve();\n        this._preferredCamera = facingModeOrDeviceId;\n        // Restart the scanner with the new camera which will also update the video mirror and the scan region. Note\n        // that we always pause the stream and not only if !this._paused as even if this._paused === true, the stream\n        // might still be running, as it's by default only stopped after a delay of 300ms.\n        const wasPaused = this._paused;\n        return this.pause(true).then((paused) => {\n            if (!paused || wasPaused || !this._active) return;\n            return this.start();\n        });\n    }\n\n    /* async */\n    static scanImage(imageOrFileOrUrl, scanRegion=null, qrEngine=null, canvas=null, fixedCanvasSize=false,\n                     alsoTryWithoutScanRegion=false) {\n        const gotExternalWorker = qrEngine instanceof Worker;\n\n        let promise = Promise.all([\n            qrEngine || QrScanner.createQrEngine(),\n            QrScanner._loadImage(imageOrFileOrUrl),\n        ]).then(([engine, image]) => {\n            qrEngine = engine;\n            let canvasContext;\n            [canvas, canvasContext] = this._drawToCanvas(image, scanRegion, canvas, fixedCanvasSize);\n\n            if (qrEngine instanceof Worker) {\n                if (!gotExternalWorker) {\n                    // Enable scanning of inverted color qr codes. Not using _postWorkerMessage as it's async\n                    qrEngine.postMessage({ type: 'inversionMode', data: 'both' });\n                }\n                return new Promise((resolve, reject) => {\n                    let timeout, onMessage, onError;\n                    onMessage = event => {\n                        if (event.data.type !== 'qrResult') {\n                            return;\n                        }\n                        qrEngine.removeEventListener('message', onMessage);\n                        qrEngine.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        if (event.data.data !== null) {\n                            resolve(event.data.data);\n                        } else {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        }\n                    };\n                    onError = (e) => {\n                        qrEngine.removeEventListener('message', onMessage);\n                        qrEngine.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        const errorMessage = !e ? 'Unknown Error' : (e.message || e);\n                        reject('Scanner error: ' + errorMessage);\n                    };\n                    qrEngine.addEventListener('message', onMessage);\n                    qrEngine.addEventListener('error', onError);\n                    timeout = setTimeout(() => onError('timeout'), 10000);\n                    const imageData = canvasContext.getImageData(0, 0, canvas.width, canvas.height);\n                    qrEngine.postMessage({\n                        type: 'decode',\n                        data: imageData\n                    }, [imageData.data.buffer]);\n                });\n            } else {\n                return new Promise((resolve, reject) => {\n                    const timeout = setTimeout(() => reject('Scanner error: timeout'), 10000);\n                    qrEngine.detect(canvas).then(scanResults => {\n                        if (!scanResults.length) {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        } else {\n                            resolve(scanResults[0].rawValue);\n                        }\n                    }).catch((e) => reject('Scanner error: ' + (e.message || e))).finally(() => clearTimeout(timeout));\n                });\n            }\n        });\n\n        if (scanRegion && alsoTryWithoutScanRegion) {\n            promise = promise.catch(() => QrScanner.scanImage(imageOrFileOrUrl, null, qrEngine, canvas, fixedCanvasSize));\n        }\n\n        promise = promise.finally(() => {\n            if (gotExternalWorker) return;\n            QrScanner._postWorkerMessage(qrEngine, 'close');\n        });\n\n        return promise;\n    }\n\n    setGrayscaleWeights(red, green, blue, useIntegerApproximation = true) {\n        // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations work also\n        // well with colored qr codes.\n        QrScanner._postWorkerMessage(\n            this._qrEnginePromise,\n            'grayscaleWeights',\n            { red, green, blue, useIntegerApproximation }\n        );\n    }\n\n    setInversionMode(inversionMode) {\n        // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations scan normal\n        // and inverted qr codes by default\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\n    }\n\n    /* async */\n    static createQrEngine(workerPath = QrScanner.WORKER_PATH) {\n        return ('BarcodeDetector' in window ? BarcodeDetector.getSupportedFormats() : Promise.resolve([]))\n            .then((supportedFormats) => supportedFormats.indexOf('qr_code') !== -1\n                ? new BarcodeDetector({ formats: ['qr_code'] })\n                : new Worker(workerPath)\n            );\n    }\n\n    _onPlay() {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._scanFrame();\n    }\n\n    _onLoadedMetaData() {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n    }\n\n    _onVisibilityChange() {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    _calculateScanRegion(video) {\n        // Default scan region calculation. Note that this can be overwritten in the constructor.\n        const smallestDimension = Math.min(video.videoWidth, video.videoHeight);\n        const scanRegionSize = Math.round(2 / 3 * smallestDimension);\n        return {\n            x: (video.videoWidth - scanRegionSize) / 2,\n            y: (video.videoHeight - scanRegionSize) / 2,\n            width: scanRegionSize,\n            height: scanRegionSize,\n            downScaledWidth: this._legacyCanvasSize,\n            downScaledHeight: this._legacyCanvasSize,\n        };\n    }\n\n    _scanFrame() {\n        if (!this._active || this.$video.paused || this.$video.ended) return false;\n        // using requestAnimationFrame to avoid scanning if tab is in background\n        requestAnimationFrame(() => {\n            if (this.$video.readyState <= 1) {\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\n                // the canvas until the video is started again and ready.\n                this._scanFrame();\n                return;\n            }\n            this._qrEnginePromise\n                .then((qrEngine) => QrScanner.scanImage(this.$video, this._scanRegion, qrEngine, this.$canvas))\n                .then(this._onDecode, (error) => {\n                    if (!this._active) return;\n                    const errorMessage = error.message || error;\n                    if (errorMessage.indexOf('service unavailable') !== -1) {\n                        // When the native BarcodeDetector crashed, create a new one\n                        this._qrEnginePromise = QrScanner.createQrEngine();\n                    }\n                    this._onDecodeError(error);\n                })\n                .then(() => this._scanFrame());\n        });\n    }\n\n    _onDecodeError(error) {\n        // default error handler; can be overwritten in the constructor\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\n        console.log(error);\n    }\n\n    _getCameraStream(preferredCamera, exact = false) {\n        const constraintsToTry = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n\n        if (preferredCamera) {\n            const preferenceType = preferredCamera === 'environment' || preferredCamera === 'user'\n                ? 'facingMode'\n                : 'deviceId';\n            if (exact) {\n                preferredCamera = { exact: preferredCamera };\n            }\n            constraintsToTry.forEach(constraint => constraint[preferenceType] = preferredCamera);\n        }\n\n        return this._getMatchingCameraStream(constraintsToTry);\n    }\n\n    _getMatchingCameraStream(constraintsToTry) {\n        if (!navigator.mediaDevices || constraintsToTry.length === 0) {\n            return Promise.reject('Camera not found.');\n        }\n        return navigator.mediaDevices.getUserMedia({\n            video: constraintsToTry.shift()\n        }).catch(() => this._getMatchingCameraStream(constraintsToTry));\n    }\n\n    /* async */\n    _setFlash(on) {\n        return this.hasFlash().then((hasFlash) => {\n            if (!hasFlash) return Promise.reject('No flash available');\n            // Note that the video track is guaranteed to exist at this point\n            return this.$video.srcObject.getVideoTracks()[0].applyConstraints({\n                advanced: [{ torch: on }],\n            });\n        }).then(() => this._flashOn = on);\n    }\n\n    _setVideoMirror(facingMode) {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode==='user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    _getFacingMode(videoStream) {\n        const videoTrack = videoStream.getVideoTracks()[0];\n        if (!videoTrack) return null; // unknown\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\n        return /rear|back|environment/i.test(videoTrack.label)\n            ? 'environment'\n            : /front|user|face/i.test(videoTrack.label)\n                ? 'user'\n                : null; // unknown\n    }\n\n    static _drawToCanvas(image, scanRegion=null, canvas=null, fixedCanvasSize=false) {\n        canvas = canvas || document.createElement('canvas');\n        const scanRegionX = scanRegion && scanRegion.x? scanRegion.x : 0;\n        const scanRegionY = scanRegion && scanRegion.y? scanRegion.y : 0;\n        const scanRegionWidth = scanRegion && scanRegion.width? scanRegion.width : image.width || image.videoWidth;\n        const scanRegionHeight = scanRegion && scanRegion.height? scanRegion.height : image.height || image.videoHeight;\n        if (!fixedCanvasSize) {\n            canvas.width = scanRegion && scanRegion.downScaledWidth? scanRegion.downScaledWidth : scanRegionWidth;\n            canvas.height = scanRegion && scanRegion.downScaledHeight? scanRegion.downScaledHeight : scanRegionHeight;\n        }\n        const context = canvas.getContext('2d', { alpha: false });\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(\n            image,\n            scanRegionX, scanRegionY, scanRegionWidth, scanRegionHeight,\n            0, 0, canvas.width, canvas.height\n        );\n        return [canvas, context];\n    }\n\n    /* async */\n    static _loadImage(imageOrFileOrBlobOrUrl) {\n        if (imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement || imageOrFileOrBlobOrUrl instanceof HTMLVideoElement\n            || window.ImageBitmap && imageOrFileOrBlobOrUrl instanceof window.ImageBitmap\n            || window.OffscreenCanvas && imageOrFileOrBlobOrUrl instanceof window.OffscreenCanvas) {\n            return Promise.resolve(imageOrFileOrBlobOrUrl);\n        } else if (imageOrFileOrBlobOrUrl instanceof Image) {\n            return QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl).then(() => imageOrFileOrBlobOrUrl);\n        } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob\n            || imageOrFileOrBlobOrUrl instanceof URL || typeof(imageOrFileOrBlobOrUrl)==='string') {\n            const image = new Image();\n            if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\n            } else {\n                image.src = imageOrFileOrBlobOrUrl;\n            }\n            return QrScanner._awaitImageLoad(image).then(() => {\n                if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                    URL.revokeObjectURL(image.src);\n                }\n                return image;\n            });\n        } else {\n            return Promise.reject('Unsupported image type.');\n        }\n    }\n\n    /* async */\n    static _awaitImageLoad(image) {\n        return new Promise((resolve, reject) => {\n            if (image.complete && image.naturalWidth!==0) {\n                // already loaded\n                resolve();\n            } else {\n                let onLoad, onError;\n                onLoad = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    resolve();\n                };\n                onError = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    reject('Image load error');\n                };\n                image.addEventListener('load', onLoad);\n                image.addEventListener('error', onError);\n            }\n        });\n    }\n\n    /* async */\n    static _postWorkerMessage(qrEngineOrQrEnginePromise, type, data) {\n        return Promise.resolve(qrEngineOrQrEnginePromise).then((qrEngine) => {\n            if (!(qrEngine instanceof Worker)) return;\n            qrEngine.postMessage({ type, data });\n        });\n    }\n}\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\nQrScanner.NO_QR_CODE_FOUND = 'No QR code found';\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';\n"],"names":["QrScanner","listCameras","then","cameras","length","catch","requestLabels","navigator","mediaDevices","Promise","resolve","openedStream","getUserMedia","audio","video","stream","enumerateDevices","devices","filter","device","kind","map","i","id","deviceId","label","finally","track","stop","removeTrack","onDecode","canvasSizeOrOnDecodeError","_onDecodeError","canvasSizeOrCalculateScanRegion","_calculateScanRegion","preferredCamera","$video","$canvas","document","createElement","_onDecode","_legacyCanvasSize","DEFAULT_CANVAS_SIZE","_preferredCamera","_flashOn","_paused","_active","console","warn","_scanRegion","_onPlay","bind","_onLoadedMetaData","_onVisibilityChange","playsInline","muted","disablePictureInPicture","addEventListener","_qrEnginePromise","createQrEngine","window","getPhotoCapabilities","result","fillLightMode","includes","error","reject","_setFlash","removeEventListener","_postWorkerMessage","location","protocol","hidden","srcObject","play","facingModeGuess","_getCameraStream","_getFacingMode","_setVideoMirror","e","pause","stopStreamImmediately","tracks","getTracks","stopStream","setTimeout","facingModeOrDeviceId","paused","wasPaused","start","imageOrFileOrUrl","scanRegion","qrEngine","canvas","fixedCanvasSize","alsoTryWithoutScanRegion","promise","all","_loadImage","engine","image","canvasContext","_drawToCanvas","Worker","gotExternalWorker","postMessage","type","data","timeout","onMessage","onError","event","clearTimeout","NO_QR_CODE_FOUND","width","height","imageData","buffer","detect","scanResults","rawValue","message","scanImage","red","green","blue","useIntegerApproximation","inversionMode","workerPath","WORKER_PATH","BarcodeDetector","getSupportedFormats","supportedFormats","indexOf","formats","_scanFrame","videoHeight","x","videoWidth","scanRegionSize","y","downScaledWidth","downScaledHeight","ended","requestAnimationFrame","readyState","log","exact","min","constraintsToTry","forEach","constraint","preferenceType","_getMatchingCameraStream","shift","on","hasFlash","getVideoTracks","applyConstraints","advanced","torch","facingMode","style","transform","videoStream","test","videoTrack","scanRegionWidth","scanRegionHeight","alpha","context","imageSmoothingEnabled","drawImage","scanRegionX","scanRegionY","imageOrFileOrBlobOrUrl","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","OffscreenCanvas","Image","_awaitImageLoad","File","Blob","URL","src","createObjectURL","revokeObjectURL","complete","naturalWidth","onLoad","qrEngineOrQrEnginePromise"],"mappings":"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"}