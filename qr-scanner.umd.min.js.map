{"version":3,"file":"qr-scanner.umd.min.js","sources":["src/qr-scanner.ts"],"sourcesContent":["export default class QrScanner {\n    static readonly DEFAULT_CANVAS_SIZE = 400;\n    static readonly NO_QR_CODE_FOUND = 'No QR code found';\n    static WORKER_PATH = 'qr-scanner-worker.min.js';\n\n    static async hasCamera(): Promise<boolean> {\n        try {\n            return !!(await QrScanner.listCameras(false)).length;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    static async listCameras(requestLabels = false): Promise<Array<QrScanner.Camera>> {\n        if (!navigator.mediaDevices) return [];\n\n        const enumerateCameras = async (): Promise<Array<MediaDeviceInfo>> =>\n            (await navigator.mediaDevices.enumerateDevices()).filter((device) => device.kind === 'videoinput');\n\n        // Note that enumerateDevices can always be called and does not prompt the user for permission.\n        // However, enumerateDevices only includes device labels if served via https and an active media stream exists\n        // or permission to access the camera was given. Therefore, if we're not getting labels but labels are requested\n        // ask for camera permission by opening a stream.\n        let openedStream: MediaStream | undefined;\n        try {\n            if (requestLabels && (await enumerateCameras()).every((camera) => !camera.label)) {\n                openedStream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true });\n            }\n        } catch (e) {\n            // Fail gracefully, especially if the device has no camera or on mobile when the camera is already in use\n            // and some browsers disallow a second stream.\n        }\n\n        try {\n            return (await enumerateCameras()).map((camera, i) => ({\n                id: camera.deviceId,\n                label: camera.label || (i === 0 ? 'Default Camera' : `Camera ${i + 1}`),\n            }));\n        } finally {\n            // close the stream we just opened for getting camera access for listing the device labels\n            if (openedStream) {\n                console.warn('Call listCameras after successfully starting a QR scanner to avoid creating '\n                    + 'a temporary video stream');\n                QrScanner._stopVideoStream(openedStream);\n            }\n        }\n    }\n\n    readonly $video: HTMLVideoElement;\n    readonly $canvas: HTMLCanvasElement;\n    readonly $scanRegionHighlight?: HTMLDivElement;\n    private readonly _onDecode?: (result: QrScanner.ScanResult) => void;\n    private readonly _legacyOnDecode?: (result: string) => void;\n    private readonly _legacyCanvasSize: number = QrScanner.DEFAULT_CANVAS_SIZE;\n    private _preferredCamera: QrScanner.FacingMode | QrScanner.DeviceId = 'environment';\n    private _scanRegion: QrScanner.ScanRegion;\n    private _qrEnginePromise: Promise<Worker | BarcodeDetector>\n    private _active: boolean = false;\n    private _paused: boolean = false;\n    private _flashOn: boolean = false;\n    private _destroyed: boolean = false;\n\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: QrScanner.ScanResult) => void,\n        options: {\n            onDecodeError?: (error: Error | string) => void,\n            calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n            preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n            highlightScanRegion?: boolean,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n    );\n    /** @deprecated */\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: string) => void,\n        onDecodeError?: (error: Error | string) => void,\n        calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    );\n    /** @deprecated */\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: string) => void,\n        onDecodeError?: (error: Error | string) => void,\n        canvasSize?: number,\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    );\n    /** @deprecated */\n    constructor(video: HTMLVideoElement, onDecode: (result: string) => void, canvasSize?: number);\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: ((result: QrScanner.ScanResult) => void) | ((result: string) => void),\n        canvasSizeOrOnDecodeErrorOrOptions?: number | ((error: Error | string) => void) | {\n            onDecodeError?: (error: Error | string) => void,\n            calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n            preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n            highlightScanRegion?: boolean,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n        canvasSizeOrCalculateScanRegion?: number | ((video: HTMLVideoElement) => QrScanner.ScanRegion),\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    ) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n\n        if (canvasSizeOrOnDecodeErrorOrOptions && typeof canvasSizeOrOnDecodeErrorOrOptions === 'object') {\n            // we got an options object using the new api\n            this._onDecode = onDecode as QrScanner['_onDecode'];\n        } else {\n            if (canvasSizeOrOnDecodeErrorOrOptions || canvasSizeOrCalculateScanRegion || preferredCamera) {\n                console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                    + 'the future');\n            } else {\n                // Only video and onDecode were specified and we can't distinguish between new or old api usage. For\n                // backwards compatibility we have to assume the old api for now. The options object is marked as non-\n                // optional in the parameter list above to make clear that ScanResult instead of string is only passed\n                // if an options object was provided. However, in the future once legacy support is removed, the options\n                // object should become optional.\n                console.warn('Note that the type of the scan result passed to onDecode will change in the future. '\n                    + 'To already switch to the new api today, you can pass returnDetailedScanResult: true.');\n            }\n            this._legacyOnDecode = onDecode as QrScanner['_legacyOnDecode'];\n        }\n\n        const options = typeof canvasSizeOrOnDecodeErrorOrOptions === 'object'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : {};\n        this._onDecodeError = options.onDecodeError || (typeof canvasSizeOrOnDecodeErrorOrOptions === 'function'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : this._onDecodeError);\n        this._calculateScanRegion = options.calculateScanRegion || (typeof canvasSizeOrCalculateScanRegion==='function'\n            ? canvasSizeOrCalculateScanRegion\n            : this._calculateScanRegion);\n        this._preferredCamera = options.preferredCamera || preferredCamera || this._preferredCamera;\n        this._legacyCanvasSize = typeof canvasSizeOrOnDecodeErrorOrOptions === 'number'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : typeof canvasSizeOrCalculateScanRegion === 'number'\n                ? canvasSizeOrCalculateScanRegion\n                : this._legacyCanvasSize;\n\n        if (options.highlightScanRegion) {\n            this.$scanRegionHighlight = document.createElement('div');\n            this.$scanRegionHighlight.classList.add('scan-region-highlight');\n            this.$scanRegionHighlight.style.position = 'absolute';\n            this.$scanRegionHighlight.style.display = 'none';\n            // default style; can be overwritten via css\n            this.$scanRegionHighlight.style.outline = 'rgba(255, 255, 255, .3) solid 7px';\n        }\n        this._scanRegion = this._calculateScanRegion(video);\n\n        this._onPlay = this._onPlay.bind(this);\n        this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n\n        // @ts-ignore\n        video.disablePictureInPicture = true;\n        // Allow inline playback on iPhone instead of requiring full screen playback,\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\n        // @ts-ignore\n        video.playsInline = true;\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\n        // includes no audio, but just to be safe.\n        video.muted = true;\n\n        // Avoid Safari stopping the video stream on a hidden video.\n        // See https://github.com/cozmo/jsQR/issues/185\n        let shouldHideVideo = false;\n        if (video.hidden) {\n            video.hidden = false;\n            shouldHideVideo = true;\n        }\n        if (!document.body.contains(video)) {\n            document.body.appendChild(video);\n            shouldHideVideo = true;\n        }\n        const videoContainer = video.parentElement!;\n        requestAnimationFrame(() => {\n            // Checking in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle.\n            const videoStyle = window.getComputedStyle(video);\n            const containerStyle = window.getComputedStyle(videoContainer);\n            if (videoStyle.display === 'none') {\n                video.style.setProperty('display', 'block', 'important');\n                shouldHideVideo = true;\n            }\n            if (videoStyle.visibility !== 'visible') {\n                video.style.setProperty('visibility', 'visible', 'important');\n                shouldHideVideo = true;\n            }\n            if (shouldHideVideo) {\n                // Hide the video in a way that doesn't cause Safari to stop the playback.\n                console.warn('QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.');\n                video.style.opacity = '0';\n                video.style.width = '0';\n                video.style.height = '0';\n                // @ts-ignore\n                delete this.$scanRegionHighlight!;\n            }\n\n            if (this.$scanRegionHighlight) {\n                if (!['relative', 'absolute', 'fixed', 'sticky'].includes(containerStyle.position!)) {\n                    console.warn('QrScanner has overwritten the video parent\\'s position for correct display of the '\n                        + 'scan region highlight. To avoid this, set the position to relative, absolute, fixed or '\n                        + 'sticky.');\n                    videoContainer.style.setProperty('position', 'absolute', 'important');\n                }\n                if (containerStyle.width !== videoStyle.width\n                    || containerStyle.height !== videoStyle.height) {\n                    console.warn('QrScanner has overwritten the video parent\\'s width and height for correct display '\n                        + 'of the scan region highlight. To avoid this, make the parent as big as the video or the '\n                        + 'video as big as the parent.');\n                    videoContainer.style.setProperty('width', 'max-content', 'important');\n                    videoContainer.style.setProperty('height', 'max-content', 'important');\n                }\n                this._updateScanRegionHighlight();\n                videoContainer.appendChild(this.$scanRegionHighlight!);\n            }\n        });\n\n        video.addEventListener('play', this._onPlay);\n        video.addEventListener('loadedmetadata', this._onLoadedMetaData);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        this._qrEnginePromise = QrScanner.createQrEngine();\n    }\n\n    async hasFlash(): Promise<boolean> {\n        let stream: MediaStream | undefined;\n        try {\n            if (this.$video.srcObject) {\n                if (!(this.$video.srcObject instanceof MediaStream)) return false; // srcObject is not a camera stream\n                stream = this.$video.srcObject;\n            } else {\n                stream = (await this._getCameraStream()).stream;\n            }\n            return 'torch' in stream.getVideoTracks()[0].getSettings();\n        } catch (e) {\n            return false;\n        } finally {\n            // close the stream we just opened for detecting whether it supports flash\n            if (stream && stream !== this.$video.srcObject) {\n                console.warn('Call hasFlash after successfully starting the scanner to avoid creating '\n                    + 'a temporary video stream');\n                QrScanner._stopVideoStream(stream);\n            }\n        }\n    }\n\n    isFlashOn(): boolean {\n        return this._flashOn;\n    }\n\n    async toggleFlash(): Promise<void> {\n        if (this._flashOn) {\n            await this.turnFlashOff();\n        } else {\n            await this.turnFlashOn();\n        }\n    }\n\n    async turnFlashOn(): Promise<void> {\n        if (this._flashOn || this._destroyed) return;\n        this._flashOn = true;\n        if (!this._active || this._paused) return; // flash will be turned on later on .start()\n        try {\n            if (!await this.hasFlash()) throw 'No flash available';\n            // Note that the video track is guaranteed to exist and to be a MediaStream due to the check in hasFlash\n            await (this.$video.srcObject as MediaStream).getVideoTracks()[0].applyConstraints({\n                // @ts-ignore: constraint 'torch' is unknown to ts\n                advanced: [{ torch: true }],\n            });\n        } catch (e) {\n            this._flashOn = false;\n            throw e;\n        }\n    }\n\n    async turnFlashOff(): Promise<void> {\n        if (!this._flashOn) return;\n        // applyConstraints with torch: false does not work to turn the flashlight off, as a stream's torch stays\n        // continuously on, see https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#torch. Therefore,\n        // we have to stop the stream to turn the flashlight off.\n        this._flashOn = false;\n        await this._restartVideoStream();\n    }\n\n    destroy(): void {\n        this.$video.removeEventListener('loadedmetadata', this._onLoadedMetaData);\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        this._destroyed = true;\n        this._flashOn = false;\n        this.stop(); // sets this._paused = true and this._active = false\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\n    }\n\n    async start(): Promise<void> {\n        if ((this._active && !this._paused) || this._destroyed) return;\n\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n\n        this._active = true;\n        if (document.hidden) return; // camera will be started as soon as tab is in foreground\n        this._paused = false;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            await this.$video.play();\n            return;\n        }\n\n        try {\n            const { stream, facingMode } = await this._getCameraStream();\n            if (!this._active || this._paused) {\n                // was stopped in the meantime\n                QrScanner._stopVideoStream(stream);\n                return;\n            }\n            this._setVideoMirror(facingMode);\n            this.$video.srcObject = stream;\n            await this.$video.play();\n\n            // Restart the flash if it was previously on\n            if (this._flashOn) {\n                this._flashOn = false; // force turnFlashOn to restart the flash\n                this.turnFlashOn().catch(() => {});\n            }\n        } catch (e) {\n            if (this._paused) return;\n            this._active = false;\n            throw e;\n        }\n    }\n\n    stop(): void {\n        this.pause();\n        this._active = false;\n    }\n\n    async pause(stopStreamImmediately = false): Promise<boolean> {\n        this._paused = true;\n        if (!this._active) return true;\n        this.$video.pause();\n\n        if (this.$scanRegionHighlight) {\n            this.$scanRegionHighlight.style.display = 'none';\n        }\n\n        const stopStream = () => {\n            if (this.$video.srcObject instanceof MediaStream) {\n                // revoke srcObject only if it's a stream which was likely set by us\n                QrScanner._stopVideoStream(this.$video.srcObject);\n                this.$video.srcObject = null;\n            }\n        };\n\n        if (stopStreamImmediately) {\n            stopStream();\n            return true;\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        if (!this._paused) return false;\n        stopStream();\n        return true;\n    }\n\n    async setCamera(facingModeOrDeviceId: QrScanner.FacingMode | QrScanner.DeviceId): Promise<void> {\n        if (facingModeOrDeviceId === this._preferredCamera) return;\n        this._preferredCamera = facingModeOrDeviceId;\n        // Restart the scanner with the new camera which will also update the video mirror and the scan region.\n        await this._restartVideoStream();\n    }\n\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        options: {\n            scanRegion?: QrScanner.ScanRegion | null,\n            qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n            canvas?: HTMLCanvasElement | null,\n            disallowCanvasResizing?: boolean,\n            alsoTryWithoutScanRegion?: boolean,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n    ): Promise<QrScanner.ScanResult>;\n    /** @deprecated */\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        scanRegion?: QrScanner.ScanRegion | null,\n        qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing?: boolean,\n        alsoTryWithoutScanRegion?: boolean,\n    ): Promise<string>;\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        scanRegionOrOptions?: QrScanner.ScanRegion | {\n            scanRegion?: QrScanner.ScanRegion | null,\n            qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n            canvas?: HTMLCanvasElement | null,\n            disallowCanvasResizing?: boolean,\n            alsoTryWithoutScanRegion?: boolean,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        } | null,\n        qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing: boolean = false,\n        alsoTryWithoutScanRegion: boolean = false,\n    ): Promise<string | QrScanner.ScanResult> {\n        let scanRegion: QrScanner.ScanRegion | null | undefined;\n        let returnDetailedScanResult = false;\n        if (scanRegionOrOptions && (\n            'scanRegion' in scanRegionOrOptions\n            || 'qrEngine' in scanRegionOrOptions\n            || 'canvas' in scanRegionOrOptions\n            || 'disallowCanvasResizing' in scanRegionOrOptions\n            || 'alsoTryWithoutScanRegion' in scanRegionOrOptions\n            || 'returnDetailedScanResult' in scanRegionOrOptions\n        )) {\n            // we got an options object using the new api\n            scanRegion = scanRegionOrOptions.scanRegion;\n            qrEngine = scanRegionOrOptions.qrEngine;\n            canvas = scanRegionOrOptions.canvas;\n            disallowCanvasResizing = scanRegionOrOptions.disallowCanvasResizing || false;\n            alsoTryWithoutScanRegion = scanRegionOrOptions.alsoTryWithoutScanRegion || false;\n            returnDetailedScanResult = true;\n        } else if (scanRegionOrOptions || qrEngine || canvas || disallowCanvasResizing || alsoTryWithoutScanRegion) {\n            console.warn('You\\'re using a deprecated api for scanImage which will be removed in the future.');\n        } else {\n            // Only imageOrFileOrBlobOrUrl was specified and we can't distinguish between new or old api usage. For\n            // backwards compatibility we have to assume the old api for now. The options object is marked as non-\n            // optional in the parameter list above to make clear that ScanResult instead of string is only returned if\n            // an options object was provided. However, in the future once legacy support is removed, the options object\n            // should become optional.\n            console.warn('Note that the return type of scanImage will change in the future. To already switch to the '\n                + 'new api today, you can pass returnDetailedScanResult: true.');\n        }\n\n        const gotExternalEngine = !!qrEngine;\n\n        try {\n            let image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n                | SVGImageElement;\n            let canvasContext: CanvasRenderingContext2D;\n            [qrEngine, image] = await Promise.all([\n                qrEngine || QrScanner.createQrEngine(),\n                QrScanner._loadImage(imageOrFileOrBlobOrUrl),\n            ]);\n            [canvas, canvasContext] = QrScanner._drawToCanvas(image, scanRegion, canvas, disallowCanvasResizing);\n\n            if (qrEngine instanceof Worker) {\n                const qrEngineWorker = qrEngine; // for ts to know that it's still a worker later in the event listeners\n                if (!gotExternalEngine) {\n                    // Enable scanning of inverted color qr codes. Not using _postWorkerMessage as it's async\n                    qrEngineWorker.postMessage({ type: 'inversionMode', data: 'both' });\n                }\n                return await new Promise((resolve, reject) => {\n                    let timeout: number;\n                    let onMessage: (event: MessageEvent) => void;\n                    let onError: (error: ErrorEvent | string) => void;\n                    onMessage = (event: MessageEvent) => {\n                        if (event.data.type !== 'qrResult') {\n                            return;\n                        }\n                        qrEngineWorker.removeEventListener('message', onMessage);\n                        qrEngineWorker.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        if (event.data.data !== null) {\n                            resolve(returnDetailedScanResult ? {\n                                data: event.data.data,\n                                cornerPoints: QrScanner._convertPoints(event.data.cornerPoints, scanRegion),\n                            } : event.data.data);\n                        } else {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        }\n                    };\n                    onError = (error: ErrorEvent | string) => {\n                        qrEngineWorker.removeEventListener('message', onMessage);\n                        qrEngineWorker.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        const errorMessage = !error ? 'Unknown Error' : ((error as ErrorEvent).message || error);\n                        reject('Scanner error: ' + errorMessage);\n                    };\n                    qrEngineWorker.addEventListener('message', onMessage);\n                    qrEngineWorker.addEventListener('error', onError);\n                    timeout = setTimeout(() => onError('timeout'), 10000);\n                    const imageData = canvasContext.getImageData(0, 0, canvas!.width, canvas!.height);\n                    qrEngineWorker.postMessage({\n                        type: 'decode',\n                        data: imageData\n                    }, [imageData.data.buffer]);\n                });\n            } else {\n                return await Promise.race([\n                    new Promise<QrScanner.ScanResult | string>((resolve, reject) => window.setTimeout(\n                        () => reject('Scanner error: timeout'),\n                        10000,\n                    )),\n                   (async (): Promise<QrScanner.ScanResult | string> => {\n                        try {\n                            const [scanResult] = await qrEngine.detect(canvas!);\n                            if (!scanResult) throw QrScanner.NO_QR_CODE_FOUND;\n                            return returnDetailedScanResult ? {\n                                data: scanResult.rawValue,\n                                cornerPoints: QrScanner._convertPoints(scanResult.cornerPoints, scanRegion),\n                            } : scanResult.rawValue;\n                        } catch (e) {\n                            throw `Scanner error: ${(e as Error).message || e}`;\n                        }\n                    })(),\n                ]);\n            }\n        } catch (e) {\n            if (!scanRegion || !alsoTryWithoutScanRegion) throw e;\n            const detailedScanResult = await QrScanner.scanImage(\n                imageOrFileOrBlobOrUrl,\n                { qrEngine, canvas, disallowCanvasResizing },\n            );\n            return returnDetailedScanResult ? detailedScanResult : detailedScanResult.data;\n        } finally {\n            if (!gotExternalEngine) {\n                QrScanner._postWorkerMessage(qrEngine!, 'close');\n            }\n        }\n    }\n\n    setGrayscaleWeights(red: number, green: number, blue: number, useIntegerApproximation: boolean = true): void {\n        // Note that for the native BarcodeDecoder or if the worker was destroyed, this is a no-op. However, the native\n        // implementations work also well with colored qr codes.\n        QrScanner._postWorkerMessage(\n            this._qrEnginePromise,\n            'grayscaleWeights',\n            { red, green, blue, useIntegerApproximation }\n        );\n    }\n\n    setInversionMode(inversionMode: QrScanner.InversionMode): void {\n        // Note that for the native BarcodeDecoder or if the worker was destroyed, this is a no-op. However, the native\n        // implementations scan normal and inverted qr codes by default\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\n    }\n\n    static async createQrEngine(workerPath: string = QrScanner.WORKER_PATH): Promise<Worker | BarcodeDetector> {\n        const hasNativeBarcodeDetector = 'BarcodeDetector' in window && BarcodeDetector.getSupportedFormats\n            ? (await BarcodeDetector.getSupportedFormats()).includes('qr_code')\n            : false;\n        return hasNativeBarcodeDetector ? new BarcodeDetector({ formats: ['qr_code'] }) : new Worker(workerPath);\n    }\n\n    private _onPlay(): void {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._updateScanRegionHighlight();\n        if (this.$scanRegionHighlight) {\n            this.$scanRegionHighlight.style.display = '';\n        }\n        this._scanFrame();\n    }\n\n    private _onLoadedMetaData(): void {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._updateScanRegionHighlight();\n    }\n\n    private _onVisibilityChange(): void {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    private _calculateScanRegion(video: HTMLVideoElement): QrScanner.ScanRegion {\n        // Default scan region calculation. Note that this can be overwritten in the constructor.\n        const smallestDimension = Math.min(video.videoWidth, video.videoHeight);\n        const scanRegionSize = Math.round(2 / 3 * smallestDimension);\n        return {\n            x: Math.round((video.videoWidth - scanRegionSize) / 2),\n            y: Math.round((video.videoHeight - scanRegionSize) / 2),\n            width: scanRegionSize,\n            height: scanRegionSize,\n            downScaledWidth: this._legacyCanvasSize,\n            downScaledHeight: this._legacyCanvasSize,\n        };\n    }\n\n    private _updateScanRegionHighlight(): void {\n        if (!this.$scanRegionHighlight) return;\n        const video = this.$video;\n        const videoWidth = video.videoWidth;\n        const videoHeight = video.videoHeight;\n\n        this.$scanRegionHighlight.style.width = `${(this._scanRegion.width || videoWidth) / videoWidth * 100}%`;\n        this.$scanRegionHighlight.style.height = `${(this._scanRegion.height || videoHeight) / videoHeight * 100}%`;\n        this.$scanRegionHighlight.style.top = `${(this._scanRegion.y || 0) / videoHeight * 100}%`;\n        const isVideoMirrored = /scaleX\\(-1\\)/.test(video.style.transform!);\n        this.$scanRegionHighlight.style[isVideoMirrored ? 'right' : 'left'] =\n            `${(this._scanRegion.x || 0) / videoWidth * 100}%`;\n        this.$scanRegionHighlight.style[isVideoMirrored ? 'left' : 'right'] = 'unset';\n    }\n\n    private static _convertPoints(\n        points: QrScanner.Point[],\n        scanRegion?: QrScanner.ScanRegion | null,\n    ): QrScanner.Point[] {\n        if (!scanRegion) return points;\n        const offsetX = scanRegion.x || 0;\n        const offsetY = scanRegion.y || 0;\n        const scaleFactorX = scanRegion.width && scanRegion.downScaledWidth\n            ? scanRegion.width / scanRegion.downScaledWidth\n            : 1;\n        const scaleFactorY = scanRegion.height && scanRegion.downScaledHeight\n            ? scanRegion.height / scanRegion.downScaledHeight\n            : 1;\n        for (const point of points) {\n            point.x = point.x * scaleFactorX + offsetX;\n            point.y = point.y * scaleFactorY + offsetY;\n        }\n        return points;\n    }\n\n    private _scanFrame(): void {\n        if (!this._active || this.$video.paused || this.$video.ended) return;\n        // using requestAnimationFrame to avoid scanning if tab is in background\n        requestAnimationFrame(async () => {\n            if (this.$video.readyState <= 1) {\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\n                // the canvas until the video is started again and ready.\n                this._scanFrame();\n                return;\n            }\n\n            let result: QrScanner.ScanResult | undefined;\n            try {\n                result = await QrScanner.scanImage(this.$video, {\n                    scanRegion: this._scanRegion,\n                    qrEngine: this._qrEnginePromise,\n                    canvas: this.$canvas,\n                });\n            } catch (error) {\n                if (!this._active) return;\n                const errorMessage = (error as Error).message || error as string;\n                if (errorMessage.includes('service unavailable')) {\n                    // When the native BarcodeDetector crashed, create a new one\n                    this._qrEnginePromise = QrScanner.createQrEngine();\n                }\n                this._onDecodeError(error as Error | string);\n            }\n\n            if (result && this._onDecode) {\n                this._onDecode(result);\n            } else if (result && this._legacyOnDecode) {\n                this._legacyOnDecode(result.data);\n            }\n\n            this._scanFrame();\n        });\n    }\n\n    private _onDecodeError(error: Error | string): void {\n        // default error handler; can be overwritten in the constructor\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\n        console.log(error);\n    }\n\n    private async _getCameraStream(): Promise<{ stream: MediaStream, facingMode: QrScanner.FacingMode }> {\n        if (!navigator.mediaDevices) throw 'Camera not found.';\n\n        const preferenceType = /^(environment|user)$/.test(this._preferredCamera)\n            ? 'facingMode'\n            : 'deviceId';\n        const constraintsWithoutCamera: Array<MediaTrackConstraints> = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n        const constraintsWithCamera = constraintsWithoutCamera.map((constraint) => Object.assign({}, constraint, {\n            [preferenceType]: { exact: this._preferredCamera },\n        }));\n\n        for (const constraints of [...constraintsWithCamera, ...constraintsWithoutCamera]) {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: constraints, audio: false });\n                // Try to determine the facing mode from the stream, otherwise use a guess or 'environment' as\n                // default. Note that the guess is not always accurate as Safari returns cameras of different facing\n                // mode, even for exact facingMode constraints.\n                const facingMode = this._getFacingMode(stream)\n                    || (constraints.facingMode\n                        ? this._preferredCamera as QrScanner.FacingMode // a facing mode we were able to fulfill\n                        : (this._preferredCamera === 'environment'\n                            ? 'user' // switch as _preferredCamera was environment but we are not able to fulfill it\n                            : 'environment' // switch from unfulfilled user facingMode or default to environment\n                        )\n                    );\n                return { stream, facingMode };\n            } catch (e) {}\n        }\n\n        throw 'Camera not found.';\n    }\n\n    private async _restartVideoStream(): Promise<void> {\n        // Note that we always pause the stream and not only if !this._paused as even if this._paused === true, the\n        // stream might still be running, as it's by default only stopped after a delay of 300ms.\n        const wasPaused = this._paused;\n        const paused = await this.pause(true);\n        if (!paused || wasPaused || !this._active) return;\n        await this.start();\n    }\n\n    private static _stopVideoStream(stream : MediaStream): void {\n        for (const track of stream.getTracks()) {\n            track.stop(); //  note that this will also automatically turn the flashlight off\n            stream.removeTrack(track);\n        }\n    }\n\n    private _setVideoMirror(facingMode: QrScanner.FacingMode): void {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode === 'user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    private _getFacingMode(videoStream: MediaStream): QrScanner.FacingMode | null {\n        const videoTrack = videoStream.getVideoTracks()[0];\n        if (!videoTrack) return null; // unknown\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\n        return /rear|back|environment/i.test(videoTrack.label)\n            ? 'environment'\n            : /front|user|face/i.test(videoTrack.label)\n                ? 'user'\n                : null; // unknown\n    }\n\n    private static _drawToCanvas(\n        image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement,\n        scanRegion?: QrScanner.ScanRegion | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing= false,\n    ): [HTMLCanvasElement, CanvasRenderingContext2D] {\n        canvas = canvas || document.createElement('canvas');\n        const scanRegionX = scanRegion && scanRegion.x ? scanRegion.x : 0;\n        const scanRegionY = scanRegion && scanRegion.y ? scanRegion.y : 0;\n        const scanRegionWidth = scanRegion && scanRegion.width\n            ? scanRegion.width\n            : (image as HTMLVideoElement).videoWidth || image.width as number;\n        const scanRegionHeight = scanRegion && scanRegion.height\n            ? scanRegion.height\n            : (image as HTMLVideoElement).videoHeight || image.height as number;\n\n        if (!disallowCanvasResizing) {\n            const canvasWidth = scanRegion && scanRegion.downScaledWidth\n                ? scanRegion.downScaledWidth\n                : scanRegionWidth;\n            const canvasHeight = scanRegion && scanRegion.downScaledHeight\n                ? scanRegion.downScaledHeight\n                : scanRegionHeight;\n            // Setting the canvas width or height clears the canvas, even if the values didn't change, therefore only\n            // set them if they actually changed.\n            if (canvas.width !== canvasWidth) {\n                canvas.width = canvasWidth;\n            }\n            if (canvas.height !== canvasHeight) {\n                canvas.height = canvasHeight;\n            }\n        }\n\n        const context = canvas.getContext('2d', { alpha: false })!;\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(\n            image,\n            scanRegionX, scanRegionY, scanRegionWidth, scanRegionHeight,\n            0, 0, canvas.width, canvas.height,\n        );\n        return [canvas, context];\n    }\n\n    private static async _loadImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n    ): Promise<HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n        | SVGImageElement > {\n        if (imageOrFileOrBlobOrUrl instanceof Image) {\n            await QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl);\n            return imageOrFileOrBlobOrUrl;\n        } else if (imageOrFileOrBlobOrUrl instanceof HTMLVideoElement\n            || imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement\n            || imageOrFileOrBlobOrUrl instanceof SVGImageElement\n            || 'OffscreenCanvas' in window && imageOrFileOrBlobOrUrl instanceof OffscreenCanvas\n            || 'ImageBitmap' in window && imageOrFileOrBlobOrUrl instanceof ImageBitmap) {\n            return imageOrFileOrBlobOrUrl;\n        } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob\n            || imageOrFileOrBlobOrUrl instanceof URL || typeof imageOrFileOrBlobOrUrl === 'string') {\n            const image = new Image();\n            if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\n            } else {\n                image.src = imageOrFileOrBlobOrUrl.toString();\n            }\n            try {\n                await QrScanner._awaitImageLoad(image);\n                return image;\n            } finally {\n                if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                    URL.revokeObjectURL(image.src);\n                }\n            }\n        } else {\n            throw 'Unsupported image type.';\n        }\n    }\n\n    private static async _awaitImageLoad(image: HTMLImageElement): Promise<void> {\n        if (image.complete && image.naturalWidth !== 0) return; // already loaded\n        await new Promise<void>((resolve, reject) => {\n            const listener = (event: ErrorEvent | Event) => {\n                image.removeEventListener('load', listener);\n                image.removeEventListener('error', listener);\n                if (event instanceof ErrorEvent) {\n                    reject('Image load error');\n                } else {\n                    resolve();\n                }\n            };\n            image.addEventListener('load', listener);\n            image.addEventListener('error', listener);\n        });\n    }\n\n    private static async _postWorkerMessage(\n        qrEngineOrQrEnginePromise: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector>,\n        type: string,\n        data?: any,\n    ): Promise<void> {\n        const qrEngine = await qrEngineOrQrEnginePromise;\n        if (!(qrEngine instanceof Worker)) return;\n        qrEngine.postMessage({ type, data });\n    }\n}\n\ndeclare namespace QrScanner {\n    export interface ScanRegion {\n        x?: number;\n        y?: number;\n        width?: number;\n        height?: number;\n        downScaledWidth?: number;\n        downScaledHeight?: number;\n    }\n\n    export type FacingMode = 'environment' | 'user';\n    export type DeviceId = string;\n\n    export interface Camera {\n        id: DeviceId;\n        label: string;\n    }\n\n    export type InversionMode = 'original' | 'invert' | 'both';\n\n    export interface Point {\n        x: number;\n        y: number;\n    }\n\n    export interface ScanResult {\n        data: string;\n        // In clockwise order, starting at top left, but this might not be guaranteed in the future.\n        cornerPoints: QrScanner.Point[];\n    }\n}\n\n// simplified from https://wicg.github.io/shape-detection-api/#barcode-detection-api\ndeclare class BarcodeDetector {\n    constructor(options?: { formats: string[] });\n    static getSupportedFormats(): Promise<string[]>;\n    detect(image: ImageBitmapSource): Promise<Array<{ rawValue: string, cornerPoints: QrScanner.Point[] }>>;\n}\n"],"names":["QrScanner","constructor","video","onDecode","canvasSizeOrOnDecodeErrorOrOptions","canvasSizeOrCalculateScanRegion","preferredCamera","DEFAULT_CANVAS_SIZE","$video","$canvas","document","createElement","_onDecode","console","warn","_legacyOnDecode","_onDecodeError","options","onDecodeError","_calculateScanRegion","calculateScanRegion","_preferredCamera","_legacyCanvasSize","highlightScanRegion","$scanRegionHighlight","classList","add","style","position","display","outline","_scanRegion","_onPlay","bind","_onLoadedMetaData","_onVisibilityChange","disablePictureInPicture","playsInline","muted","shouldHideVideo","hidden","body","contains","appendChild","requestAnimationFrame","videoStyle","setProperty","visibility","opacity","width","height","includes","containerStyle","videoContainer","_updateScanRegionHighlight","addEventListener","_qrEnginePromise","createQrEngine","hasCamera","length","listCameras","e","requestLabels","navigator","mediaDevices","filter","device","openedStream","every","enumerateCameras","camera","label","getUserMedia","audio","map","i","id","deviceId","_stopVideoStream","hasFlash","stream","srcObject","MediaStream","_getCameraStream","getVideoTracks","getSettings","isFlashOn","_flashOn","toggleFlash","turnFlashOff","turnFlashOn","_destroyed","_active","_paused","applyConstraints","advanced","torch","_restartVideoStream","destroy","removeEventListener","stop","_postWorkerMessage","start","window","location","protocol","play","facingMode","_setVideoMirror","catch","pause","stopStreamImmediately","stopStream","Promise","resolve","setTimeout","setCamera","facingModeOrDeviceId","scanImage","imageOrFileOrBlobOrUrl","scanRegionOrOptions","qrEngine","canvas","disallowCanvasResizing","alsoTryWithoutScanRegion","scanRegion","returnDetailedScanResult","image","canvasContext","all","_loadImage","_drawToCanvas","Worker","gotExternalEngine","qrEngineWorker","postMessage","type","data","reject","timeout","onMessage","onError","event","clearTimeout","cornerPoints","_convertPoints","NO_QR_CODE_FOUND","error","imageData","buffer","race","scanResult","rawValue","message","detailedScanResult","setGrayscaleWeights","red","green","blue","useIntegerApproximation","setInversionMode","inversionMode","workerPath","WORKER_PATH","BarcodeDetector","getSupportedFormats","formats","_scanFrame","x","Math","round","videoWidth","scanRegionSize","y","videoHeight","downScaledWidth","downScaledHeight","top","isVideoMirrored","points","point","scaleFactorX","offsetX","scaleFactorY","offsetY","paused","ended","readyState","result","log","min","constraint","preferenceType","exact","constraints","wasPaused","track","removeTrack","transform","_getFacingMode","videoStream","test","videoTrack","scanRegionWidth","scanRegionHeight","canvasWidth","canvasHeight","alpha","context","imageSmoothingEnabled","drawImage","scanRegionX","scanRegionY","Image","_awaitImageLoad","HTMLVideoElement","HTMLCanvasElement","SVGImageElement","OffscreenCanvas","ImageBitmap","File","Blob","URL","src","createObjectURL","toString","revokeObjectURL","complete","naturalWidth","listener","ErrorEvent","qrEngineOrQrEnginePromise"],"mappings":"qPAAqBA,GA4FjBC,YACIC,EACAC,EACAC,EAQAC,EACAC,GAnDa,sBAAA,CAA4BN,CAAUO,CAAAA,mBAC/C,sBAAA,CAA8D,aAM9D,gBAAA,CADA,aACA,CAFA,YAEA,CAHA,YAGA,CAHmB,CAAA,CAiDvB,KAAKC,CAAAA,MAAL,CAAcN,CACd,KAAKO,CAAAA,OAAL,CAAeC,QAASC,CAAAA,aAAT,CAAuB,QAAvB,CAEXP,EAAJ,EAAwF,QAAxF,GAA0C,MAAOA,EAAjD,CAEI,IAAKQ,CAAAA,SAFT;AAEqBT,CAFrB,EAIQC,CAAJ,EAA0CC,CAA1C,EAA6EC,CAA7E,CACIO,OAAQC,CAAAA,IAAR,CAAa,oGAAb,CADJ,CASID,OAAQC,CAAAA,IAAR,CAAa,0KAAb,CAGJ,CAAA,IAAKC,CAAAA,eAAL,CAAuBZ,CAhB3B,wBAoBMC,EACA,EACN,KAAKY,CAAAA,cAAL,CAAsBC,CAAQC,CAAAA,aAA9B,GAA8F,UAA9C,GAAA,MAAOd,EAAP,CAC1CA,CAD0C,CAE1C,IAAKY,CAAAA,cAFX,CAGA,KAAKG,CAAAA,oBAAL,CAA4BF,CAAQG,CAAAA,mBAApC,GAAqG,UAAzC;AAAA,MAAOf,EAAP,CACtDA,CADsD,CAEtD,IAAKc,CAAAA,oBAFX,CAGA,KAAKE,CAAAA,gBAAL,CAAwBJ,CAAQX,CAAAA,eAAhC,EAAmDA,CAAnD,EAAsE,IAAKe,CAAAA,gBAC3E,KAAKC,CAAAA,iBAAL,CAAuE,QAA9C,GAAA,MAAOlB,EAAP,CACnBA,CADmB,CAEwB,QAA3C,GAAA,MAAOC,EAAP,CACIA,CADJ,CAEI,IAAKiB,CAAAA,iBAEXL,EAAQM,CAAAA,mBAAZ,GACI,IAAKC,CAAAA,oBAKL,CAL4Bd,QAASC,CAAAA,aAAT,CAAuB,KAAvB,CAK5B,CAJA,IAAKa,CAAAA,oBAAqBC,CAAAA,SAAUC,CAAAA,GAApC,CAAwC,uBAAxC,CAIA,CAHA,IAAKF,CAAAA,oBAAqBG,CAAAA,KAAMC,CAAAA,QAGhC,CAH2C,UAG3C,CAFA,IAAKJ,CAAAA,oBAAqBG,CAAAA,KAAME,CAAAA,OAEhC,CAF0C,MAE1C,CAAA,IAAKL,CAAAA,oBAAqBG,CAAAA,KAAMG,CAAAA,OAAhC,CAA0C,mCAN9C,CAQA;IAAKC,CAAAA,WAAL,CAAmB,IAAKZ,CAAAA,oBAAL,CAA0BjB,CAA1B,CAEnB,KAAK8B,CAAAA,OAAL,CAAe,IAAKA,CAAAA,OAAQC,CAAAA,IAAb,CAAkB,IAAlB,CACf,KAAKC,CAAAA,iBAAL,CAAyB,IAAKA,CAAAA,iBAAkBD,CAAAA,IAAvB,CAA4B,IAA5B,CACzB,KAAKE,CAAAA,mBAAL,CAA2B,IAAKA,CAAAA,mBAAoBF,CAAAA,IAAzB,CAA8B,IAA9B,CAG3B/B,EAAMkC,CAAAA,uBAAN,CAAgC,CAAA,CAIhClC,EAAMmC,CAAAA,WAAN,CAAoB,CAAA,CAGpBnC,EAAMoC,CAAAA,KAAN,CAAc,CAAA,CAId,KAAIC,EAAkB,CAAA,CAClBrC,EAAMsC,CAAAA,MAAV,GACItC,CAAMsC,CAAAA,MACN,CADe,CAAA,CACf,CAAAD,CAAA,CAAkB,CAAA,CAFtB,CAIK7B,SAAS+B,CAAAA,IAAKC,CAAAA,QAAd,CAAuBxC,CAAvB,CAAL,GACIQ,QAAS+B,CAAAA,IAAKE,CAAAA,WAAd,CAA0BzC,CAA1B,CACA,CAAAqC,CAAA,CAAkB,CAAA,CAFtB,CAIA,sBACAK,sBAAA,CAAsB,EAAA,GAElB,gCAAA,6BAE2B,OAA3B,GAAIC,CAAWhB,CAAAA,OAAf,GACI3B,CAAMyB,CAAAA,KAAMmB,CAAAA,WAAZ,CAAwB,SAAxB;AAAmC,OAAnC,CAA4C,WAA5C,CACA,CAAAP,CAAA,CAAkB,CAAA,CAFtB,CAI8B,UAA9B,GAAIM,CAAWE,CAAAA,UAAf,GACI7C,CAAMyB,CAAAA,KAAMmB,CAAAA,WAAZ,CAAwB,YAAxB,CAAsC,SAAtC,CAAiD,WAAjD,CACA,CAAAP,CAAA,CAAkB,CAAA,CAFtB,CAIIA,EAAJ,GAEI1B,OAAQC,CAAAA,IAAR,CAAa,yFAAb,CAKA,CAJAZ,CAAMyB,CAAAA,KAAMqB,CAAAA,OAIZ,CAJsB,GAItB,CAHA9C,CAAMyB,CAAAA,KAAMsB,CAAAA,KAGZ,CAHoB,GAGpB,CAFA/C,CAAMyB,CAAAA,KAAMuB,CAAAA,MAEZ,CAFqB,GAErB,CAAA,OAAO,IAAK1B,CAAAA,oBAPhB,CAUA,IAAI,IAAKA,CAAAA,oBAAT,CAA+B,CACtB,CAAC,UAAD,CAAa,UAAb,CAAyB,OAAzB,CAAkC,QAAlC,CAA4C2B,CAAAA,QAA5C,CAAqDC,CAAexB,CAAAA,QAApE,CAAL,GACIf,OAAQC,CAAAA,IAAR,CAAa,iLAAb,CAGA;AAAAuC,CAAe1B,CAAAA,KAAMmB,CAAAA,WAArB,CAAiC,UAAjC,CAA6C,UAA7C,CAAyD,WAAzD,CAJJ,CAMA,IAAIM,CAAeH,CAAAA,KAAnB,GAA6BJ,CAAWI,CAAAA,KAAxC,EACOG,CAAeF,CAAAA,MADtB,GACiCL,CAAWK,CAAAA,MAD5C,CAEIrC,OAAQC,CAAAA,IAAR,CAAa,uMAAb,CAIA,CADAuC,CAAe1B,CAAAA,KAAMmB,CAAAA,WAArB,CAAiC,OAAjC,CAA0C,aAA1C,CAAyD,WAAzD,CACA,CAAAO,CAAe1B,CAAAA,KAAMmB,CAAAA,WAArB,CAAiC,QAAjC,CAA2C,aAA3C,CAA0D,WAA1D,CAEJ,KAAKQ,CAAAA,0BAAL,EACAD,EAAeV,CAAAA,WAAf,CAA2B,IAAKnB,CAAAA,oBAAhC,CAhB2B,EAtBnC,CA0CAtB;CAAMqD,CAAAA,gBAAN,CAAuB,MAAvB,CAA+B,IAAKvB,CAAAA,OAApC,CACA9B,EAAMqD,CAAAA,gBAAN,CAAuB,gBAAvB,CAAyC,IAAKrB,CAAAA,iBAA9C,CACAxB,SAAS6C,CAAAA,gBAAT,CAA0B,kBAA1B,CAA8C,IAAKpB,CAAAA,mBAAnD,CAEA,KAAKqB,CAAAA,gBAAL,CAAwBxD,CAAUyD,CAAAA,cAAV,GA7NfC,sBAAS,GAClB,GAAI,CACA,MAAO,CAAC,CAAsCC,CAApC,MAAM3D,CAAU4D,CAAAA,WAAV,CAAsB,CAAA,CAAtB,CAA8BD,EAAAA,MAD9C,CAEF,MAAOE,CAAP,CAAU,CACR,MAAO,CAAA,CADC,EAKHD,wBAAW,CAACE,CAAA,CAAgB,CAAA,CAAjB,EACpB,GAAI,CAACC,SAAUC,CAAAA,YAAf,CAA6B,MAAO,EAEpC,gBACoDC,gDAAAA,EAAAA,OAAQC,yBAD5D,CAOIC,CACJ,IAAI,CACIL,CAAJ,EAAgDM,CAA1B,MAAMC,CAAA,EAAoBD,EAAAA,KAA3B,CAAkCE,CAAD,EAAY,CAACA,CAAOC,CAAAA,KAArD,CAArB;CACIJ,CADJ,CACmB,MAAMJ,SAAUC,CAAAA,YAAaQ,CAAAA,YAAvB,CAAoC,CAAEC,MAAO,CAAA,CAAT,CAAgBvE,MAAO,CAAA,CAAvB,CAApC,CADzB,CADA,CAIF,MAAO2D,CAAP,CAAU,EAKZ,GAAI,CACA,MAAkCa,CAA1B,MAAML,CAAA,EAAoBK,EAAAA,GAA3B,CAA+B,CAACJ,CAAD,CAASK,CAAT,CAAA,EAAgB,EAClDC,GAAIN,CAAOO,CAAAA,QADuC,CAElDN,MAAOD,CAAOC,CAAAA,KAAdA,GAA8B,CAAN,GAAAI,CAAA,CAAU,gBAAV,CAA6B,UAAUA,CAAV,CAAc,CAAd,EAArDJ,CAFkD,EAA/C,CADP,CAAJ,OAKU,CAEFJ,CAAJ,GACItD,OAAQC,CAAAA,IAAR,CAAa,sGAAb,CAEA,CAAAd,CAAU8E,CAAAA,gBAAV,CAA2BX,CAA3B,CAHJ,CAFM,EA+LRY,cAAQ,GACV,IAAIC,CACJ,IAAI,CACA,GAAI,IAAKxE,CAAAA,MAAOyE,CAAAA,SAAhB,CAA2B,CACvB,GAAI,EAAE,IAAKzE,CAAAA,MAAOyE,CAAAA,SAAd,WAAmCC,YAAnC,CAAJ,CAAqD,MAAO,CAAA,CAC5DF,EAAA,CAAS,IAAKxE,CAAAA,MAAOyE,CAAAA,SAFE,CAA3B,IAIID,EAAA,CAAyCA,CAA/B,MAAM,IAAKG,CAAAA,gBAAL,EAAyBH,EAAAA,MAE7C;MAAO,OAAP,EAAkBA,EAAOI,CAAAA,cAAP,EAAA,CAAwB,CAAxB,CAA2BC,CAAAA,WAA3B,EAPlB,CAQF,MAAOxB,CAAP,CAAU,CACR,MAAO,CAAA,CADC,CARZ,OAUU,CAEFmB,CAAJ,EAAcA,CAAd,GAAyB,IAAKxE,CAAAA,MAAOyE,CAAAA,SAArC,GACIpE,OAAQC,CAAAA,IAAR,CAAa,kGAAb,CAEA,CAAAd,CAAU8E,CAAAA,gBAAV,CAA2BE,CAA3B,CAHJ,CAFM,EAUdM,SAAS,GACL,MAAO,KAAKC,CAAAA,SAGVC,iBAAW,GACT,IAAKD,CAAAA,QAAT,CACI,MAAM,IAAKE,CAAAA,YAAL,EADV,CAGI,MAAM,IAAKC,CAAAA,WAAL,GAIRA,iBAAW,GACb,GAASH,CAAL,IAAKA,CAAAA,QAAT,EAA0BI,CAAL,IAAKA,CAAAA,UAA1B,GACA,IAAKJ,CAAAA,QACD,CADY,CAAA,CACZ,CAAC,IAAKK,CAAAA,OAAN,EAAsBC,CAAL,IAAKA,CAAAA,OAF1B,EAGA,GAAI,CACA,GAAI,CAAC,MAAM,IAAKd,CAAAA,QAAL,EAAX,CAA4B,KAAM,oBAAN;AAE5B,MAAO,IAAKvE,CAAAA,MAAOyE,CAAAA,SAA0BG,CAAAA,cAAtC,EAAA,CAAuD,CAAvD,CAA0DU,CAAAA,gBAA1D,CAA2E,CAE9EC,SAAU,CAAC,CAAEC,MAAO,CAAA,CAAT,CAAD,CAFoE,CAA3E,CAHP,CAOF,MAAOnC,CAAP,CAAU,CAER,KADA,KAAK0B,CAAAA,QACC1B,CADU,CAAA,CACVA,CAAAA,CAAN,CAFQ,EAMV4B,kBAAY,GACT,IAAKF,CAAAA,QAAV,GAIA,IAAKA,CAAAA,QACL,CADgB,CAAA,CAChB,CAAA,MAAM,IAAKU,CAAAA,mBAAL,EALN,EAQJC,OAAO,GACH,IAAK1F,CAAAA,MAAO2F,CAAAA,mBAAZ,CAAgC,gBAAhC,CAAkD,IAAKjE,CAAAA,iBAAvD,CACA,KAAK1B,CAAAA,MAAO2F,CAAAA,mBAAZ,CAAgC,MAAhC,CAAwC,IAAKnE,CAAAA,OAA7C,CACAtB,SAASyF,CAAAA,mBAAT,CAA6B,kBAA7B,CAAiD,IAAKhE,CAAAA,mBAAtD,CAEA,KAAKwD,CAAAA,UAAL,CAAkB,CAAA,CAClB,KAAKJ,CAAAA,QAAL,CAAgB,CAAA,CAChB,KAAKa,CAAAA,IAAL,EACApG,EAAUqG,CAAAA,kBAAV,CAA6B,IAAK7C,CAAAA,gBAAlC;AAAoD,OAApD,EAGE8C,WAAK,GACP,GAAI,EAAC,IAAKV,CAAAA,OAAN,EAAiB,CAAC,IAAKC,CAAAA,OAAvB,EAAmC,IAAKF,CAAAA,UAAxC,GAE6B,QAMpBnD,GANT+D,MAAOC,CAAAA,QAASC,CAAAA,QAMPjE,EAJT3B,OAAQC,CAAAA,IAAR,CAAa,4EAAb,CAIS0B,CADb,IAAKoD,CAAAA,OACQpD,CADE,CAAA,CACFA,CAAT9B,QAAS8B,CAAAA,MART,EAAJ,CAUA,GADA,IAAKqD,CAAAA,OACWZ,CADD,CAAA,CACCA,CAAZ,IAAKzE,CAAAA,MAAOyE,CAAAA,SAAhB,CAEI,MAAM,IAAKzE,CAAAA,MAAOkG,CAAAA,IAAZ,EAFV,KAMA,IAAI,CACA,KAAM,OAAA1B,EAAQ,WAAA2B,gCACV,EAAC,IAAKf,CAAAA,OAAV,EAAqB,IAAKC,CAAAA,OAA1B,CAEI7F,CAAU8E,CAAAA,gBAAV,CAA2BE,CAA3B,CAFJ,EAKA,IAAK4B,CAAAA,eAAL,CAAqBD,CAArB,CAKA,CAJA,IAAKnG,CAAAA,MAAOyE,CAAAA,SAIZ,CAJwBD,CAIxB,CAHA,MAAM,IAAKxE,CAAAA,MAAOkG,CAAAA,IAAZ,EAGN,CAAI,IAAKnB,CAAAA,QAAT;CACI,IAAKA,CAAAA,QACL,CADgB,CAAA,CAChB,CAAA,IAAKG,CAAAA,WAAL,EAAmBmB,CAAAA,KAAnB,CAAyB,EAAA,IAAzB,CAFJ,CAVA,CAFA,CAgBF,MAAOhD,CAAP,CAAU,CACR,GAASgC,CAAL,IAAKA,CAAAA,OAAT,CAEA,KADA,KAAKD,CAAAA,OACC/B,CADS,CAAA,CACTA,CAAAA,CAAN,CAHQ,EAOhBuC,IAAI,GACA,IAAKU,CAAAA,KAAL,EACA,KAAKlB,CAAAA,OAAL,CAAe,CAAA,EAGbkB,WAAK,CAACC,CAAA,CAAwB,CAAA,CAAzB,EACP,IAAKlB,CAAAA,OAAL,CAAe,CAAA,CACf,IAAI,CAAC,IAAKD,CAAAA,OAAV,CAAmB,MAAO,CAAA,CAC1B,KAAKpF,CAAAA,MAAOsG,CAAAA,KAAZ,EAEI,KAAKtF,CAAAA,oBAAT,GACI,IAAKA,CAAAA,oBAAqBG,CAAAA,KAAME,CAAAA,OADpC,CAC8C,MAD9C,CAIA,YACQ,IAAKrB,CAAAA,MAAOyE,CAAAA,SAAhB,WAAqCC,YAArC,GAEIlF,CAAU8E,CAAAA,gBAAV,CAA2B,IAAKtE,CAAAA,MAAOyE,CAAAA,SAAvC,CACA,CAAA,IAAKzE,CAAAA,MAAOyE,CAAAA,SAAZ,CAAwB,IAH5B,EAOJ,IAAI8B,CAAJ,CAEI,MADAC,EAAA,EACO,CAAA,CAAA,CAGX,OAAM,IAAIC,OAAJ,CAAaC,CAAD,EAAaC,UAAA,CAAWD,CAAX,CAAoB,GAApB,CAAzB,CACN,IAAI,CAAC,IAAKrB,CAAAA,OAAV,CAAmB,MAAO,CAAA,CAC1BmB;CAAA,EACA,OAAO,CAAA,EAGLI,eAAS,CAACC,CAAD,EACPA,CAAJ,GAA6B,IAAKhG,CAAAA,gBAAlC,GACA,IAAKA,CAAAA,gBAEL,CAFwBgG,CAExB,CAAA,MAAM,IAAKpB,CAAAA,mBAAL,EAHN,EA6BSqB,sBAAS,CAClBC,CADkB,CAGlBC,CAHkB,CAYlBC,CAZkB,CAalBC,CAbkB,CAclBC,CAAA,CAAkC,CAAA,CAdhB,CAelBC,CAAA,CAAoC,CAAA,CAflB,EAiBlB,IAAIC,CAAJ,CACIC,EAA2B,CAAA,CAC3BN,EAAJ,GACI,YADJ,EACoBA,EADpB,EAEO,UAFP,EAEqBA,EAFrB,EAGO,QAHP,EAGmBA,EAHnB,EAIO,wBAJP,EAImCA,EAJnC,EAKO,0BALP,EAKqCA,EALrC,EAMO,0BANP,EAMqCA,EANrC,GASIK,CAKA,CALaL,CAAoBK,CAAAA,UAKjC,CAJAJ,CAIA,CAJWD,CAAoBC,CAAAA,QAI/B,CAHAC,CAGA,CAHSF,CAAoBE,CAAAA,MAG7B,CAFAC,CAEA,CAFyBH,CAAoBG,CAAAA,sBAE7C,EAFuE,CAAA,CAEvE,CADAC,CACA,CAD2BJ,CAAoBI,CAAAA,wBAC/C,EAD2E,CAAA,CAC3E,CAAAE,CAAA,CAA2B,CAAA,CAd/B,EAeWN,CAAJ,EAA2BC,CAA3B,EAAuCC,CAAvC,EAAiDC,CAAjD,EAA2EC,CAA3E,CACH/G,OAAQC,CAAAA,IAAR,CAAa,kFAAb,CADG;AAQHD,OAAQC,CAAAA,IAAR,CAAa,wJAAb,MAIsB2G,CAE1B,IAAI,CACA,IAAIM,CAAJ,CAEIC,CACJ,EAACP,CAAD,CAAWM,CAAX,CAAA,CAAoB,MAAMd,OAAQgB,CAAAA,GAAR,CAAY,CAClCR,CADkC,EACtBzH,CAAUyD,CAAAA,cAAV,EADsB,CAElCzD,CAAUkI,CAAAA,UAAV,CAAqBX,CAArB,CAFkC,CAAZ,CAI1B,EAACG,CAAD,CAASM,CAAT,CAAA,CAA0BhI,CAAUmI,CAAAA,aAAV,CAAwBJ,CAAxB,CAA+BF,CAA/B,CAA2CH,CAA3C,CAAmDC,CAAnD,CAE1B,IAAIF,CAAJ,WAAwBW,OAAxB,CAAgC,CAC5B,OACKC,EAAL,EAEIC,CAAeC,CAAAA,WAAf,CAA2B,CAAEC,KAAM,eAAR,CAAyBC,KAAM,MAA/B,CAA3B,CAEJ,OAAO,OAAM,IAAIxB,OAAJ,CAAY,CAACC,CAAD,CAAUwB,CAAV,CAAA,GACrB,IAAIC,CAAJ,CACIC,CADJ,CAEIC,CACJD,EAAA,CAAaE,CAADF,GACgB,UAAxB,GAAIE,CAAML,CAAAA,IAAKD,CAAAA,IAAf,GAGAF,CAAenC,CAAAA,mBAAf,CAAmC,SAAnC,CAA8CyC,CAA9C,CAGA,CAFAN,CAAenC,CAAAA,mBAAf,CAAmC,OAAnC;AAA4C0C,CAA5C,CAEA,CADAE,YAAA,CAAaJ,CAAb,CACA,CAAwB,IAAxB,GAAIG,CAAML,CAAAA,IAAKA,CAAAA,IAAf,CACIvB,CAAA,CAAQY,CAAA,CAA2B,CAC/BW,KAAMK,CAAML,CAAAA,IAAKA,CAAAA,IADc,CAE/BO,aAAchJ,CAAUiJ,CAAAA,cAAV,CAAyBH,CAAML,CAAAA,IAAKO,CAAAA,YAApC,CAAkDnB,CAAlD,CAFiB,CAA3B,CAGJiB,CAAML,CAAAA,IAAKA,CAAAA,IAHf,CADJ,CAMIC,CAAA,CAAO1I,CAAUkJ,CAAAA,gBAAjB,CAZJ,EAeJL,EAAA,CAAWM,CAADN,GACNP,CAAenC,CAAAA,mBAAf,CAAmC,SAAnC,CAA8CyC,CAA9C,CACAN,EAAenC,CAAAA,mBAAf,CAAmC,OAAnC,CAA4C0C,CAA5C,CACAE,aAAA,CAAaJ,CAAb,CAEAD,EAAA,CAAO,iBAAP,gCAAA,GAEJJ,EAAe/E,CAAAA,gBAAf,CAAgC,SAAhC,CAA2CqF,CAA3C,CACAN,EAAe/E,CAAAA,gBAAf,CAAgC,OAAhC,CAAyCsF,CAAzC,CACAF,EAAA,CAAUxB,UAAA,CAAW,EAAA,EAAM0B,CAAA,CAAQ,SAAR,CAAjB,CAAqC,GAArC,CACV,wBAA8C,EAAGnB,QAAeA,SAChEY,EAAeC,CAAAA,WAAf,CAA2B,CACvBC,KAAM,QADiB,CAEvBC,KAAMW,CAFiB,CAA3B,CAGG,CAACA,CAAUX,CAAAA,IAAKY,CAAAA,MAAhB,CAHH,EA/BS,CANe,CA2C5B,MAAO,OAAMpC,OAAQqC,CAAAA,IAAR,CAAa,CACtB,IAAIrC,OAAJ,CAA2C,CAACC,CAAD;AAAUwB,CAAV,CAAA,EAAqBnC,MAAOY,CAAAA,UAAP,CAC5D,EAAA,EAAMuB,CAAA,CAAO,wBAAP,CADsD,CAE5D,GAF4D,CAAhE,CADsB,CAKtB,QAAA,GACI,GAAI,CACA,yBACA,IAAI,CAACa,CAAL,CAAiB,KAAMvJ,EAAUkJ,CAAAA,gBAAhB,CACjB,MAAOpB,EAAA,CAA2B,CAC9BW,KAAMc,CAAWC,CAAAA,QADa,CAE9BR,aAAchJ,CAAUiJ,CAAAA,cAAV,CAAyBM,CAAWP,CAAAA,YAApC,CAAkDnB,CAAlD,CAFgB,CAA3B,CAGH0B,CAAWC,CAAAA,QANf,CAOF,MAAO3F,CAAP,CAAU,CACR,KAAM,kBAAmBA,CAAY4F,CAAAA,OAA/B,EAA0C5F,CAA1C,EAAN,CADQ,EARhB,CAAD,EALuB,CAAb,CArDjB,CAwEF,MAAOA,CAAP,CAAU,CACR,GAAI,CAACgE,CAAL,EAAmB,CAACD,CAApB,CAA8C,KAAM/D,EAAN,CAC9C,0BAC0B,CACtB4D,SAAAA,CADsB,CACZC,OAAAA,CADY,CACJC,uBAAAA,CADI,EAG1B,OAAOG,EAAA,CAA2B4B,CAA3B,CAAgDA,CAAmBjB,CAAAA,IANlE,CAxEZ,OA+EU,CACDJ,CAAL,EACIrI,CAAUqG,CAAAA,kBAAV,CAA6BoB,CAA7B,CAAwC,OAAxC,CAFE,EAOdkC,mBAAmB,CAACC,CAAD,CAAcC,CAAd,CAA6BC,CAA7B,CAA2CC,CAAA,CAAmC,CAAA,CAA9E,EAGf/J,CAAUqG,CAAAA,kBAAV,CACI,IAAK7C,CAAAA,gBADT;AAEI,kBAFJ,CAGI,CAAEoG,IAAAA,CAAF,CAAOC,MAAAA,CAAP,CAAcC,KAAAA,CAAd,CAAoBC,wBAAAA,CAApB,CAHJ,EAOJC,gBAAgB,CAACC,CAAD,EAGZjK,CAAUqG,CAAAA,kBAAV,CAA6B,IAAK7C,CAAAA,gBAAlC,CAAoD,eAApD,CAAqEyG,CAArE,EAGSxG,2BAAc,CAACyG,CAAA,CAAqBlK,CAAUmK,CAAAA,WAAhC,EAIvB,uBAAO,SAAA,qCAAA,EAF6ChH,CAA7C,MAAMiH,eAAgBC,CAAAA,mBAAhB,EAAuClH,EAAAA,QAA9C,CAAuD,SAAvD,CAEC,CAA2B,IAAIiH,eAAJ,CAAoB,CAAEE,QAAS,CAAC,SAAD,CAAX,CAApB,CAA3B,CAA2E,IAAIlC,MAAJ,CAAW8B,CAAX,EAG9ElI,OAAO,GACX,IAAKD,CAAAA,WAAL,CAAmB,IAAKZ,CAAAA,oBAAL,CAA0B,IAAKX,CAAAA,MAA/B,CACnB,KAAK8C,CAAAA,0BAAL,EACI,KAAK9B,CAAAA,oBAAT;CACI,IAAKA,CAAAA,oBAAqBG,CAAAA,KAAME,CAAAA,OADpC,CAC8C,EAD9C,CAGA,KAAK0I,CAAAA,UAAL,GAGIrI,iBAAiB,GACrB,IAAKH,CAAAA,WAAL,CAAmB,IAAKZ,CAAAA,oBAAL,CAA0B,IAAKX,CAAAA,MAA/B,CACnB,KAAK8C,CAAAA,0BAAL,GAGInB,mBAAmB,GACnBzB,QAAS8B,CAAAA,MAAb,CACI,IAAKsE,CAAAA,KAAL,EADJ,CAEW,IAAKlB,CAAAA,OAFhB,EAGI,IAAKU,CAAAA,KAAL,GAIAnF,oBAAoB,CAACjB,CAAD,EAGxB,2CADmDA,eAEnD,OAAO,CACHsK,EAAGC,IAAKC,CAAAA,KAAL,EAAYxK,CAAMyK,CAAAA,UAAlB,CAA+BC,CAA/B,EAAiD,CAAjD,CADA,CAEHC,EAAGJ,IAAKC,CAAAA,KAAL,EAAYxK,CAAM4K,CAAAA,WAAlB,CAAgCF,CAAhC,EAAkD,CAAlD,CAFA,CAGH3H,MAAO2H,CAHJ,CAIH1H,OAAQ0H,CAJL,CAKHG,gBAAiB,IAAKzJ,CAAAA,iBALnB,CAMH0J,iBAAkB,IAAK1J,CAAAA,iBANpB,EAUHgC,0BAA0B,GAC9B,GAAK,IAAK9B,CAAAA,oBAAV,CAAA,CACA;WAAA,eAAA,gBAIA,KAAKA,CAAAA,oBAAqBG,CAAAA,KAAMsB,CAAAA,KAAhC,CAAwC,IAAI,IAAKlB,CAAAA,WAAYkB,CAAAA,KAArB,EAA8B0H,CAA9B,EAA4CA,CAA5C,CAAyD,GAAzD,GACxC,KAAKnJ,CAAAA,oBAAqBG,CAAAA,KAAMuB,CAAAA,MAAhC,CAAyC,IAAI,IAAKnB,CAAAA,WAAYmB,CAAAA,MAArB,EAA+B4H,CAA/B,EAA8CA,CAA9C,CAA4D,GAA5D,GACzC,KAAKtJ,CAAAA,oBAAqBG,CAAAA,KAAMsJ,CAAAA,GAAhC,CAAsC,IAAI,IAAKlJ,CAAAA,WAAY8I,CAAAA,CAArB,EAA0B,CAA1B,EAA+BC,CAA/B,CAA6C,GAA7C,4CAEtC,KAAKtJ,CAAAA,oBAAqBG,CAAAA,KAA1B,CAAgCuJ,CAAA,CAAkB,OAAlB,CAA4B,MAA5D,CAAA,CACI,IAAI,IAAKnJ,CAAAA,WAAYyI,CAAAA,CAArB,EAA0B,CAA1B,EAA+BG,CAA/B,CAA4C,GAA5C,GACJ,KAAKnJ,CAAAA,oBAAqBG,CAAAA,KAA1B,CAAgCuJ,CAAA,CAAkB,MAAlB,CAA2B,OAA3D,CAAA,CAAsE,OAXtE,EAcWjC,qBAAc,CACzBkC,CADyB,CAEzBtD,CAFyB,EAIzB,GAAI,CAACA,CAAL,CAAiB,MAAOsD,EACxB;YAAA,SAAA,8BAGMtD,CAAW5E,CAAAA,MAAQ4E,CAAWkD,CAAAA,gBAC9B,iCAEAlD,CAAW3E,CAAAA,OAAS2E,CAAWmD,CAAAA,iBAC/B,CACN,KAAK,KAAL,KAAA,CACII,CAAMZ,CAAAA,CACN,CADUY,CAAMZ,CAAAA,CAChB,CADoBa,CACpB,CADmCC,CACnC,CAAAF,CAAMP,CAAAA,CAAN,CAAUO,CAAMP,CAAAA,CAAhB,CAAoBU,CAApB,CAAmCC,CAEvC,OAAOL,GAGHZ,UAAU,GACV,CAAC,IAAK3E,CAAAA,OAAV,EAAqB,IAAKpF,CAAAA,MAAOiL,CAAAA,MAAjC,EAA2C,IAAKjL,CAAAA,MAAOkL,CAAAA,KAAvD,EAEA9I,qBAAA,CAAsB,OAAA,GAClB,GAAI,EAA0B,CAA1B,EAAA,IAAKpC,CAAAA,MAAOmL,CAAAA,UAAZ,CAAJ,CAAA,CAUA,GAAI,CACA,IAAAC,EAAS,MAAM5L,CAAUsH,CAAAA,SAAV,CAAoB,IAAK9G,CAAAA,MAAzB,CAAiC,CAC5CqH,WAAY,IAAK9F,CAAAA,WAD2B,CAE5C0F,SAAU,IAAKjE,CAAAA,gBAF6B,CAG5CkE,OAAQ,IAAKjH,CAAAA,OAH+B,CAAjC,CADf,CAMF,MAAO0I,CAAP,CAAc,CACZ,GAAI,CAAC,IAAKvD,CAAAA,OAAV,CAAmB,MAEFzC,WAAAA,GAAAA,EAAAA,QAAb,CAAsB,qBAAtB,CAAJ;CAEI,IAAKK,CAAAA,gBAFT,CAE4BxD,CAAUyD,CAAAA,cAAV,EAF5B,CAIA,KAAKzC,CAAAA,cAAL,CAAoBmI,CAApB,CAPY,CAUZyC,CAAJ,EAAc,IAAKhL,CAAAA,SAAnB,CACI,IAAKA,CAAAA,SAAL,CAAegL,CAAf,CADJ,CAEWA,CAFX,EAEqB,IAAK7K,CAAAA,eAF1B,EAGI,IAAKA,CAAAA,eAAL,CAAqB6K,CAAOnD,CAAAA,IAA5B,CA7BJ,CAKI,IAAK8B,CAAAA,UAAL,GANR,EAqCIvJ,cAAc,CAACmI,CAAD,EAEdA,CAAJ,GAAcnJ,CAAUkJ,CAAAA,gBAAxB,EACArI,OAAQgL,CAAAA,GAAR,CAAY1C,CAAZ,EAGUhE,sBAAgB,GAC1B,GAAI,CAACpB,SAAUC,CAAAA,YAAf,CAA6B,KAAM,mBAAN,CAE7B,yDACM,aACA,UAFN,KAIIf,MAAO,CAAE6I,IAAK,IAAP,GACR,CACC7I,MAAO,CAAE6I,IAAK,GAAP,CADR,EAEA,GAPH,SAQ0DC,oBAAiCA,EAAY,CACnG,CAACC,CAAD,EAAkB,CAAEC,MAAO,IAAK5K,CAAAA,gBAAd,CADiF,GAIvG;IAAK,KAAL,SAAmD,KAAnD,CACI,GAAI,CACA,iDAAyDnB,MAAOgM,EAAazH,MAAO,CAAA,GAApF,4BAKQyH,CAAYvF,CAAAA,UAAZ,CACE,IAAKtF,CAAAA,gBADP,CAE6B,aAA1B,GAAA,IAAKA,CAAAA,gBAAL,CACG,MADH,CAEG,cAGd,OAAO,CAAE2D,OAAAA,CAAF,CAAU2B,WAAAA,CAAV,CAbP,CAcF,MAAO9C,CAAP,CAAU,EAGhB,KAAM,mBAAN,EAGUoC,yBAAmB,GAG7B,uCAEA,EAAekG,CAAAA,CAAf,EAA6B,IAAKvG,CAAAA,OAAlC,EACA,MAAM,IAAKU,CAAAA,KAAL,GAGKxB,uBAAgB,CAACE,CAAD,EAC3B,IAAK,KAAL,iBAAA,CACIoH,CAAMhG,CAAAA,IAAN,EACA,CAAApB,CAAOqH,CAAAA,WAAP,CAAmBD,CAAnB,EAIAxF,eAAe,CAACD,CAAD,EAGnB,IAAKnG,CAAAA,MAAOmB,CAAAA,KAAM2K,CAAAA,SAAlB;AAA8B,SAA9B,iBAAA,EAAwD,IAGpDC,cAAc,CAACC,CAAD,EAElB,MAAA,EAAA,sBAAA,EAEO,wBAAyBC,CAAAA,IAAzB,CAA8BC,CAAWnI,CAAAA,KAAzC,CAAA,CACD,aADC,CAED,kBAAmBkI,CAAAA,IAAnB,CAAwBC,CAAWnI,CAAAA,KAAnC,CAAA,CACI,MADJ,CAEI,IANV,CAAwB,KASb4D,oBAAa,CACxBJ,CADwB,CAGxBF,CAHwB,CAIxBH,CAJwB,CAKxBC,CAAA,CAAwB,CAAA,CALA,EAOxBD,CAAA,CAASA,CAAT,EAAmBhH,QAASC,CAAAA,aAAT,CAAuB,QAAvB,CACnB,mBAAA,eAAA,cAGMkH,CAAW5E,CAAAA,MACV8E,CAA2B4C,CAAAA,YAAc5C,CAAM9E,CAAAA,KAJtD,eAMM4E,CAAW3E,CAAAA,OACV6E,CAA2B+C,CAAAA,aAAe/C,CAAM7E,CAAAA,MAElDyE,EAAL,IAYI,sBAVME,CAAWkD,CAAAA,gBACX4B,CASN,EAAA,uBAPM9E,CAAWmD,CAAAA,iBACX4B,CAMN,CAHIlF,CAAOzE,CAAAA,KAGX,GAHqB4J,CAGrB,GAFInF,CAAOzE,CAAAA,KAEX,CAFmB4J,CAEnB,EAAInF,CAAOxE,CAAAA,MAAX;AAAsB4J,CAAtB,GACIpF,CAAOxE,CAAAA,MADX,CACoB4J,CADpB,CAZJ,sBAiBsC,CAAEC,MAAO,CAAA,CAAT,EACtCC,EAAQC,CAAAA,qBAAR,CAAgC,CAAA,CAChCD,EAAQE,CAAAA,SAAR,CACInF,CADJ,CAEIoF,CAFJ,CAEiBC,CAFjB,CAE8BT,CAF9B,CAE+CC,CAF/C,CAGI,CAHJ,CAGO,CAHP,CAGUlF,CAAOzE,CAAAA,KAHjB,CAGwByE,CAAOxE,CAAAA,MAH/B,CAKA,OAAO,CAACwE,CAAD,CAASsF,CAAT,EAGU9E,uBAAU,CAC3BX,CAD2B,EAK3B,GAAIA,CAAJ,WAAsC8F,MAAtC,CAEI,MADA,OAAMrN,CAAUsN,CAAAA,eAAV,CAA0B/F,CAA1B,CACCA,CAAAA,CACJ,IAAIA,CAAJ,WAAsCgG,iBAAtC,EACAhG,CADA,WACkCiG,kBADlC,EAEAjG,CAFA,WAEkCkG,gBAFlC,EAGA,iBAHA,EAGqBlH,OAHrB,EAG+BgB,CAH/B,WAGiEmG,gBAHjE,EAIA,aAJA,EAIiBnH,OAJjB,EAI2BgB,CAJ3B,WAI6DoG,YAJ7D,CAKH,MAAOpG,EACJ,IAAIA,CAAJ,WAAsCqG,KAAtC,EAA8CrG,CAA9C,WAAgFsG,KAAhF,EACAtG,CADA,WACkCuG,IADlC,EAC2E,QAD3E,GACyC,MAAOvG,EADhD,CACqF,CACxF;SAEIQ,EAAMgG,CAAAA,GAAN,CADAxG,CAAJ,WAAsCqG,KAAtC,EAA8CrG,CAA9C,WAAgFsG,KAAhF,CACgBC,GAAIE,CAAAA,eAAJ,CAAoBzG,CAApB,CADhB,CAGgBA,CAAuB0G,CAAAA,QAAvB,EAEhB,IAAI,CAEA,MADA,OAAMjO,CAAUsN,CAAAA,eAAV,CAA0BvF,CAA1B,CACCA,CAAAA,CAFP,CAAJ,OAGU,CACN,CAAIR,CAAJ,WAAsCqG,KAAtC,EAA8CrG,CAA9C,WAAgFsG,KAAhF,GACIC,GAAII,CAAAA,eAAJ,CAAoBnG,CAAMgG,CAAAA,GAA1B,CAFE,CAV8E,CADrF,IAiBH,MAAM,yBAAN,EAIaT,4BAAe,CAACvF,CAAD,EAC5BA,CAAMoG,CAAAA,QAAV,EAA6C,CAA7C,GAAsBpG,CAAMqG,CAAAA,YAA5B,EACA,MAAM,IAAInH,OAAJ,CAAkB,CAACC,CAAD,CAAUwB,CAAV,CAAA,GACpB,UACIX,CAAM5B,CAAAA,mBAAN,CAA0B,MAA1B,CAAkCkI,CAAlC,CACAtG,EAAM5B,CAAAA,mBAAN,CAA0B,OAA1B,CAAmCkI,CAAnC,CACIvF,EAAJ,WAAqBwF,WAArB,CACI5F,CAAA,CAAO,kBAAP,CADJ,CAGIxB,CAAA,GAGRa,EAAMxE,CAAAA,gBAAN,CAAuB,MAAvB,CAA+B8K,CAA/B,CACAtG,EAAMxE,CAAAA,gBAAN,CAAuB,OAAvB;AAAgC8K,CAAhC,EAXE,EAeWhI,+BAAkB,CACnCkI,CADmC,CAEnC/F,CAFmC,CAGnCC,CAHmC,WAM7BhB,EAAN,WAA0BW,OAA1B,EACAX,CAASc,CAAAA,WAAT,CAAqB,CAAEC,KAAAA,CAAF,CAAQC,KAAAA,CAAR,CAArB,GAh1BYzI,qBAAA,CAAsB,GACtBA,mBAAA,CAAmB,kBAC5BA,cAAA,CAAc;"}