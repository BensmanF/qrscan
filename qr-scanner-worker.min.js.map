{"version":3,"sources":["prefix.js","version.js","detector.js","alignpat.js","findpat.js","formatinf.js","errorlevel.js","bitmat.js","datablock.js","gf256poly.js","gf256.js","qrcode.js","worker.js","binarizer.js","grid.js","datamask.js","decoder.js","rsdecoder.js","bmparser.js","databr.js"],"names":["ECB","count","dataCodewords","this","__defineGetter__","ECBlocks","ecCodewordsPerBlock","ecBlocks1","ecBlocks2","ecBlocks","Array","NumBlocks","total","i","length","getECBlocks","Version","versionNumber","alignmentPatternCenters","ecBlocks3","ecBlocks4","ecCodewords","ECCodewordsPerBlock","ecbArray","ecBlock","Count","DataCodewords","totalCodewords","buildFunctionPattern","dimension","DimensionForVersion","bitMatrix","BitMatrix","setRegion","max","x","y","getECBlocksForLevel","ecLevel","ordinal","PerspectiveTransform","a11","a21","a31","a12","a22","a32","a13","a23","a33","transformPoints1","points","denominator","transformPoints2","xValues","yValues","n","buildAdjoint","times","other","Detector","image","resultPointCallback","sizeOfBlackWhiteBlackRun","fromX","fromY","toX","toY","steep","Math","abs","temp","dx","dy","error","ystep","xstep","state","realX","realY","qrcode","width","diffX","diffY","sqrt","diffX2","diffY2","sizeOfBlackWhiteBlackRunBothWays","result","scale","otherToX","otherToY","floor","height","calculateModuleSizeOneWay","pattern","otherPattern","moduleSizeEst1","X","Y","moduleSizeEst2","isNaN","calculateModuleSize","topLeft","topRight","bottomLeft","distance","pattern1","pattern2","xDiff","yDiff","computeDimension","moduleSize","round","Error","findAlignmentInRegion","overallEstModuleSize","estAlignmentX","estAlignmentY","allowanceFactor","allowance","alignmentAreaLeftX","alignmentAreaRightX","min","alignmentAreaTopY","alignmentAreaBottomY","startX","startY","possibleCenters","crossCheckStateCount","centerFromEnd","stateCount","end","foundPatternCross","maxVariance","crossCheckVertical","startI","centerJ","maxCount","originalStateCountTotal","maxI","NaN","stateCountTotal","handlePossibleCenter","j","centerI","estimatedModuleSize","index","aboutEquals","AlignmentPattern","point","push","foundPossibleResultPoint","find","maxJ","middleI","iGen","currentState","confirmed","createTransform","alignmentPattern","bottomRightX","bottomRightY","sourceBottomRightX","sourceBottomRightY","dimMinusThree","quadrilateralToQuadrilateral","sampleGrid","transform","GridSampler","sampleGrid3","processFinderPatternInfo","info","TopLeft","TopRight","BottomLeft","provisionalVersion","getProvisionalVersionForDimension","modulesBetweenFPCenters","AlignmentPatternCenters","correctionToTopLeft","bits","detect","hasSkipped","totalModuleSize","INTEGER_MATH_SHIFT","CrossCheckStateCount","crossCheckHorizontal","startJ","found","center","incrementCount","posX","posY","moduleSizeDiff","selectBestPatterns","startSize","square","centerValue","EstimatedModuleSize","average","sort","center1","center2","dA","dB","stdDev","limit","splice","a","b","findRowSkip","firstConfirmedCenter","CENTER_QUORUM","haveMultiplyConfirmedCenters","confirmedCount","totalDeviation","findFinderPattern","iSkip","MAX_MODULES","MIN_SKIP","done","rowSkip","patternInfo","orderBestPatterns","patternCenters","FormatInformation","formatInfo","errorCorrectionLevel","ErrorCorrectionLevel","forBits","dataMask","GetHashCode","Equals","o","name","ordinal_Renamed_Field","rowSize","get_Renamed","offset","URShift","set_Renamed","flip","clear","left","top","right","bottom","DataBlock","numDataCodewords","codewords","GF256Poly","field","coefficients","coefficientsLength","firstNonZero","Zero","ci","getCoefficient","degree","evaluateAt","size","GF256","addOrSubtract","result2","multiply","smallerCoefficients","largerCoefficients","sumDiff","lengthDiff","multiply1","aCoefficients","aLength","bCoefficients","bLength","product","aCoeff","multiply2","scalar","multiplyByMonomial","coefficient","divide","quotient","remainder","denominatorLeadingTerm","Degree","inverseDenominatorLeadingTerm","inverse","degreeDifference","term","iterationQuotient","buildMonomial","primitive","expTable","logTable","at0","zero","at1","one","exp","log","number","self","onmessage","event","type","data","debug","decode","e","message","startsWith","postMessage","Binarizer","imageWidth","imageHeight","_Binarizer$_calculate","_calculateBlockSize","_Binarizer$_calculate2","_slicedToArray","blockSize","TARGET_BLOCK_COUNT_ALONG_SHORTER_SIDE","MIN_BLOCK_SIZE","ceil","inputGrayscale","outputBinary","arguments","undefined","buffer","_Binarizer$_calculate3","_Binarizer$_calculate4","blockCountX","blockCountY","blockThresholds","Uint8ClampedArray","byteLength","blockIndexY","blockIndexX","threshold","_calculateBlockThreshold","sum","neighborIndexX","_applyThresholdToBlock","rowStart","pixel","MIN_DYNAMIC_RANGE","myIndex","neighbourAverage","checkAndNudgePoints","nudged","iValue","aioobe","sampleGridx","p1ToX","p1ToY","p2ToX","p2ToY","p3ToX","p3ToY","p4ToX","p4ToY","p1FromX","p1FromY","p2FromX","p2FromY","p3FromX","p3FromY","p4FromX","p4FromY","VERSION_DECODE_INFO","VERSIONS","getVersionForNumber","iae","decodeVersionInformation","versionBits","bestDifference","bestVersion","targetVersion","bitsDifference","numBitsDiffering","x0","y0","x1","y1","x2","y2","x3","y3","x0p","y0p","x1p","y1p","x2p","y2p","x3p","y3p","qToS","quadrilateralToSquare","squareToQuadrilateral","dy2","dy3","dx1","dx2","dx3","dy1","FORMAT_INFO_DECODE_LOOKUP","BITS_SET_IN_HALF_BYTE","decodeFormatInformation","maskedFormatInfo","doDecodeFormatInformation","bestFormatInfo","decodeInfo","targetInfo","FOR_BITS","L","M","Q","H","getDataBlocks","rawCodewords","version","TotalCodewords","totalBlocks","ecBlockArray","numResultBlocks","numBlockCodewords","shorterBlocksTotalCodewords","longerBlocksStartAt","shorterBlocksNumDataCodewords","rawCodewordsOffset","iOffset","DataMask","forReference","reference","DATA_MASKS","unmaskBitMatrix","isMasked","QR_CODE_FIELD","DATA_MATRIX_FIELD","Decoder","rsDecoder","received","twoS","poly","syndromeCoefficients","noError","evalu","syndrome","sigmaOmega","runEuclideanAlgorithm","sigma","omega","errorLocations","findErrorLocations","errorMagnitudes","findErrorMagnitudes","position","R","rLast","r","sLast","One","s","tLast","t","rLastLast","sLastLast","tLastLast","q","dltInverse","degreeDiff","sigmaTildeAtZero","errorLocator","numErrors","errorEvaluator","dataMatrix","xiInverse","correctErrors","codewordBytes","numCodewords","codewordsInts","numECCodewords","rse","parser","Dimension","parsedVersion","parsedFormatInfo","copyBit","readFormatInformation","formatInfoBits","iMin","readVersion","ijMin","readCodewords","functionPattern","readingUp","resultOffset","currentByte","bitsRead","col","dataBlocks","totalBytes","NumDataCodewords","resultBytes","dataBlock","Codewords","blocks","numErrorCorrectionCode","blockPointer","bitPointer","dataLength","dataLengthMode","getNextBits","numBits","mask","mask1","mask3","bitsFirstBlock","bitsSecondBlock","NextMode","getDataLength","modeIndicator","sizeOfDataLengthInfo","getRomanAndFigureString","intData","strData","tableRomanAndFigure","secondLetter","getFigureString","get8bitByteArray","output","getKanjiString","unicodeString","tempWord","shiftjisWord","String","fromCharCode","parseECIValue","firstByte","mode","temp_sbyteArray3","temp_str","ta","charCodeAt","VersionNumber","Bits","imagedata","qrCodeSymbol","maxImgSize","callback","imageData","process","isUrl","URL","decode_url","escaped","escape","console","ret","decodeURIComponent","decode_utf8","inputRgba","grayscaleImage","binaryImage","binarizerBufferSize","calculateRequiredBufferSize","binarizerBuffer","grayscale","binarize","debugImage","ImageData","qRCodeMatrix","Height","Width","isSet","sendDebugImage","DataByte","str","out_grayscale","rgbaIndex","patterns","pointA","pointB","pointC","zeroOneDistance","oneTwoDistance","zeroTwoDistance","bX","bY","crossProductZ"],"mappings":"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","file":"qr-scanner-worker.min.js","sourcesContent":["(function() {","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\n\r\nfunction ECB(count,  dataCodewords)\r\n{\r\n\tthis.count = count;\r\n\tthis.dataCodewords = dataCodewords;\r\n\t\r\n\tthis.__defineGetter__(\"Count\", function()\r\n\t{\r\n\t\treturn this.count;\r\n\t});\r\n\tthis.__defineGetter__(\"DataCodewords\", function()\r\n\t{\r\n\t\treturn this.dataCodewords;\r\n\t});\r\n}\r\n\r\nfunction ECBlocks( ecCodewordsPerBlock,  ecBlocks1,  ecBlocks2)\r\n{\r\n\tthis.ecCodewordsPerBlock = ecCodewordsPerBlock;\r\n\tif(ecBlocks2)\r\n\t\tthis.ecBlocks = new Array(ecBlocks1, ecBlocks2);\r\n\telse\r\n\t\tthis.ecBlocks = new Array(ecBlocks1);\r\n\t\r\n\tthis.__defineGetter__(\"ECCodewordsPerBlock\", function()\r\n\t{\r\n\t\treturn this.ecCodewordsPerBlock;\r\n\t});\r\n\t\r\n\tthis.__defineGetter__(\"TotalECCodewords\", function()\r\n\t{\r\n\t\treturn  this.ecCodewordsPerBlock * this.NumBlocks;\r\n\t});\r\n\t\r\n\tthis.__defineGetter__(\"NumBlocks\", function()\r\n\t{\r\n\t\tvar total = 0;\r\n\t\tfor (var i = 0; i < this.ecBlocks.length; i++)\r\n\t\t{\r\n\t\t\ttotal += this.ecBlocks[i].length;\r\n\t\t}\r\n\t\treturn total;\r\n\t});\r\n\t\r\n\tthis.getECBlocks=function()\r\n\t\t\t{\r\n\t\t\t\treturn this.ecBlocks;\r\n\t\t\t}\r\n}\r\n\r\nfunction Version( versionNumber,  alignmentPatternCenters,  ecBlocks1,  ecBlocks2,  ecBlocks3,  ecBlocks4)\r\n{\r\n\tthis.versionNumber = versionNumber;\r\n\tthis.alignmentPatternCenters = alignmentPatternCenters;\r\n\tthis.ecBlocks = new Array(ecBlocks1, ecBlocks2, ecBlocks3, ecBlocks4);\r\n\t\r\n\tvar total = 0;\r\n\tvar ecCodewords = ecBlocks1.ECCodewordsPerBlock;\r\n\tvar ecbArray = ecBlocks1.getECBlocks();\r\n\tfor (var i = 0; i < ecbArray.length; i++)\r\n\t{\r\n\t\tvar ecBlock = ecbArray[i];\r\n\t\ttotal += ecBlock.Count * (ecBlock.DataCodewords + ecCodewords);\r\n\t}\r\n\tthis.totalCodewords = total;\r\n\t\r\n\tthis.__defineGetter__(\"VersionNumber\", function()\r\n\t{\r\n\t\treturn  this.versionNumber;\r\n\t});\r\n\t\r\n\tthis.__defineGetter__(\"AlignmentPatternCenters\", function()\r\n\t{\r\n\t\treturn  this.alignmentPatternCenters;\r\n\t});\r\n\tthis.__defineGetter__(\"TotalCodewords\", function()\r\n\t{\r\n\t\treturn  this.totalCodewords;\r\n\t});\r\n\tthis.__defineGetter__(\"DimensionForVersion\", function()\r\n\t{\r\n\t\treturn  17 + 4 * this.versionNumber;\r\n\t});\r\n\t\r\n\tthis.buildFunctionPattern=function()\r\n\t\t{\r\n\t\t\tvar dimension = this.DimensionForVersion;\r\n\t\t\tvar bitMatrix = new BitMatrix(dimension);\r\n\t\t\t\r\n\t\t\t// Top left finder pattern + separator + format\r\n\t\t\tbitMatrix.setRegion(0, 0, 9, 9);\r\n\t\t\t// Top right finder pattern + separator + format\r\n\t\t\tbitMatrix.setRegion(dimension - 8, 0, 8, 9);\r\n\t\t\t// Bottom left finder pattern + separator + format\r\n\t\t\tbitMatrix.setRegion(0, dimension - 8, 9, 8);\r\n\t\t\t\r\n\t\t\t// Alignment patterns\r\n\t\t\tvar max = this.alignmentPatternCenters.length;\r\n\t\t\tfor (var x = 0; x < max; x++)\r\n\t\t\t{\r\n\t\t\t\tvar i = this.alignmentPatternCenters[x] - 2;\r\n\t\t\t\tfor (var y = 0; y < max; y++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// No alignment patterns near the three finder paterns\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbitMatrix.setRegion(this.alignmentPatternCenters[y] - 2, i, 5, 5);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Vertical timing pattern\r\n\t\t\tbitMatrix.setRegion(6, 9, 1, dimension - 17);\r\n\t\t\t// Horizontal timing pattern\r\n\t\t\tbitMatrix.setRegion(9, 6, dimension - 17, 1);\r\n\t\t\t\r\n\t\t\tif (this.versionNumber > 6)\r\n\t\t\t{\r\n\t\t\t\t// Version info, top right\r\n\t\t\t\tbitMatrix.setRegion(dimension - 11, 0, 3, 6);\r\n\t\t\t\t// Version info, bottom left\r\n\t\t\t\tbitMatrix.setRegion(0, dimension - 11, 6, 3);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn bitMatrix;\r\n\t\t}\r\n\tthis.getECBlocksForLevel=function( ecLevel)\r\n\t{\r\n\t\treturn this.ecBlocks[ecLevel.ordinal()];\r\n\t}\r\n}\r\n\r\nVersion.VERSION_DECODE_INFO = new Array(0x07C94, 0x085BC, 0x09A99, 0x0A4D3, 0x0BBF6, 0x0C762, 0x0D847, 0x0E60D, 0x0F928, 0x10B78, 0x1145D, 0x12A17, 0x13532, 0x149A6, 0x15683, 0x168C9, 0x177EC, 0x18EC4, 0x191E1, 0x1AFAB, 0x1B08E, 0x1CC1A, 0x1D33F, 0x1ED75, 0x1F250, 0x209D5, 0x216F0, 0x228BA, 0x2379F, 0x24B0B, 0x2542E, 0x26A64, 0x27541, 0x28C69);\r\n\r\nVersion.VERSIONS = buildVersions();\r\n\r\nVersion.getVersionForNumber=function( versionNumber)\r\n{\r\n\tif (versionNumber < 1 || versionNumber > 40)\r\n\t{\r\n\t\tthrow new Error(\"QR Error: ArgumentException\");\r\n\t}\r\n\treturn Version.VERSIONS[versionNumber - 1];\r\n}\r\n\r\nVersion.getProvisionalVersionForDimension=function(dimension)\r\n{\r\n\tif (dimension % 4 != 1)\r\n\t{\r\n\t\tthrow new Error(\"QR Error: Error getProvisionalVersionForDimension\");\r\n\t}\r\n\ttry\r\n\t{\r\n\t\treturn Version.getVersionForNumber((dimension - 17) >> 2);\r\n\t}\r\n\tcatch ( iae)\r\n\t{\r\n\t\tthrow new Error(\"QR Error: Error getVersionForNumber\");\r\n\t}\r\n}\r\n\r\nVersion.decodeVersionInformation=function( versionBits)\r\n{\r\n\tvar bestDifference = 0xffffffff;\r\n\tvar bestVersion = 0;\r\n\tfor (var i = 0; i < Version.VERSION_DECODE_INFO.length; i++)\r\n\t{\r\n\t\tvar targetVersion = Version.VERSION_DECODE_INFO[i];\r\n\t\t// Do the version info bits match exactly? done.\r\n\t\tif (targetVersion == versionBits)\r\n\t\t{\r\n\t\t\treturn this.getVersionForNumber(i + 7);\r\n\t\t}\r\n\t\t// Otherwise see if this is the closest to a real version info bit string\r\n\t\t// we have seen so far\r\n\t\tvar bitsDifference = FormatInformation.numBitsDiffering(versionBits, targetVersion);\r\n\t\tif (bitsDifference < bestDifference)\r\n\t\t{\r\n\t\t\tbestVersion = i + 7;\r\n\t\t\tbestDifference = bitsDifference;\r\n\t\t}\r\n\t}\r\n\t// We can tolerate up to 3 bits of error since no two version info codewords will\r\n\t// differ in less than 4 bits.\r\n\tif (bestDifference <= 3)\r\n\t{\r\n\t\treturn this.getVersionForNumber(bestVersion);\r\n\t}\r\n\t// If we didn't find a close enough match, fail\r\n\treturn null;\r\n}\r\n\r\nfunction buildVersions()\r\n{\r\n\treturn new Array(new Version(1, new Array(), new ECBlocks(7, new ECB(1, 19)), new ECBlocks(10, new ECB(1, 16)), new ECBlocks(13, new ECB(1, 13)), new ECBlocks(17, new ECB(1, 9))), \r\n\tnew Version(2, new Array(6, 18), new ECBlocks(10, new ECB(1, 34)), new ECBlocks(16, new ECB(1, 28)), new ECBlocks(22, new ECB(1, 22)), new ECBlocks(28, new ECB(1, 16))), \r\n\tnew Version(3, new Array(6, 22), new ECBlocks(15, new ECB(1, 55)), new ECBlocks(26, new ECB(1, 44)), new ECBlocks(18, new ECB(2, 17)), new ECBlocks(22, new ECB(2, 13))), \r\n\tnew Version(4, new Array(6, 26), new ECBlocks(20, new ECB(1, 80)), new ECBlocks(18, new ECB(2, 32)), new ECBlocks(26, new ECB(2, 24)), new ECBlocks(16, new ECB(4, 9))), \r\n\tnew Version(5, new Array(6, 30), new ECBlocks(26, new ECB(1, 108)), new ECBlocks(24, new ECB(2, 43)), new ECBlocks(18, new ECB(2, 15), new ECB(2, 16)), new ECBlocks(22, new ECB(2, 11), new ECB(2, 12))), \r\n\tnew Version(6, new Array(6, 34), new ECBlocks(18, new ECB(2, 68)), new ECBlocks(16, new ECB(4, 27)), new ECBlocks(24, new ECB(4, 19)), new ECBlocks(28, new ECB(4, 15))), \r\n\tnew Version(7, new Array(6, 22, 38), new ECBlocks(20, new ECB(2, 78)), new ECBlocks(18, new ECB(4, 31)), new ECBlocks(18, new ECB(2, 14), new ECB(4, 15)), new ECBlocks(26, new ECB(4, 13), new ECB(1, 14))), \r\n\tnew Version(8, new Array(6, 24, 42), new ECBlocks(24, new ECB(2, 97)), new ECBlocks(22, new ECB(2, 38), new ECB(2, 39)), new ECBlocks(22, new ECB(4, 18), new ECB(2, 19)), new ECBlocks(26, new ECB(4, 14), new ECB(2, 15))), \r\n\tnew Version(9, new Array(6, 26, 46), new ECBlocks(30, new ECB(2, 116)), new ECBlocks(22, new ECB(3, 36), new ECB(2, 37)), new ECBlocks(20, new ECB(4, 16), new ECB(4, 17)), new ECBlocks(24, new ECB(4, 12), new ECB(4, 13))), \r\n\tnew Version(10, new Array(6, 28, 50), new ECBlocks(18, new ECB(2, 68), new ECB(2, 69)), new ECBlocks(26, new ECB(4, 43), new ECB(1, 44)), new ECBlocks(24, new ECB(6, 19), new ECB(2, 20)), new ECBlocks(28, new ECB(6, 15), new ECB(2, 16))), \r\n\tnew Version(11, new Array(6, 30, 54), new ECBlocks(20, new ECB(4, 81)), new ECBlocks(30, new ECB(1, 50), new ECB(4, 51)), new ECBlocks(28, new ECB(4, 22), new ECB(4, 23)), new ECBlocks(24, new ECB(3, 12), new ECB(8, 13))), \r\n\tnew Version(12, new Array(6, 32, 58), new ECBlocks(24, new ECB(2, 92), new ECB(2, 93)), new ECBlocks(22, new ECB(6, 36), new ECB(2, 37)), new ECBlocks(26, new ECB(4, 20), new ECB(6, 21)), new ECBlocks(28, new ECB(7, 14), new ECB(4, 15))), \r\n\tnew Version(13, new Array(6, 34, 62), new ECBlocks(26, new ECB(4, 107)), new ECBlocks(22, new ECB(8, 37), new ECB(1, 38)), new ECBlocks(24, new ECB(8, 20), new ECB(4, 21)), new ECBlocks(22, new ECB(12, 11), new ECB(4, 12))), \r\n\tnew Version(14, new Array(6, 26, 46, 66), new ECBlocks(30, new ECB(3, 115), new ECB(1, 116)), new ECBlocks(24, new ECB(4, 40), new ECB(5, 41)), new ECBlocks(20, new ECB(11, 16), new ECB(5, 17)), new ECBlocks(24, new ECB(11, 12), new ECB(5, 13))), \r\n\tnew Version(15, new Array(6, 26, 48, 70), new ECBlocks(22, new ECB(5, 87), new ECB(1, 88)), new ECBlocks(24, new ECB(5, 41), new ECB(5, 42)), new ECBlocks(30, new ECB(5, 24), new ECB(7, 25)), new ECBlocks(24, new ECB(11, 12), new ECB(7, 13))), \r\n\tnew Version(16, new Array(6, 26, 50, 74), new ECBlocks(24, new ECB(5, 98), new ECB(1, 99)), new ECBlocks(28, new ECB(7, 45), new ECB(3, 46)), new ECBlocks(24, new ECB(15, 19), new ECB(2, 20)), new ECBlocks(30, new ECB(3, 15), new ECB(13, 16))), \r\n\tnew Version(17, new Array(6, 30, 54, 78), new ECBlocks(28, new ECB(1, 107), new ECB(5, 108)), new ECBlocks(28, new ECB(10, 46), new ECB(1, 47)), new ECBlocks(28, new ECB(1, 22), new ECB(15, 23)), new ECBlocks(28, new ECB(2, 14), new ECB(17, 15))), \r\n\tnew Version(18, new Array(6, 30, 56, 82), new ECBlocks(30, new ECB(5, 120), new ECB(1, 121)), new ECBlocks(26, new ECB(9, 43), new ECB(4, 44)), new ECBlocks(28, new ECB(17, 22), new ECB(1, 23)), new ECBlocks(28, new ECB(2, 14), new ECB(19, 15))), \r\n\tnew Version(19, new Array(6, 30, 58, 86), new ECBlocks(28, new ECB(3, 113), new ECB(4, 114)), new ECBlocks(26, new ECB(3, 44), new ECB(11, 45)), new ECBlocks(26, new ECB(17, 21), new ECB(4, 22)), new ECBlocks(26, new ECB(9, 13), new ECB(16, 14))), \r\n\tnew Version(20, new Array(6, 34, 62, 90), new ECBlocks(28, new ECB(3, 107), new ECB(5, 108)), new ECBlocks(26, new ECB(3, 41), new ECB(13, 42)), new ECBlocks(30, new ECB(15, 24), new ECB(5, 25)), new ECBlocks(28, new ECB(15, 15), new ECB(10, 16))), \r\n\tnew Version(21, new Array(6, 28, 50, 72, 94), new ECBlocks(28, new ECB(4, 116), new ECB(4, 117)), new ECBlocks(26, new ECB(17, 42)), new ECBlocks(28, new ECB(17, 22), new ECB(6, 23)), new ECBlocks(30, new ECB(19, 16), new ECB(6, 17))), \r\n\tnew Version(22, new Array(6, 26, 50, 74, 98), new ECBlocks(28, new ECB(2, 111), new ECB(7, 112)), new ECBlocks(28, new ECB(17, 46)), new ECBlocks(30, new ECB(7, 24), new ECB(16, 25)), new ECBlocks(24, new ECB(34, 13))), \r\n\tnew Version(23, new Array(6, 30, 54, 74, 102), new ECBlocks(30, new ECB(4, 121), new ECB(5, 122)), new ECBlocks(28, new ECB(4, 47), new ECB(14, 48)), new ECBlocks(30, new ECB(11, 24), new ECB(14, 25)), new ECBlocks(30, new ECB(16, 15), new ECB(14, 16))), \r\n\tnew Version(24, new Array(6, 28, 54, 80, 106), new ECBlocks(30, new ECB(6, 117), new ECB(4, 118)), new ECBlocks(28, new ECB(6, 45), new ECB(14, 46)), new ECBlocks(30, new ECB(11, 24), new ECB(16, 25)), new ECBlocks(30, new ECB(30, 16), new ECB(2, 17))), \r\n\tnew Version(25, new Array(6, 32, 58, 84, 110), new ECBlocks(26, new ECB(8, 106), new ECB(4, 107)), new ECBlocks(28, new ECB(8, 47), new ECB(13, 48)), new ECBlocks(30, new ECB(7, 24), new ECB(22, 25)), new ECBlocks(30, new ECB(22, 15), new ECB(13, 16))), \r\n\tnew Version(26, new Array(6, 30, 58, 86, 114), new ECBlocks(28, new ECB(10, 114), new ECB(2, 115)), new ECBlocks(28, new ECB(19, 46), new ECB(4, 47)), new ECBlocks(28, new ECB(28, 22), new ECB(6, 23)), new ECBlocks(30, new ECB(33, 16), new ECB(4, 17))), \r\n\tnew Version(27, new Array(6, 34, 62, 90, 118), new ECBlocks(30, new ECB(8, 122), new ECB(4, 123)), new ECBlocks(28, new ECB(22, 45), new ECB(3, 46)), new ECBlocks(30, new ECB(8, 23), new ECB(26, 24)), new ECBlocks(30, new ECB(12, 15), \t\tnew ECB(28, 16))),\r\n\tnew Version(28, new Array(6, 26, 50, 74, 98, 122), new ECBlocks(30, new ECB(3, 117), new ECB(10, 118)), new ECBlocks(28, new ECB(3, 45), new ECB(23, 46)), new ECBlocks(30, new ECB(4, 24), new ECB(31, 25)), new ECBlocks(30, new ECB(11, 15), new ECB(31, 16))), \r\n\tnew Version(29, new Array(6, 30, 54, 78, 102, 126), new ECBlocks(30, new ECB(7, 116), new ECB(7, 117)), new ECBlocks(28, new ECB(21, 45), new ECB(7, 46)), new ECBlocks(30, new ECB(1, 23), new ECB(37, 24)), new ECBlocks(30, new ECB(19, 15), new ECB(26, 16))), \r\n\tnew Version(30, new Array(6, 26, 52, 78, 104, 130), new ECBlocks(30, new ECB(5, 115), new ECB(10, 116)), new ECBlocks(28, new ECB(19, 47), new ECB(10, 48)), new ECBlocks(30, new ECB(15, 24), new ECB(25, 25)), new ECBlocks(30, new ECB(23, 15), new ECB(25, 16))), \r\n\tnew Version(31, new Array(6, 30, 56, 82, 108, 134), new ECBlocks(30, new ECB(13, 115), new ECB(3, 116)), new ECBlocks(28, new ECB(2, 46), new ECB(29, 47)), new ECBlocks(30, new ECB(42, 24), new ECB(1, 25)), new ECBlocks(30, new ECB(23, 15), new ECB(28, 16))), \r\n\tnew Version(32, new Array(6, 34, 60, 86, 112, 138), new ECBlocks(30, new ECB(17, 115)), new ECBlocks(28, new ECB(10, 46), new ECB(23, 47)), new ECBlocks(30, new ECB(10, 24), new ECB(35, 25)), new ECBlocks(30, new ECB(19, 15), new ECB(35, 16))), \r\n\tnew Version(33, new Array(6, 30, 58, 86, 114, 142), new ECBlocks(30, new ECB(17, 115), new ECB(1, 116)), new ECBlocks(28, new ECB(14, 46), new ECB(21, 47)), new ECBlocks(30, new ECB(29, 24), new ECB(19, 25)), new ECBlocks(30, new ECB(11, 15), new ECB(46, 16))), \r\n\tnew Version(34, new Array(6, 34, 62, 90, 118, 146), new ECBlocks(30, new ECB(13, 115), new ECB(6, 116)), new ECBlocks(28, new ECB(14, 46), new ECB(23, 47)), new ECBlocks(30, new ECB(44, 24), new ECB(7, 25)), new ECBlocks(30, new ECB(59, 16), new ECB(1, 17))), \r\n\tnew Version(35, new Array(6, 30, 54, 78, 102, 126, 150), new ECBlocks(30, new ECB(12, 121), new ECB(7, 122)), new ECBlocks(28, new ECB(12, 47), new ECB(26, 48)), new ECBlocks(30, new ECB(39, 24), new ECB(14, 25)),new ECBlocks(30, new ECB(22, 15), new ECB(41, 16))), \r\n\tnew Version(36, new Array(6, 24, 50, 76, 102, 128, 154), new ECBlocks(30, new ECB(6, 121), new ECB(14, 122)), new ECBlocks(28, new ECB(6, 47), new ECB(34, 48)), new ECBlocks(30, new ECB(46, 24), new ECB(10, 25)), new ECBlocks(30, new ECB(2, 15), new ECB(64, 16))), \r\n\tnew Version(37, new Array(6, 28, 54, 80, 106, 132, 158), new ECBlocks(30, new ECB(17, 122), new ECB(4, 123)), new ECBlocks(28, new ECB(29, 46), new ECB(14, 47)), new ECBlocks(30, new ECB(49, 24), new ECB(10, 25)), new ECBlocks(30, new ECB(24, 15), new ECB(46, 16))), \r\n\tnew Version(38, new Array(6, 32, 58, 84, 110, 136, 162), new ECBlocks(30, new ECB(4, 122), new ECB(18, 123)), new ECBlocks(28, new ECB(13, 46), new ECB(32, 47)), new ECBlocks(30, new ECB(48, 24), new ECB(14, 25)), new ECBlocks(30, new ECB(42, 15), new ECB(32, 16))), \r\n\tnew Version(39, new Array(6, 26, 54, 82, 110, 138, 166), new ECBlocks(30, new ECB(20, 117), new ECB(4, 118)), new ECBlocks(28, new ECB(40, 47), new ECB(7, 48)), new ECBlocks(30, new ECB(43, 24), new ECB(22, 25)), new ECBlocks(30, new ECB(10, 15), new ECB(67, 16))), \r\n\tnew Version(40, new Array(6, 30, 58, 86, 114, 142, 170), new ECBlocks(30, new ECB(19, 118), new ECB(6, 119)), new ECBlocks(28, new ECB(18, 47), new ECB(31, 48)), new ECBlocks(30, new ECB(34, 24), new ECB(34, 25)), new ECBlocks(30, new ECB(20, 15), new ECB(61, 16))));\r\n}","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction PerspectiveTransform( a11,  a21,  a31,  a12,  a22,  a32,  a13,  a23,  a33)\r\n{\r\n\tthis.a11 = a11;\r\n\tthis.a12 = a12;\r\n\tthis.a13 = a13;\r\n\tthis.a21 = a21;\r\n\tthis.a22 = a22;\r\n\tthis.a23 = a23;\r\n\tthis.a31 = a31;\r\n\tthis.a32 = a32;\r\n\tthis.a33 = a33;\r\n\tthis.transformPoints1=function( points)\r\n\t\t{\r\n\t\t\tvar max = points.length;\r\n\t\t\tvar a11 = this.a11;\r\n\t\t\tvar a12 = this.a12;\r\n\t\t\tvar a13 = this.a13;\r\n\t\t\tvar a21 = this.a21;\r\n\t\t\tvar a22 = this.a22;\r\n\t\t\tvar a23 = this.a23;\r\n\t\t\tvar a31 = this.a31;\r\n\t\t\tvar a32 = this.a32;\r\n\t\t\tvar a33 = this.a33;\r\n\t\t\tfor (var i = 0; i < max; i += 2)\r\n\t\t\t{\r\n\t\t\t\tvar x = points[i];\r\n\t\t\t\tvar y = points[i + 1];\r\n\t\t\t\tvar denominator = a13 * x + a23 * y + a33;\r\n\t\t\t\tpoints[i] = (a11 * x + a21 * y + a31) / denominator;\r\n\t\t\t\tpoints[i + 1] = (a12 * x + a22 * y + a32) / denominator;\r\n\t\t\t}\r\n\t\t}\r\n\tthis. transformPoints2=function(xValues, yValues)\r\n\t\t{\r\n\t\t\tvar n = xValues.length;\r\n\t\t\tfor (var i = 0; i < n; i++)\r\n\t\t\t{\r\n\t\t\t\tvar x = xValues[i];\r\n\t\t\t\tvar y = yValues[i];\r\n\t\t\t\tvar denominator = this.a13 * x + this.a23 * y + this.a33;\r\n\t\t\t\txValues[i] = (this.a11 * x + this.a21 * y + this.a31) / denominator;\r\n\t\t\t\tyValues[i] = (this.a12 * x + this.a22 * y + this.a32) / denominator;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tthis.buildAdjoint=function()\r\n\t\t{\r\n\t\t\t// Adjoint is the transpose of the cofactor matrix:\r\n\t\t\treturn new PerspectiveTransform(this.a22 * this.a33 - this.a23 * this.a32, this.a23 * this.a31 - this.a21 * this.a33, this.a21 * this.a32 - this.a22 * this.a31, this.a13 * this.a32 - this.a12 * this.a33, this.a11 * this.a33 - this.a13 * this.a31, this.a12 * this.a31 - this.a11 * this.a32, this.a12 * this.a23 - this.a13 * this.a22, this.a13 * this.a21 - this.a11 * this.a23, this.a11 * this.a22 - this.a12 * this.a21);\r\n\t\t}\r\n\tthis.times=function( other)\r\n\t\t{\r\n\t\t\treturn new PerspectiveTransform(this.a11 * other.a11 + this.a21 * other.a12 + this.a31 * other.a13, this.a11 * other.a21 + this.a21 * other.a22 + this.a31 * other.a23, this.a11 * other.a31 + this.a21 * other.a32 + this.a31 * other.a33, this.a12 * other.a11 + this.a22 * other.a12 + this.a32 * other.a13, this.a12 * other.a21 + this.a22 * other.a22 + this.a32 * other.a23, this.a12 * other.a31 + this.a22 * other.a32 + this.a32 * other.a33, this.a13 * other.a11 + this.a23 * other.a12 +this.a33 * other.a13, this.a13 * other.a21 + this.a23 * other.a22 + this.a33 * other.a23, this.a13 * other.a31 + this.a23 * other.a32 + this.a33 * other.a33);\r\n\t\t}\r\n\r\n}\r\n\r\nPerspectiveTransform.quadrilateralToQuadrilateral=function( x0,  y0,  x1,  y1,  x2,  y2,  x3,  y3,  x0p,  y0p,  x1p,  y1p,  x2p,  y2p,  x3p,  y3p)\r\n{\r\n\t\r\n\tvar qToS = this.quadrilateralToSquare(x0, y0, x1, y1, x2, y2, x3, y3);\r\n\tvar sToQ = this.squareToQuadrilateral(x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p);\r\n\treturn sToQ.times(qToS);\r\n}\r\n\r\nPerspectiveTransform.squareToQuadrilateral=function( x0,  y0,  x1,  y1,  x2,  y2,  x3,  y3)\r\n{\r\n\tvar dy2 = y3 - y2;\r\n\tvar dy3 = y0 - y1 + y2 - y3;\r\n\tif (dy2 == 0.0 && dy3 == 0.0)\r\n\t{\r\n\t\treturn new PerspectiveTransform(x1 - x0, x2 - x1, x0, y1 - y0, y2 - y1, y0, 0.0, 0.0, 1.0);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvar dx1 = x1 - x2;\r\n\t\tvar dx2 = x3 - x2;\r\n\t\tvar dx3 = x0 - x1 + x2 - x3;\r\n\t\tvar dy1 = y1 - y2;\r\n\t\tvar denominator = dx1 * dy2 - dx2 * dy1;\r\n\t\tvar a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\r\n\t\tvar a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\r\n\t\treturn new PerspectiveTransform(x1 - x0 + a13 * x1, x3 - x0 + a23 * x3, x0, y1 - y0 + a13 * y1, y3 - y0 + a23 * y3, y0, a13, a23, 1.0);\r\n\t}\r\n}\r\n\r\nPerspectiveTransform.quadrilateralToSquare=function( x0,  y0,  x1,  y1,  x2,  y2,  x3,  y3)\r\n{\r\n\t// Here, the adjoint serves as the inverse:\r\n\treturn this.squareToQuadrilateral(x0, y0, x1, y1, x2, y2, x3, y3).buildAdjoint();\r\n}\r\n\r\nfunction DetectorResult(bits,  points)\r\n{\r\n\tthis.bits = bits;\r\n\tthis.points = points;\r\n}\r\n\r\n\r\nfunction Detector(image)\r\n{\r\n\tthis.image=image;\r\n\tthis.resultPointCallback = null;\r\n\t\r\n\tthis.sizeOfBlackWhiteBlackRun=function( fromX,  fromY,  toX,  toY)\r\n\t\t{\r\n\t\t\t// Mild variant of Bresenham's algorithm;\r\n\t\t\t// see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\r\n\t\t\tvar steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\r\n\t\t\tif (steep)\r\n\t\t\t{\r\n\t\t\t\tvar temp = fromX;\r\n\t\t\t\tfromX = fromY;\r\n\t\t\t\tfromY = temp;\r\n\t\t\t\ttemp = toX;\r\n\t\t\t\ttoX = toY;\r\n\t\t\t\ttoY = temp;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar dx = Math.abs(toX - fromX);\r\n\t\t\tvar dy = Math.abs(toY - fromY);\r\n\t\t\tvar error = - dx >> 1;\r\n\t\t\tvar ystep = fromY < toY?1:- 1;\r\n\t\t\tvar xstep = fromX < toX?1:- 1;\r\n\t\t\tvar state = 0; // In black pixels, looking for white, first or second time\r\n\t\t\tfor (var x = fromX, y = fromY; x != toX; x += xstep)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tvar realX = steep?y:x;\r\n\t\t\t\tvar realY = steep?x:y;\r\n\t\t\t\tif (state == 1)\r\n\t\t\t\t{\r\n\t\t\t\t\t// In white pixels, looking for black\r\n\t\t\t\t\tif (this.image[realX + realY*qrcode.width])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstate++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!this.image[realX + realY*qrcode.width])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstate++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (state == 3)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Found black, white, black, and stumbled back onto white; done\r\n\t\t\t\t\tvar diffX = x - fromX;\r\n\t\t\t\t\tvar diffY = y - fromY;\r\n\t\t\t\t\treturn  Math.sqrt( (diffX * diffX + diffY * diffY));\r\n\t\t\t\t}\r\n\t\t\t\terror += dy;\r\n\t\t\t\tif (error > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (y == toY)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ty += ystep;\r\n\t\t\t\t\terror -= dx;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar diffX2 = toX - fromX;\r\n\t\t\tvar diffY2 = toY - fromY;\r\n\t\t\treturn  Math.sqrt( (diffX2 * diffX2 + diffY2 * diffY2));\r\n\t\t}\r\n\r\n\t\r\n\tthis.sizeOfBlackWhiteBlackRunBothWays=function( fromX,  fromY,  toX,  toY)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tvar result = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY);\r\n\t\t\t\r\n\t\t\t// Now count other way -- don't run off image though of course\r\n\t\t\tvar scale = 1.0;\r\n\t\t\tvar otherToX = fromX - (toX - fromX);\r\n\t\t\tif (otherToX < 0)\r\n\t\t\t{\r\n\t\t\t\tscale =  fromX /  (fromX - otherToX);\r\n\t\t\t\totherToX = 0;\r\n\t\t\t}\r\n\t\t\telse if (otherToX >= qrcode.width)\r\n\t\t\t{\r\n\t\t\t\tscale =  (qrcode.width - 1 - fromX) /  (otherToX - fromX);\r\n\t\t\t\totherToX = qrcode.width - 1;\r\n\t\t\t}\r\n\t\t\tvar otherToY = Math.floor (fromY - (toY - fromY) * scale);\r\n\t\t\t\r\n\t\t\tscale = 1.0;\r\n\t\t\tif (otherToY < 0)\r\n\t\t\t{\r\n\t\t\t\tscale =  fromY /  (fromY - otherToY);\r\n\t\t\t\totherToY = 0;\r\n\t\t\t}\r\n\t\t\telse if (otherToY >= qrcode.height)\r\n\t\t\t{\r\n\t\t\t\tscale =  (qrcode.height - 1 - fromY) /  (otherToY - fromY);\r\n\t\t\t\totherToY = qrcode.height - 1;\r\n\t\t\t}\r\n\t\t\totherToX = Math.floor (fromX + (otherToX - fromX) * scale);\r\n\t\t\t\r\n\t\t\tresult += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY);\r\n\t\t\treturn result - 1.0; // -1 because we counted the middle pixel twice\r\n\t\t}\r\n\t\t\r\n\r\n\t\r\n\tthis.calculateModuleSizeOneWay=function( pattern,  otherPattern)\r\n\t\t{\r\n\t\t\tvar moduleSizeEst1 = this.sizeOfBlackWhiteBlackRunBothWays(Math.floor( pattern.X), Math.floor( pattern.Y), Math.floor( otherPattern.X), Math.floor(otherPattern.Y));\r\n\t\t\tvar moduleSizeEst2 = this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(otherPattern.X), Math.floor(otherPattern.Y), Math.floor( pattern.X), Math.floor(pattern.Y));\r\n\t\t\tif (isNaN(moduleSizeEst1))\r\n\t\t\t{\r\n\t\t\t\treturn moduleSizeEst2 / 7.0;\r\n\t\t\t}\r\n\t\t\tif (isNaN(moduleSizeEst2))\r\n\t\t\t{\r\n\t\t\t\treturn moduleSizeEst1 / 7.0;\r\n\t\t\t}\r\n\t\t\t// Average them, and divide by 7 since we've counted the width of 3 black modules,\r\n\t\t\t// and 1 white and 1 black module on either side. Ergo, divide sum by 14.\r\n\t\t\treturn (moduleSizeEst1 + moduleSizeEst2) / 14.0;\r\n\t\t}\r\n\r\n\t\r\n\tthis.calculateModuleSize=function( topLeft,  topRight,  bottomLeft)\r\n\t\t{\r\n\t\t\t// Take the average\r\n\t\t\treturn (this.calculateModuleSizeOneWay(topLeft, topRight) + this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2.0;\r\n\t\t}\r\n\r\n\tthis.distance=function( pattern1,  pattern2)\r\n\t{\r\n\t\tvar xDiff = pattern1.X - pattern2.X;\r\n\t\tvar yDiff = pattern1.Y - pattern2.Y;\r\n\t\treturn  Math.sqrt( (xDiff * xDiff + yDiff * yDiff));\r\n\t}\r\n\tthis.computeDimension=function( topLeft,  topRight,  bottomLeft,  moduleSize)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tvar tltrCentersDimension = Math.round(this.distance(topLeft, topRight) / moduleSize);\r\n\t\t\tvar tlblCentersDimension = Math.round(this.distance(topLeft, bottomLeft) / moduleSize);\r\n\t\t\tvar dimension = ((tltrCentersDimension + tlblCentersDimension) >> 1) + 7;\r\n\t\t\tswitch (dimension & 0x03)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\t// mod 4\r\n\t\t\t\tcase 0: \r\n\t\t\t\t\tdimension++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t// 1? do nothing\r\n\t\t\t\t\r\n\t\t\t\tcase 2: \r\n\t\t\t\t\tdimension--;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\tcase 3: \r\n\t\t\t\t\tthrow new Error(\"QR Error: in detector\");\r\n\t\t\t\t}\r\n\t\t\treturn dimension;\r\n\t\t}\r\n\r\n\tthis.findAlignmentInRegion=function( overallEstModuleSize,  estAlignmentX,  estAlignmentY,  allowanceFactor)\r\n\t\t{\r\n\t\t\t// Look for an alignment pattern (3 modules in size) around where it\r\n\t\t\t// should be\r\n\t\t\tvar allowance = Math.floor (allowanceFactor * overallEstModuleSize);\r\n\t\t\tvar alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);\r\n\t\t\tvar alignmentAreaRightX = Math.min(qrcode.width - 1, estAlignmentX + allowance);\r\n\t\t\tif (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: in detector\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);\r\n\t\t\tvar alignmentAreaBottomY = Math.min(qrcode.height - 1, estAlignmentY + allowance);\r\n\t\t\t\r\n\t\t\tvar alignmentFinder = new AlignmentPatternFinder(this.image, alignmentAreaLeftX, alignmentAreaTopY, alignmentAreaRightX - alignmentAreaLeftX, alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize, this.resultPointCallback);\r\n\t\t\treturn alignmentFinder.find();\r\n\t\t}\r\n\t\t\r\n\tthis.createTransform=function( topLeft,  topRight,  bottomLeft, alignmentPattern, dimension)\r\n\t\t{\r\n\t\t\tvar dimMinusThree =  dimension - 3.5;\r\n\t\t\tvar bottomRightX;\r\n\t\t\tvar bottomRightY;\r\n\t\t\tvar sourceBottomRightX;\r\n\t\t\tvar sourceBottomRightY;\r\n\t\t\tif (alignmentPattern != null)\r\n\t\t\t{\r\n\t\t\t\tbottomRightX = alignmentPattern.X;\r\n\t\t\t\tbottomRightY = alignmentPattern.Y;\r\n\t\t\t\tsourceBottomRightX = sourceBottomRightY = dimMinusThree - 3.0;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// Don't have an alignment pattern, just make up the bottom-right point\r\n\t\t\t\tbottomRightX = (topRight.X - topLeft.X) + bottomLeft.X;\r\n\t\t\t\tbottomRightY = (topRight.Y - topLeft.Y) + bottomLeft.Y;\r\n\t\t\t\tsourceBottomRightX = sourceBottomRightY = dimMinusThree;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar transform = PerspectiveTransform.quadrilateralToQuadrilateral(3.5, 3.5, dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5, dimMinusThree, topLeft.X, topLeft.Y, topRight.X, topRight.Y, bottomRightX, bottomRightY, bottomLeft.X, bottomLeft.Y);\r\n\t\t\t\r\n\t\t\treturn transform;\r\n\t\t}\t\t\r\n\t\r\n\tthis.sampleGrid=function( image,  transform,  dimension)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tvar sampler = GridSampler;\r\n\t\t\treturn sampler.sampleGrid3(image, dimension, transform);\r\n\t\t}\r\n\t\r\n\tthis.processFinderPatternInfo = function( info)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tvar topLeft = info.TopLeft;\r\n\t\t\tvar topRight = info.TopRight;\r\n\t\t\tvar bottomLeft = info.BottomLeft;\r\n\t\t\t\r\n\t\t\tvar moduleSize = this.calculateModuleSize(topLeft, topRight, bottomLeft);\r\n\t\t\tif (moduleSize < 1.0)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: in detector\");\r\n\t\t\t}\r\n\t\t\tvar dimension = this.computeDimension(topLeft, topRight, bottomLeft, moduleSize);\r\n\t\t\tvar provisionalVersion = Version.getProvisionalVersionForDimension(dimension);\r\n\t\t\tvar modulesBetweenFPCenters = provisionalVersion.DimensionForVersion - 7;\r\n\t\t\t\r\n\t\t\tvar alignmentPattern = null;\r\n\t\t\t// Anything above version 1 has an alignment pattern\r\n\t\t\tif (provisionalVersion.AlignmentPatternCenters.length > 0)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\t// Guess where a \"bottom right\" finder pattern would have been\r\n\t\t\t\tvar bottomRightX = topRight.X - topLeft.X + bottomLeft.X;\r\n\t\t\t\tvar bottomRightY = topRight.Y - topLeft.Y + bottomLeft.Y;\r\n\t\t\t\t\r\n\t\t\t\t// Estimate that alignment pattern is closer by 3 modules\r\n\t\t\t\t// from \"bottom right\" to known top left location\r\n\t\t\t\tvar correctionToTopLeft = 1.0 - 3.0 /  modulesBetweenFPCenters;\r\n\t\t\t\tvar estAlignmentX = Math.floor (topLeft.X + correctionToTopLeft * (bottomRightX - topLeft.X));\r\n\t\t\t\tvar estAlignmentY = Math.floor (topLeft.Y + correctionToTopLeft * (bottomRightY - topLeft.Y));\r\n\t\t\t\t\r\n\t\t\t\t// Kind of arbitrary -- expand search radius before giving up\r\n\t\t\t\tfor (var i = 4; i <= 16; i <<= 1)\r\n\t\t\t\t{\r\n\t\t\t\t\t//try\r\n\t\t\t\t\t//{\r\n\t\t\t\t\t\talignmentPattern = this.findAlignmentInRegion(moduleSize, estAlignmentX, estAlignmentY,  i);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t//}\r\n\t\t\t\t\t//catch (re)\r\n\t\t\t\t\t//{\r\n\t\t\t\t\t\t// try next round\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\t\t\t\t// If we didn't find alignment pattern... well try anyway without it\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar transform = this.createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);\r\n\t\t\t\r\n\t\t\tvar bits = this.sampleGrid(this.image, transform, dimension);\r\n\t\t\t\r\n\t\t\tvar points;\r\n\t\t\tif (alignmentPattern == null)\r\n\t\t\t{\r\n\t\t\t\tpoints = new Array(bottomLeft, topLeft, topRight);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tpoints = new Array(bottomLeft, topLeft, topRight, alignmentPattern);\r\n\t\t\t}\r\n\t\t\treturn new DetectorResult(bits, points);\r\n\t\t}\r\n\t\t\r\n\r\n\t\r\n\tthis.detect=function()\r\n\t{\r\n\t\tvar info =  new FinderPatternFinder().findFinderPattern(this.image);\r\n\t\t\t\r\n\t\treturn this.processFinderPatternInfo(info); \r\n\t}\r\n}","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction AlignmentPattern(posX, posY,  estimatedModuleSize)\r\n{\r\n\tthis.x=posX;\r\n\tthis.y=posY;\r\n\tthis.count = 1;\r\n\tthis.estimatedModuleSize = estimatedModuleSize;\r\n\t\r\n\tthis.__defineGetter__(\"EstimatedModuleSize\", function()\r\n\t{\r\n\t\treturn this.estimatedModuleSize;\r\n\t}); \r\n\tthis.__defineGetter__(\"Count\", function()\r\n\t{\r\n\t\treturn this.count;\r\n\t});\r\n\tthis.__defineGetter__(\"X\", function()\r\n\t{\r\n\t\treturn Math.floor(this.x);\r\n\t});\r\n\tthis.__defineGetter__(\"Y\", function()\r\n\t{\r\n\t\treturn Math.floor(this.y);\r\n\t});\r\n\tthis.incrementCount = function()\r\n\t{\r\n\t\tthis.count++;\r\n\t}\r\n\tthis.aboutEquals=function( moduleSize,  i,  j)\r\n\t\t{\r\n\t\t\tif (Math.abs(i - this.y) <= moduleSize && Math.abs(j - this.x) <= moduleSize)\r\n\t\t\t{\r\n\t\t\t\tvar moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\r\n\t\t\t\treturn moduleSizeDiff <= 1.0 || moduleSizeDiff / this.estimatedModuleSize <= 1.0;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\r\n}\r\n\r\nfunction AlignmentPatternFinder( image,  startX,  startY,  width,  height,  moduleSize,  resultPointCallback)\r\n{\r\n\tthis.image = image;\r\n\tthis.possibleCenters = new Array();\r\n\tthis.startX = startX;\r\n\tthis.startY = startY;\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\tthis.moduleSize = moduleSize;\r\n\tthis.crossCheckStateCount = new Array(0,0,0);\r\n\tthis.resultPointCallback = resultPointCallback;\r\n\t\r\n\tthis.centerFromEnd=function(stateCount,  end)\r\n\t\t{\r\n\t\t\treturn  (end - stateCount[2]) - stateCount[1] / 2.0;\r\n\t\t}\r\n\tthis.foundPatternCross = function(stateCount)\r\n\t\t{\r\n\t\t\tvar moduleSize = this.moduleSize;\r\n\t\t\tvar maxVariance = moduleSize / 2.0;\r\n\t\t\tfor (var i = 0; i < 3; i++)\r\n\t\t\t{\r\n\t\t\t\tif (Math.abs(moduleSize - stateCount[i]) >= maxVariance)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\tthis.crossCheckVertical=function( startI,  centerJ,  maxCount,  originalStateCountTotal)\r\n\t\t{\r\n\t\t\tvar image = this.image;\r\n\t\t\t\r\n\t\t\tvar maxI = qrcode.height;\r\n\t\t\tvar stateCount = this.crossCheckStateCount;\r\n\t\t\tstateCount[0] = 0;\r\n\t\t\tstateCount[1] = 0;\r\n\t\t\tstateCount[2] = 0;\r\n\t\t\t\r\n\t\t\t// Start counting up from center\r\n\t\t\tvar i = startI;\r\n\t\t\twhile (i >= 0 && image[centerJ + i*qrcode.width] && stateCount[1] <= maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[1]++;\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t\t// If already too many modules in this state or ran off the edge:\r\n\t\t\tif (i < 0 || stateCount[1] > maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\twhile (i >= 0 && !image[centerJ + i*qrcode.width] && stateCount[0] <= maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[0]++;\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t\tif (stateCount[0] > maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Now also count down from center\r\n\t\t\ti = startI + 1;\r\n\t\t\twhile (i < maxI && image[centerJ + i*qrcode.width] && stateCount[1] <= maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[1]++;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tif (i == maxI || stateCount[1] > maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\twhile (i < maxI && !image[centerJ + i*qrcode.width] && stateCount[2] <= maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[2]++;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tif (stateCount[2] > maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\r\n\t\t\tif (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this.foundPatternCross(stateCount)?this.centerFromEnd(stateCount, i):NaN;\r\n\t\t}\r\n\t\t\r\n\tthis.handlePossibleCenter=function( stateCount,  i,  j)\r\n\t\t{\r\n\t\t\tvar stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\r\n\t\t\tvar centerJ = this.centerFromEnd(stateCount, j);\r\n\t\t\tvar centerI = this.crossCheckVertical(i, Math.floor (centerJ), 2 * stateCount[1], stateCountTotal);\r\n\t\t\tif (!isNaN(centerI))\r\n\t\t\t{\r\n\t\t\t\tvar estimatedModuleSize = (stateCount[0] + stateCount[1] + stateCount[2]) / 3.0;\r\n\t\t\t\tvar max = this.possibleCenters.length;\r\n\t\t\t\tfor (var index = 0; index < max; index++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar center =  this.possibleCenters[index];\r\n\t\t\t\t\t// Look for about the same center and module size:\r\n\t\t\t\t\tif (center.aboutEquals(estimatedModuleSize, centerI, centerJ))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn new AlignmentPattern(centerJ, centerI, estimatedModuleSize);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Hadn't found this before; save it\r\n\t\t\t\tvar point = new AlignmentPattern(centerJ, centerI, estimatedModuleSize);\r\n\t\t\t\tthis.possibleCenters.push(point);\r\n\t\t\t\tif (this.resultPointCallback != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.resultPointCallback.foundPossibleResultPoint(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\tthis.find = function()\r\n\t{\r\n\t\t\tvar startX = this.startX;\r\n\t\t\tvar height = this.height;\r\n\t\t\tvar maxJ = startX + width;\r\n\t\t\tvar middleI = startY + (height >> 1);\r\n\t\t\t// We are looking for black/white/black modules in 1:1:1 ratio;\r\n\t\t\t// this tracks the number of black/white/black modules seen so far\r\n\t\t\tvar stateCount = new Array(0,0,0);\r\n\t\t\tfor (var iGen = 0; iGen < height; iGen++)\r\n\t\t\t{\r\n\t\t\t\t// Search from middle outwards\r\n\t\t\t\tvar i = middleI + ((iGen & 0x01) == 0?((iGen + 1) >> 1):- ((iGen + 1) >> 1));\r\n\t\t\t\tstateCount[0] = 0;\r\n\t\t\t\tstateCount[1] = 0;\r\n\t\t\t\tstateCount[2] = 0;\r\n\t\t\t\tvar j = startX;\r\n\t\t\t\t// Burn off leading white pixels before anything else; if we start in the middle of\r\n\t\t\t\t// a white run, it doesn't make sense to count its length, since we don't know if the\r\n\t\t\t\t// white run continued to the left of the start point\r\n\t\t\t\twhile (j < maxJ && !image[j + qrcode.width* i])\r\n\t\t\t\t{\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}\r\n\t\t\t\tvar currentState = 0;\r\n\t\t\t\twhile (j < maxJ)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (image[j + i*qrcode.width])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Black pixel\r\n\t\t\t\t\t\tif (currentState == 1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Counting black pixels\r\n\t\t\t\t\t\t\tstateCount[currentState]++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Counting white pixels\r\n\t\t\t\t\t\t\tif (currentState == 2)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// A winner?\r\n\t\t\t\t\t\t\t\tif (this.foundPatternCross(stateCount))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Yes\r\n\t\t\t\t\t\t\t\t\tvar confirmed = this.handlePossibleCenter(stateCount, i, j);\r\n\t\t\t\t\t\t\t\t\tif (confirmed != null)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn confirmed;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstateCount[0] = stateCount[2];\r\n\t\t\t\t\t\t\t\tstateCount[1] = 1;\r\n\t\t\t\t\t\t\t\tstateCount[2] = 0;\r\n\t\t\t\t\t\t\t\tcurrentState = 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tstateCount[++currentState]++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// White pixel\r\n\t\t\t\t\t\tif (currentState == 1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Counting black pixels\r\n\t\t\t\t\t\t\tcurrentState++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tstateCount[currentState]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.foundPatternCross(stateCount))\r\n\t\t\t\t{\r\n\t\t\t\t\tvar confirmed = this.handlePossibleCenter(stateCount, i, maxJ);\r\n\t\t\t\t\tif (confirmed != null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn confirmed;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Hmm, nothing we saw was observed and confirmed twice. If we had\r\n\t\t\t// any guess at all, return it.\r\n\t\t\tif (!(this.possibleCenters.length == 0))\r\n\t\t\t{\r\n\t\t\t\treturn  this.possibleCenters[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthrow new Error(\"QR Error: Couldn't find enough alignment patterns\");\r\n\t\t}\r\n\t\r\n}","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nvar MIN_SKIP = 3;\r\nvar MAX_MODULES = 57;\r\nvar INTEGER_MATH_SHIFT = 8;\r\nvar CENTER_QUORUM = 2;\r\n\r\nqrcode.orderBestPatterns=function(patterns)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tfunction distance( pattern1,  pattern2)\r\n\t\t\t{\r\n\t\t\t\tvar xDiff = pattern1.X - pattern2.X;\r\n\t\t\t\tvar yDiff = pattern1.Y - pattern2.Y;\r\n\t\t\t\treturn  Math.sqrt( (xDiff * xDiff + yDiff * yDiff));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/// <summary> Returns the z component of the cross product between vectors BC and BA.</summary>\r\n\t\t\tfunction crossProductZ( pointA,  pointB,  pointC)\r\n\t\t\t{\r\n\t\t\t\tvar bX = pointB.x;\r\n\t\t\t\tvar bY = pointB.y;\r\n\t\t\t\treturn ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t\t// Find distances between pattern centers\r\n\t\t\tvar zeroOneDistance = distance(patterns[0], patterns[1]);\r\n\t\t\tvar oneTwoDistance = distance(patterns[1], patterns[2]);\r\n\t\t\tvar zeroTwoDistance = distance(patterns[0], patterns[2]);\r\n\t\t\t\r\n\t\t\tvar pointA, pointB, pointC;\r\n\t\t\t// Assume one closest to other two is B; A and C will just be guesses at first\r\n\t\t\tif (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance)\r\n\t\t\t{\r\n\t\t\t\tpointB = patterns[0];\r\n\t\t\t\tpointA = patterns[1];\r\n\t\t\t\tpointC = patterns[2];\r\n\t\t\t}\r\n\t\t\telse if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance)\r\n\t\t\t{\r\n\t\t\t\tpointB = patterns[1];\r\n\t\t\t\tpointA = patterns[0];\r\n\t\t\t\tpointC = patterns[2];\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tpointB = patterns[2];\r\n\t\t\t\tpointA = patterns[0];\r\n\t\t\t\tpointC = patterns[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Use cross product to figure out whether A and C are correct or flipped.\r\n\t\t\t// This asks whether BC x BA has a positive z component, which is the arrangement\r\n\t\t\t// we want for A, B, C. If it's negative, then we've got it flipped around and\r\n\t\t\t// should swap A and C.\r\n\t\t\tif (crossProductZ(pointA, pointB, pointC) < 0.0)\r\n\t\t\t{\r\n\t\t\t\tvar temp = pointA;\r\n\t\t\t\tpointA = pointC;\r\n\t\t\t\tpointC = temp;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpatterns[0] = pointA;\r\n\t\t\tpatterns[1] = pointB;\r\n\t\t\tpatterns[2] = pointC;\r\n\t\t}\r\n\r\n\r\nfunction FinderPattern(posX, posY,  estimatedModuleSize)\r\n{\r\n\tthis.x=posX;\r\n\tthis.y=posY;\r\n\tthis.count = 1;\r\n\tthis.estimatedModuleSize = estimatedModuleSize;\r\n\t\r\n\tthis.__defineGetter__(\"EstimatedModuleSize\", function()\r\n\t{\r\n\t\treturn this.estimatedModuleSize;\r\n\t}); \r\n\tthis.__defineGetter__(\"Count\", function()\r\n\t{\r\n\t\treturn this.count;\r\n\t});\r\n\tthis.__defineGetter__(\"X\", function()\r\n\t{\r\n\t\treturn this.x;\r\n\t});\r\n\tthis.__defineGetter__(\"Y\", function()\r\n\t{\r\n\t\treturn this.y;\r\n\t});\r\n\tthis.incrementCount = function()\r\n\t{\r\n\t\tthis.count++;\r\n\t}\r\n\tthis.aboutEquals=function( moduleSize,  i,  j)\r\n\t\t{\r\n\t\t\tif (Math.abs(i - this.y) <= moduleSize && Math.abs(j - this.x) <= moduleSize)\r\n\t\t\t{\r\n\t\t\t\tvar moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\r\n\t\t\t\treturn moduleSizeDiff <= 1.0 || moduleSizeDiff / this.estimatedModuleSize <= 1.0;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\r\n}\r\n\r\nfunction FinderPatternInfo(patternCenters)\r\n{\r\n\tthis.bottomLeft = patternCenters[0];\r\n\tthis.topLeft = patternCenters[1];\r\n\tthis.topRight = patternCenters[2];\r\n\tthis.__defineGetter__(\"BottomLeft\", function()\r\n\t{\r\n\t\treturn this.bottomLeft;\r\n\t}); \r\n\tthis.__defineGetter__(\"TopLeft\", function()\r\n\t{\r\n\t\treturn this.topLeft;\r\n\t}); \r\n\tthis.__defineGetter__(\"TopRight\", function()\r\n\t{\r\n\t\treturn this.topRight;\r\n\t}); \r\n}\r\n\r\nfunction FinderPatternFinder()\r\n{\r\n\tthis.image=null;\r\n\tthis.possibleCenters = [];\r\n\tthis.hasSkipped = false;\r\n\tthis.crossCheckStateCount = new Array(0,0,0,0,0);\r\n\tthis.resultPointCallback = null;\r\n\t\r\n\tthis.__defineGetter__(\"CrossCheckStateCount\", function()\r\n\t{\r\n\t\tthis.crossCheckStateCount[0] = 0;\r\n\t\tthis.crossCheckStateCount[1] = 0;\r\n\t\tthis.crossCheckStateCount[2] = 0;\r\n\t\tthis.crossCheckStateCount[3] = 0;\r\n\t\tthis.crossCheckStateCount[4] = 0;\r\n\t\treturn this.crossCheckStateCount;\r\n\t}); \r\n\t\r\n\tthis.foundPatternCross=function( stateCount)\r\n\t\t{\r\n\t\t\tvar totalModuleSize = 0;\r\n\t\t\tfor (var i = 0; i < 5; i++)\r\n\t\t\t{\r\n\t\t\t\tvar count = stateCount[i];\r\n\t\t\t\tif (count == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\ttotalModuleSize += count;\r\n\t\t\t}\r\n\t\t\tif (totalModuleSize < 7)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar moduleSize = Math.floor((totalModuleSize << INTEGER_MATH_SHIFT) / 7);\r\n\t\t\tvar maxVariance = Math.floor(moduleSize / 2);\r\n\t\t\t// Allow less than 50% variance from 1-1-3-1-1 proportions\r\n\t\t\treturn Math.abs(moduleSize - (stateCount[0] << INTEGER_MATH_SHIFT)) < maxVariance && Math.abs(moduleSize - (stateCount[1] << INTEGER_MATH_SHIFT)) < maxVariance && Math.abs(3 * moduleSize - (stateCount[2] << INTEGER_MATH_SHIFT)) < 3 * maxVariance && Math.abs(moduleSize - (stateCount[3] << INTEGER_MATH_SHIFT)) < maxVariance && Math.abs(moduleSize - (stateCount[4] << INTEGER_MATH_SHIFT)) < maxVariance;\r\n\t\t}\r\n\tthis.centerFromEnd=function( stateCount,  end)\r\n\t\t{\r\n\t\t\treturn  (end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0;\r\n\t\t}\r\n\tthis.crossCheckVertical=function( startI,  centerJ,  maxCount,  originalStateCountTotal)\r\n\t\t{\r\n\t\t\tvar image = this.image;\r\n\t\t\t\r\n\t\t\tvar maxI = qrcode.height;\r\n\t\t\tvar stateCount = this.CrossCheckStateCount;\r\n\t\t\t\r\n\t\t\t// Start counting up from center\r\n\t\t\tvar i = startI;\r\n\t\t\twhile (i >= 0 && image[centerJ + i*qrcode.width])\r\n\t\t\t{\r\n\t\t\t\tstateCount[2]++;\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t\tif (i < 0)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\twhile (i >= 0 && !image[centerJ +i*qrcode.width] && stateCount[1] <= maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[1]++;\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t\t// If already too many modules in this state or ran off the edge:\r\n\t\t\tif (i < 0 || stateCount[1] > maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\twhile (i >= 0 && image[centerJ + i*qrcode.width] && stateCount[0] <= maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[0]++;\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t\tif (stateCount[0] > maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Now also count down from center\r\n\t\t\ti = startI + 1;\r\n\t\t\twhile (i < maxI && image[centerJ +i*qrcode.width])\r\n\t\t\t{\r\n\t\t\t\tstateCount[2]++;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tif (i == maxI)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\twhile (i < maxI && !image[centerJ + i*qrcode.width] && stateCount[3] < maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[3]++;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tif (i == maxI || stateCount[3] >= maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\twhile (i < maxI && image[centerJ + i*qrcode.width] && stateCount[4] < maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[4]++;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tif (stateCount[4] >= maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// If we found a finder-pattern-like section, but its size is more than 40% different than\r\n\t\t\t// the original, assume it's a false positive\r\n\t\t\tvar stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\r\n\t\t\tif (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this.foundPatternCross(stateCount)?this.centerFromEnd(stateCount, i):NaN;\r\n\t\t}\r\n\tthis.crossCheckHorizontal=function( startJ,  centerI,  maxCount, originalStateCountTotal)\r\n\t\t{\r\n\t\t\tvar image = this.image;\r\n\t\t\t\r\n\t\t\tvar maxJ = qrcode.width;\r\n\t\t\tvar stateCount = this.CrossCheckStateCount;\r\n\t\t\t\r\n\t\t\tvar j = startJ;\r\n\t\t\twhile (j >= 0 && image[j+ centerI*qrcode.width])\r\n\t\t\t{\r\n\t\t\t\tstateCount[2]++;\r\n\t\t\t\tj--;\r\n\t\t\t}\r\n\t\t\tif (j < 0)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\twhile (j >= 0 && !image[j+ centerI*qrcode.width] && stateCount[1] <= maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[1]++;\r\n\t\t\t\tj--;\r\n\t\t\t}\r\n\t\t\tif (j < 0 || stateCount[1] > maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\twhile (j >= 0 && image[j+ centerI*qrcode.width] && stateCount[0] <= maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[0]++;\r\n\t\t\t\tj--;\r\n\t\t\t}\r\n\t\t\tif (stateCount[0] > maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tj = startJ + 1;\r\n\t\t\twhile (j < maxJ && image[j+ centerI*qrcode.width])\r\n\t\t\t{\r\n\t\t\t\tstateCount[2]++;\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\tif (j == maxJ)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\twhile (j < maxJ && !image[j+ centerI*qrcode.width] && stateCount[3] < maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[3]++;\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\tif (j == maxJ || stateCount[3] >= maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\twhile (j < maxJ && image[j+ centerI*qrcode.width] && stateCount[4] < maxCount)\r\n\t\t\t{\r\n\t\t\t\tstateCount[4]++;\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\tif (stateCount[4] >= maxCount)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// If we found a finder-pattern-like section, but its size is significantly different than\r\n\t\t\t// the original, assume it's a false positive\r\n\t\t\tvar stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\r\n\t\t\tif (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this.foundPatternCross(stateCount)?this.centerFromEnd(stateCount, j):NaN;\r\n\t\t}\r\n\tthis.handlePossibleCenter=function( stateCount,  i,  j)\r\n\t\t{\r\n\t\t\tvar stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\r\n\t\t\tvar centerJ = this.centerFromEnd(stateCount, j); //float\r\n\t\t\tvar centerI = this.crossCheckVertical(i, Math.floor( centerJ), stateCount[2], stateCountTotal); //float\r\n\t\t\tif (!isNaN(centerI))\r\n\t\t\t{\r\n\t\t\t\t// Re-cross check\r\n\t\t\t\tcenterJ = this.crossCheckHorizontal(Math.floor( centerJ), Math.floor( centerI), stateCount[2], stateCountTotal);\r\n\t\t\t\tif (!isNaN(centerJ))\r\n\t\t\t\t{\r\n\t\t\t\t\tvar estimatedModuleSize =   stateCountTotal / 7.0;\r\n\t\t\t\t\tvar found = false;\r\n\t\t\t\t\tvar max = this.possibleCenters.length;\r\n\t\t\t\t\tfor (var index = 0; index < max; index++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar center = this.possibleCenters[index];\r\n\t\t\t\t\t\t// Look for about the same center and module size:\r\n\t\t\t\t\t\tif (center.aboutEquals(estimatedModuleSize, centerI, centerJ))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcenter.incrementCount();\r\n\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!found)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar point = new FinderPattern(centerJ, centerI, estimatedModuleSize);\r\n\t\t\t\t\t\tthis.possibleCenters.push(point);\r\n\t\t\t\t\t\tif (this.resultPointCallback != null)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.resultPointCallback.foundPossibleResultPoint(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\tthis.selectBestPatterns=function()\r\n\t\t{\r\n\t\t\t\r\n\t\t\tvar startSize = this.possibleCenters.length;\r\n\t\t\tif (startSize < 3)\r\n\t\t\t{\r\n\t\t\t\t// Couldn't find enough finder patterns\r\n\t\t\t\tthrow new Error(\"QR Error: Couldn't find enough finder patterns (found \" + startSize + \")\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Filter outlier possibilities whose module size is too different\r\n\t\t\tif (startSize > 3)\r\n\t\t\t{\r\n\t\t\t\t// But we can only afford to do so if we have at least 4 possibilities to choose from\r\n\t\t\t\tvar totalModuleSize = 0.0;\r\n                var square = 0.0;\r\n\t\t\t\tfor (var i = 0; i < startSize; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t//totalModuleSize +=  this.possibleCenters[i].EstimatedModuleSize;\r\n                    var\tcenterValue=this.possibleCenters[i].EstimatedModuleSize;\r\n\t\t\t\t\ttotalModuleSize += centerValue;\r\n\t\t\t\t\tsquare += (centerValue * centerValue);\r\n\t\t\t\t}\r\n\t\t\t\tvar average = totalModuleSize /  startSize;\r\n                this.possibleCenters.sort(function(center1,center2) {\r\n\t\t\t\t      var dA=Math.abs(center2.EstimatedModuleSize - average);\r\n\t\t\t\t      var dB=Math.abs(center1.EstimatedModuleSize - average);\r\n\t\t\t\t      if (dA < dB) {\r\n\t\t\t\t    \t  return (-1);\r\n\t\t\t\t      } else if (dA == dB) {\r\n\t\t\t\t    \t  return 0;\r\n\t\t\t\t      } else {\r\n\t\t\t\t    \t  return 1;\r\n\t\t\t\t      }\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tvar stdDev = Math.sqrt(square / startSize - average * average);\r\n\t\t\t\tvar limit = Math.max(0.2 * average, stdDev);\r\n\t\t\t\t//for (var i = 0; i < this.possibleCenters.length && this.possibleCenters.length > 3; i++)\r\n\t\t\t\tfor (var i = this.possibleCenters.length - 1; i >= 0 ; i--)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar pattern =  this.possibleCenters[i];\r\n\t\t\t\t\t//if (Math.abs(pattern.EstimatedModuleSize - average) > 0.2 * average)\r\n                    if (Math.abs(pattern.EstimatedModuleSize - average) > limit)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//this.possibleCenters.remove(i);\r\n\t\t\t\t\t\tthis.possibleCenters.splice(i,1);\r\n\t\t\t\t\t\t//i--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (this.possibleCenters.length > 3)\r\n\t\t\t{\r\n\t\t\t\t// Throw away all but those first size candidate points we found.\r\n\t\t\t\tthis.possibleCenters.sort(function(a, b){\r\n\t\t\t\t\tif (a.count > b.count){return -1;}\r\n\t\t\t\t\tif (a.count < b.count){return 1;}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn new Array( this.possibleCenters[0],  this.possibleCenters[1],  this.possibleCenters[2]);\r\n\t\t}\r\n\t\t\r\n\tthis.findRowSkip=function()\r\n\t\t{\r\n\t\t\tvar max = this.possibleCenters.length;\r\n\t\t\tif (max <= 1)\r\n\t\t\t{\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tvar firstConfirmedCenter = null;\r\n\t\t\tfor (var i = 0; i < max; i++)\r\n\t\t\t{\r\n\t\t\t\tvar center =  this.possibleCenters[i];\r\n\t\t\t\tif (center.Count >= CENTER_QUORUM)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (firstConfirmedCenter == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfirstConfirmedCenter = center;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// We have two confirmed centers\r\n\t\t\t\t\t\t// How far down can we skip before resuming looking for the next\r\n\t\t\t\t\t\t// pattern? In the worst case, only the difference between the\r\n\t\t\t\t\t\t// difference in the x / y coordinates of the two centers.\r\n\t\t\t\t\t\t// This is the case where you find top left last.\r\n\t\t\t\t\t\tthis.hasSkipped = true;\r\n\t\t\t\t\t\treturn Math.floor ((Math.abs(firstConfirmedCenter.X - center.X) - Math.abs(firstConfirmedCenter.Y - center.Y)) / 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\r\n\tthis.haveMultiplyConfirmedCenters=function()\r\n\t\t{\r\n\t\t\tvar confirmedCount = 0;\r\n\t\t\tvar totalModuleSize = 0.0;\r\n\t\t\tvar max = this.possibleCenters.length;\r\n\t\t\tfor (var i = 0; i < max; i++)\r\n\t\t\t{\r\n\t\t\t\tvar pattern =  this.possibleCenters[i];\r\n\t\t\t\tif (pattern.Count >= CENTER_QUORUM)\r\n\t\t\t\t{\r\n\t\t\t\t\tconfirmedCount++;\r\n\t\t\t\t\ttotalModuleSize += pattern.EstimatedModuleSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (confirmedCount < 3)\r\n\t\t\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// OK, we have at least 3 confirmed centers, but, it's possible that one is a \"false positive\"\r\n\t\t\t// and that we need to keep looking. We detect this by asking if the estimated module sizes\r\n\t\t\t// vary too much. We arbitrarily say that when the total deviation from average exceeds\r\n\t\t\t// 5% of the total module size estimates, it's too much.\r\n\t\t\tvar average = totalModuleSize / max;\r\n\t\t\tvar totalDeviation = 0.0;\r\n\t\t\tfor (var i = 0; i < max; i++)\r\n\t\t\t{\r\n\t\t\t\tpattern = this.possibleCenters[i];\r\n\t\t\t\ttotalDeviation += Math.abs(pattern.EstimatedModuleSize - average);\r\n\t\t\t}\r\n\t\t\treturn totalDeviation <= 0.05 * totalModuleSize;\r\n\t\t}\r\n\t\t\r\n\tthis.findFinderPattern = function(image){\r\n\t\tvar tryHarder = false;\r\n\t\tthis.image=image;\r\n\t\tvar maxI = qrcode.height;\r\n\t\tvar maxJ = qrcode.width;\r\n\t\tvar iSkip = Math.floor((3 * maxI) / (4 * MAX_MODULES));\r\n\t\tif (iSkip < MIN_SKIP || tryHarder)\r\n\t\t{\r\n\t\t\t\tiSkip = MIN_SKIP;\r\n\t\t}\r\n\t\t\r\n\t\tvar done = false;\r\n\t\tvar stateCount = new Array(5);\r\n\t\tfor (var i = iSkip - 1; i < maxI && !done; i += iSkip)\r\n\t\t{\r\n\t\t\t// Get a row of black/white values\r\n\t\t\tstateCount[0] = 0;\r\n\t\t\tstateCount[1] = 0;\r\n\t\t\tstateCount[2] = 0;\r\n\t\t\tstateCount[3] = 0;\r\n\t\t\tstateCount[4] = 0;\r\n\t\t\tvar currentState = 0;\r\n\t\t\tfor (var j = 0; j < maxJ; j++)\r\n\t\t\t{\r\n\t\t\t\tif (image[j+i*qrcode.width] )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Black pixel\r\n\t\t\t\t\tif ((currentState & 1) == 1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Counting white pixels\r\n\t\t\t\t\t\tcurrentState++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstateCount[currentState]++;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// White pixel\r\n\t\t\t\t\tif ((currentState & 1) == 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Counting black pixels\r\n\t\t\t\t\t\tif (currentState == 4)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// A winner?\r\n\t\t\t\t\t\t\tif (this.foundPatternCross(stateCount))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Yes\r\n\t\t\t\t\t\t\t\tvar confirmed = this.handlePossibleCenter(stateCount, i, j);\r\n\t\t\t\t\t\t\t\tif (confirmed)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Start examining every other line. Checking each line turned out to be too\r\n\t\t\t\t\t\t\t\t\t// expensive and didn't improve performance.\r\n\t\t\t\t\t\t\t\t\tiSkip = 2;\r\n\t\t\t\t\t\t\t\t\tif (this.hasSkipped)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tdone = this.haveMultiplyConfirmedCenters();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tvar rowSkip = this.findRowSkip();\r\n\t\t\t\t\t\t\t\t\t\tif (rowSkip > stateCount[2])\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t// Skip rows between row of lower confirmed center\r\n\t\t\t\t\t\t\t\t\t\t\t// and top of presumed third confirmed center\r\n\t\t\t\t\t\t\t\t\t\t\t// but back up a bit to get a full chance of detecting\r\n\t\t\t\t\t\t\t\t\t\t\t// it, entire width of center of finder pattern\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t// Skip by rowSkip, but back off by stateCount[2] (size of last center\r\n\t\t\t\t\t\t\t\t\t\t\t// of pattern we saw) to be conservative, and also back off by iSkip which\r\n\t\t\t\t\t\t\t\t\t\t\t// is about to be re-added\r\n\t\t\t\t\t\t\t\t\t\t\ti += rowSkip - stateCount[2] - iSkip;\r\n\t\t\t\t\t\t\t\t\t\t\tj = maxJ - 1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Advance to next black pixel\r\n\t\t\t\t\t\t\t\t\tdo \r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tj++;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\twhile (j < maxJ && !image[j + i*qrcode.width]);\r\n\t\t\t\t\t\t\t\t\tj--; // back up to that last white pixel\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// Clear state to start looking again\r\n\t\t\t\t\t\t\t\tcurrentState = 0;\r\n\t\t\t\t\t\t\t\tstateCount[0] = 0;\r\n\t\t\t\t\t\t\t\tstateCount[1] = 0;\r\n\t\t\t\t\t\t\t\tstateCount[2] = 0;\r\n\t\t\t\t\t\t\t\tstateCount[3] = 0;\r\n\t\t\t\t\t\t\t\tstateCount[4] = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// No, shift counts back by two\r\n\t\t\t\t\t\t\t\tstateCount[0] = stateCount[2];\r\n\t\t\t\t\t\t\t\tstateCount[1] = stateCount[3];\r\n\t\t\t\t\t\t\t\tstateCount[2] = stateCount[4];\r\n\t\t\t\t\t\t\t\tstateCount[3] = 1;\r\n\t\t\t\t\t\t\t\tstateCount[4] = 0;\r\n\t\t\t\t\t\t\t\tcurrentState = 3;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstateCount[++currentState]++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Counting white pixels\r\n\t\t\t\t\t\tstateCount[currentState]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.foundPatternCross(stateCount))\r\n\t\t\t{\r\n\t\t\t\tvar confirmed = this.handlePossibleCenter(stateCount, i, maxJ);\r\n\t\t\t\tif (confirmed)\r\n\t\t\t\t{\r\n\t\t\t\t\tiSkip = stateCount[0];\r\n\t\t\t\t\tif (this.hasSkipped)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Found a third one\r\n\t\t\t\t\t\tdone = this.haveMultiplyConfirmedCenters();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar patternInfo = this.selectBestPatterns();\r\n\t\tqrcode.orderBestPatterns(patternInfo);\r\n\t\t\r\n\t\treturn new FinderPatternInfo(patternInfo);\r\n\t};\r\n}","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nvar FORMAT_INFO_MASK_QR = 0x5412;\r\nvar FORMAT_INFO_DECODE_LOOKUP = new Array(new Array(0x5412, 0x00), new Array(0x5125, 0x01), new Array(0x5E7C, 0x02), new Array(0x5B4B, 0x03), new Array(0x45F9, 0x04), new Array(0x40CE, 0x05), new Array(0x4F97, 0x06), new Array(0x4AA0, 0x07), new Array(0x77C4, 0x08), new Array(0x72F3, 0x09), new Array(0x7DAA, 0x0A), new Array(0x789D, 0x0B), new Array(0x662F, 0x0C), new Array(0x6318, 0x0D), new Array(0x6C41, 0x0E), new Array(0x6976, 0x0F), new Array(0x1689, 0x10), new Array(0x13BE, 0x11), new Array(0x1CE7, 0x12), new Array(0x19D0, 0x13), new Array(0x0762, 0x14), new Array(0x0255, 0x15), new Array(0x0D0C, 0x16), new Array(0x083B, 0x17), new Array(0x355F, 0x18), new Array(0x3068, 0x19), new Array(0x3F31, 0x1A), new Array(0x3A06, 0x1B), new Array(0x24B4, 0x1C), new Array(0x2183, 0x1D), new Array(0x2EDA, 0x1E), new Array(0x2BED, 0x1F));\r\nvar BITS_SET_IN_HALF_BYTE = new Array(0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4);\r\n\r\n\r\nfunction FormatInformation(formatInfo)\r\n{\r\n\tthis.errorCorrectionLevel = ErrorCorrectionLevel.forBits((formatInfo >> 3) & 0x03);\r\n\tthis.dataMask =  (formatInfo & 0x07);\r\n\r\n\tthis.__defineGetter__(\"ErrorCorrectionLevel\", function()\r\n\t{\r\n\t\treturn this.errorCorrectionLevel;\r\n\t});\r\n\tthis.__defineGetter__(\"DataMask\", function()\r\n\t{\r\n\t\treturn this.dataMask;\r\n\t});\r\n\tthis.GetHashCode=function()\r\n\t{\r\n\t\treturn (this.errorCorrectionLevel.ordinal() << 3) |  this.dataMask;\r\n\t}\r\n\tthis.Equals=function( o)\r\n\t{\r\n\t\tvar other =  o;\r\n\t\treturn this.errorCorrectionLevel == other.errorCorrectionLevel && this.dataMask == other.dataMask;\r\n\t}\r\n}\r\n\r\nFormatInformation.numBitsDiffering=function( a,  b)\r\n{\r\n\ta ^= b; // a now has a 1 bit exactly where its bit differs with b's\r\n\t// Count bits set quickly with a series of lookups:\r\n\treturn BITS_SET_IN_HALF_BYTE[a & 0x0F] + BITS_SET_IN_HALF_BYTE[(URShift(a, 4) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 8) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 12) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 16) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 20) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 24) & 0x0F)] + BITS_SET_IN_HALF_BYTE[(URShift(a, 28) & 0x0F)];\r\n}\r\n\r\nFormatInformation.decodeFormatInformation=function( maskedFormatInfo)\r\n{\r\n\tvar formatInfo = FormatInformation.doDecodeFormatInformation(maskedFormatInfo);\r\n\tif (formatInfo != null)\r\n\t{\r\n\t\treturn formatInfo;\r\n\t}\r\n\t// Should return null, but, some QR codes apparently\r\n\t// do not mask this info. Try again by actually masking the pattern\r\n\t// first\r\n\treturn FormatInformation.doDecodeFormatInformation(maskedFormatInfo ^ FORMAT_INFO_MASK_QR);\r\n}\r\nFormatInformation.doDecodeFormatInformation=function( maskedFormatInfo)\r\n{\r\n\t// Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\r\n\tvar bestDifference = 0xffffffff;\r\n\tvar bestFormatInfo = 0;\r\n\tfor (var i = 0; i < FORMAT_INFO_DECODE_LOOKUP.length; i++)\r\n\t{\r\n\t\tvar decodeInfo = FORMAT_INFO_DECODE_LOOKUP[i];\r\n\t\tvar targetInfo = decodeInfo[0];\r\n\t\tif (targetInfo == maskedFormatInfo)\r\n\t\t{\r\n\t\t\t// Found an exact match\r\n\t\t\treturn new FormatInformation(decodeInfo[1]);\r\n\t\t}\r\n\t\tvar bitsDifference = this.numBitsDiffering(maskedFormatInfo, targetInfo);\r\n\t\tif (bitsDifference < bestDifference)\r\n\t\t{\r\n\t\t\tbestFormatInfo = decodeInfo[1];\r\n\t\t\tbestDifference = bitsDifference;\r\n\t\t}\r\n\t}\r\n\t// Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\r\n\t// differing means we found a match\r\n\tif (bestDifference <= 3)\r\n\t{\r\n\t\treturn new FormatInformation(bestFormatInfo);\r\n\t}\r\n\treturn null;\r\n}\r\n\r\n\t\t","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction ErrorCorrectionLevel(ordinal,  bits, name)\r\n{\r\n\tthis.ordinal_Renamed_Field = ordinal;\r\n\tthis.bits = bits;\r\n\tthis.name = name;\r\n\tthis.__defineGetter__(\"Bits\", function()\r\n\t{\r\n\t\treturn this.bits;\r\n\t});\r\n\tthis.__defineGetter__(\"Name\", function()\r\n\t{\r\n\t\treturn this.name;\r\n\t});\r\n\tthis.ordinal=function()\r\n\t{\r\n\t\treturn this.ordinal_Renamed_Field;\r\n\t}\r\n}\r\n\r\nErrorCorrectionLevel.forBits=function( bits)\r\n{\r\n\tif (bits < 0 || bits >= FOR_BITS.length)\r\n\t{\r\n\t\tthrow new Error(\"QR Error: ArgumentException\");\r\n\t}\r\n\treturn FOR_BITS[bits];\r\n}\r\n\r\nvar L = new ErrorCorrectionLevel(0, 0x01, \"L\");\r\nvar M = new ErrorCorrectionLevel(1, 0x00, \"M\");\r\nvar Q = new ErrorCorrectionLevel(2, 0x03, \"Q\");\r\nvar H = new ErrorCorrectionLevel(3, 0x02, \"H\");\r\nvar FOR_BITS = new Array( M, L, H, Q);","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction BitMatrix( width,  height)\r\n{\r\n\tif(!height)\r\n\t\theight=width;\r\n\tif (width < 1 || height < 1)\r\n\t{\r\n\t\tthrow new Error(\"QR Error: Both dimensions must be greater than 0\");\r\n\t}\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\tvar rowSize = width >> 5;\r\n\tif ((width & 0x1f) != 0)\r\n\t{\r\n\t\trowSize++;\r\n\t}\r\n\tthis.rowSize = rowSize;\r\n\tthis.bits = new Array(rowSize * height);\r\n\tfor(var i=0;i<this.bits.length;i++)\r\n\t\tthis.bits[i]=0;\r\n\t\r\n\tthis.__defineGetter__(\"Width\", function()\r\n\t{\r\n\t\treturn this.width;\r\n\t});\r\n\tthis.__defineGetter__(\"Height\", function()\r\n\t{\r\n\t\treturn this.height;\r\n\t});\r\n\tthis.__defineGetter__(\"Dimension\", function()\r\n\t{\r\n\t\tif (this.width != this.height)\r\n\t\t{\r\n\t\t\tthrow new Error(\"QR Error: Can't call getDimension() on a non-square matrix\");\r\n\t\t}\r\n\t\treturn this.width;\r\n\t});\r\n\t\r\n\tthis.get_Renamed=function( x,  y)\r\n\t\t{\r\n\t\t\tvar offset = y * this.rowSize + (x >> 5);\r\n\t\t\treturn ((URShift(this.bits[offset], (x & 0x1f))) & 1) != 0;\r\n\t\t}\r\n\tthis.set_Renamed=function( x,  y)\r\n\t\t{\r\n\t\t\tvar offset = y * this.rowSize + (x >> 5);\r\n\t\t\tthis.bits[offset] |= 1 << (x & 0x1f);\r\n\t\t}\r\n\tthis.flip=function( x,  y)\r\n\t\t{\r\n\t\t\tvar offset = y * this.rowSize + (x >> 5);\r\n\t\t\tthis.bits[offset] ^= 1 << (x & 0x1f);\r\n\t\t}\r\n\tthis.clear=function()\r\n\t\t{\r\n\t\t\tvar max = this.bits.length;\r\n\t\t\tfor (var i = 0; i < max; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.bits[i] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\tthis.setRegion=function( left,  top,  width,  height)\r\n\t\t{\r\n\t\t\tif (top < 0 || left < 0)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: Left and top must be nonnegative\");\r\n\t\t\t}\r\n\t\t\tif (height < 1 || width < 1)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: Height and width must be at least 1\");\r\n\t\t\t}\r\n\t\t\tvar right = left + width;\r\n\t\t\tvar bottom = top + height;\r\n\t\t\tif (bottom > this.height || right > this.width)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: The region must fit inside the matrix\");\r\n\t\t\t}\r\n\t\t\tfor (var y = top; y < bottom; y++)\r\n\t\t\t{\r\n\t\t\t\tvar offset = y * this.rowSize;\r\n\t\t\t\tfor (var x = left; x < right; x++)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.bits[offset + (x >> 5)] |= 1 << (x & 0x1f);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n}","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction DataBlock(numDataCodewords,  codewords)\r\n{\r\n\tthis.numDataCodewords = numDataCodewords;\r\n\tthis.codewords = codewords;\r\n\t\r\n\tthis.__defineGetter__(\"NumDataCodewords\", function()\r\n\t{\r\n\t\treturn this.numDataCodewords;\r\n\t});\r\n\tthis.__defineGetter__(\"Codewords\", function()\r\n\t{\r\n\t\treturn this.codewords;\r\n\t});\r\n}\t\r\n\t\r\nDataBlock.getDataBlocks=function(rawCodewords,  version,  ecLevel)\r\n{\r\n\t\r\n\tif (rawCodewords.length != version.TotalCodewords)\r\n\t{\r\n\t\tthrow new Error(\"QR Error: ArgumentException\");\r\n\t}\r\n\t\r\n\t// Figure out the number and size of data blocks used by this version and\r\n\t// error correction level\r\n\tvar ecBlocks = version.getECBlocksForLevel(ecLevel);\r\n\t\r\n\t// First count the total number of data blocks\r\n\tvar totalBlocks = 0;\r\n\tvar ecBlockArray = ecBlocks.getECBlocks();\r\n\tfor (var i = 0; i < ecBlockArray.length; i++)\r\n\t{\r\n\t\ttotalBlocks += ecBlockArray[i].Count;\r\n\t}\r\n\t\r\n\t// Now establish DataBlocks of the appropriate size and number of data codewords\r\n\tvar result = new Array(totalBlocks);\r\n\tvar numResultBlocks = 0;\r\n\tfor (var j = 0; j < ecBlockArray.length; j++)\r\n\t{\r\n\t\tvar ecBlock = ecBlockArray[j];\r\n\t\tfor (var i = 0; i < ecBlock.Count; i++)\r\n\t\t{\r\n\t\t\tvar numDataCodewords = ecBlock.DataCodewords;\r\n\t\t\tvar numBlockCodewords = ecBlocks.ECCodewordsPerBlock + numDataCodewords;\r\n\t\t\tresult[numResultBlocks++] = new DataBlock(numDataCodewords, new Array(numBlockCodewords));\r\n\t\t}\r\n\t}\r\n\t\r\n\t// All blocks have the same amount of data, except that the last n\r\n\t// (where n may be 0) have 1 more byte. Figure out where these start.\r\n\tvar shorterBlocksTotalCodewords = result[0].codewords.length;\r\n\tvar longerBlocksStartAt = result.length - 1;\r\n\twhile (longerBlocksStartAt >= 0)\r\n\t{\r\n\t\tvar numCodewords = result[longerBlocksStartAt].codewords.length;\r\n\t\tif (numCodewords == shorterBlocksTotalCodewords)\r\n\t\t{\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tlongerBlocksStartAt--;\r\n\t}\r\n\tlongerBlocksStartAt++;\r\n\t\r\n\tvar shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.ECCodewordsPerBlock;\r\n\t// The last elements of result may be 1 element longer;\r\n\t// first fill out as many elements as all of them have\r\n\tvar rawCodewordsOffset = 0;\r\n\tfor (var i = 0; i < shorterBlocksNumDataCodewords; i++)\r\n\t{\r\n\t\tfor (var j = 0; j < numResultBlocks; j++)\r\n\t\t{\r\n\t\t\tresult[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\r\n\t\t}\r\n\t}\r\n\t// Fill out the last data block in the longer ones\r\n\tfor (var j = longerBlocksStartAt; j < numResultBlocks; j++)\r\n\t{\r\n\t\tresult[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];\r\n\t}\r\n\t// Now add in error correction blocks\r\n\tvar max = result[0].codewords.length;\r\n\tfor (var i = shorterBlocksNumDataCodewords; i < max; i++)\r\n\t{\r\n\t\tfor (var j = 0; j < numResultBlocks; j++)\r\n\t\t{\r\n\t\t\tvar iOffset = j < longerBlocksStartAt?i:i + 1;\r\n\t\t\tresult[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction GF256Poly(field,  coefficients)\r\n{\r\n\tif (coefficients == null || coefficients.length == 0)\r\n\t{\r\n\t\tthrow new Error(\"QR Error: System.ArgumentException\");\r\n\t}\r\n\tthis.field = field;\r\n\tvar coefficientsLength = coefficients.length;\r\n\tif (coefficientsLength > 1 && coefficients[0] == 0)\r\n\t{\r\n\t\t// Leading term must be non-zero for anything except the constant polynomial \"0\"\r\n\t\tvar firstNonZero = 1;\r\n\t\twhile (firstNonZero < coefficientsLength && coefficients[firstNonZero] == 0)\r\n\t\t{\r\n\t\t\tfirstNonZero++;\r\n\t\t}\r\n\t\tif (firstNonZero == coefficientsLength)\r\n\t\t{\r\n\t\t\tthis.coefficients = field.Zero.coefficients;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.coefficients = new Array(coefficientsLength - firstNonZero);\r\n\t\t\tfor(var i=0;i<this.coefficients.length;i++)this.coefficients[i]=0;\r\n\t\t\t//Array.Copy(coefficients, firstNonZero, this.coefficients, 0, this.coefficients.length);\r\n\t\t\tfor(var ci=0;ci<this.coefficients.length;ci++)this.coefficients[ci]=coefficients[firstNonZero+ci];\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tthis.coefficients = coefficients;\r\n\t}\r\n\t\r\n\tthis.__defineGetter__(\"Zero\", function()\r\n\t{\r\n\t\treturn this.coefficients[0] == 0;\r\n\t});\r\n\tthis.__defineGetter__(\"Degree\", function()\r\n\t{\r\n\t\treturn this.coefficients.length - 1;\r\n\t});\r\n\tthis.__defineGetter__(\"Coefficients\", function()\r\n\t{\r\n\t\treturn this.coefficients;\r\n\t});\r\n\t\r\n\tthis.getCoefficient=function( degree)\r\n\t{\r\n\t\treturn this.coefficients[this.coefficients.length - 1 - degree];\r\n\t}\r\n\t\r\n\tthis.evaluateAt=function( a)\r\n\t{\r\n\t\tif (a == 0)\r\n\t\t{\r\n\t\t\t// Just return the x^0 coefficient\r\n\t\t\treturn this.getCoefficient(0);\r\n\t\t}\r\n\t\tvar size = this.coefficients.length;\r\n\t\tif (a == 1)\r\n\t\t{\r\n\t\t\t// Just the sum of the coefficients\r\n\t\t\tvar result = 0;\r\n\t\t\tfor (var i = 0; i < size; i++)\r\n\t\t\t{\r\n\t\t\t\tresult = GF256.addOrSubtract(result, this.coefficients[i]);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\tvar result2 = this.coefficients[0];\r\n\t\tfor (var i = 1; i < size; i++)\r\n\t\t{\r\n\t\t\tresult2 = GF256.addOrSubtract(this.field.multiply(a, result2), this.coefficients[i]);\r\n\t\t}\r\n\t\treturn result2;\r\n\t}\r\n\t\r\n\tthis.addOrSubtract=function( other)\r\n\t\t{\r\n\t\t\tif (this.field != other.field)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: GF256Polys do not have same GF256 field\");\r\n\t\t\t}\r\n\t\t\tif (this.Zero)\r\n\t\t\t{\r\n\t\t\t\treturn other;\r\n\t\t\t}\r\n\t\t\tif (other.Zero)\r\n\t\t\t{\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar smallerCoefficients = this.coefficients;\r\n\t\t\tvar largerCoefficients = other.coefficients;\r\n\t\t\tif (smallerCoefficients.length > largerCoefficients.length)\r\n\t\t\t{\r\n\t\t\t\tvar temp = smallerCoefficients;\r\n\t\t\t\tsmallerCoefficients = largerCoefficients;\r\n\t\t\t\tlargerCoefficients = temp;\r\n\t\t\t}\r\n\t\t\tvar sumDiff = new Array(largerCoefficients.length);\r\n\t\t\tvar lengthDiff = largerCoefficients.length - smallerCoefficients.length;\r\n\t\t\t// Copy high-order terms only found in higher-degree polynomial's coefficients\r\n\t\t\t//Array.Copy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\r\n\t\t\tfor(var ci=0;ci<lengthDiff;ci++)sumDiff[ci]=largerCoefficients[ci];\r\n\t\t\t\r\n\t\t\tfor (var i = lengthDiff; i < largerCoefficients.length; i++)\r\n\t\t\t{\r\n\t\t\t\tsumDiff[i] = GF256.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn new GF256Poly(field, sumDiff);\r\n\t}\r\n\tthis.multiply1=function( other)\r\n\t\t{\r\n\t\t\tif (this.field!=other.field)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: GF256Polys do not have same GF256 field\");\r\n\t\t\t}\r\n\t\t\tif (this.Zero || other.Zero)\r\n\t\t\t{\r\n\t\t\t\treturn this.field.Zero;\r\n\t\t\t}\r\n\t\t\tvar aCoefficients = this.coefficients;\r\n\t\t\tvar aLength = aCoefficients.length;\r\n\t\t\tvar bCoefficients = other.coefficients;\r\n\t\t\tvar bLength = bCoefficients.length;\r\n\t\t\tvar product = new Array(aLength + bLength - 1);\r\n\t\t\tfor (var i = 0; i < aLength; i++)\r\n\t\t\t{\r\n\t\t\t\tvar aCoeff = aCoefficients[i];\r\n\t\t\t\tfor (var j = 0; j < bLength; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tproduct[i + j] = GF256.addOrSubtract(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn new GF256Poly(this.field, product);\r\n\t\t}\r\n\tthis.multiply2=function( scalar)\r\n\t\t{\r\n\t\t\tif (scalar == 0)\r\n\t\t\t{\r\n\t\t\t\treturn this.field.Zero;\r\n\t\t\t}\r\n\t\t\tif (scalar == 1)\r\n\t\t\t{\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\tvar size = this.coefficients.length;\r\n\t\t\tvar product = new Array(size);\r\n\t\t\tfor (var i = 0; i < size; i++)\r\n\t\t\t{\r\n\t\t\t\tproduct[i] = this.field.multiply(this.coefficients[i], scalar);\r\n\t\t\t}\r\n\t\t\treturn new GF256Poly(this.field, product);\r\n\t\t}\r\n\tthis.multiplyByMonomial=function( degree,  coefficient)\r\n\t\t{\r\n\t\t\tif (degree < 0)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: System.ArgumentException\");\r\n\t\t\t}\r\n\t\t\tif (coefficient == 0)\r\n\t\t\t{\r\n\t\t\t\treturn this.field.Zero;\r\n\t\t\t}\r\n\t\t\tvar size = this.coefficients.length;\r\n\t\t\tvar product = new Array(size + degree);\r\n\t\t\tfor(var i=0;i<product.length;i++)product[i]=0;\r\n\t\t\tfor (var i = 0; i < size; i++)\r\n\t\t\t{\r\n\t\t\t\tproduct[i] = this.field.multiply(this.coefficients[i], coefficient);\r\n\t\t\t}\r\n\t\t\treturn new GF256Poly(this.field, product);\r\n\t\t}\r\n\tthis.divide=function( other)\r\n\t\t{\r\n\t\t\tif (this.field!=other.field)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: GF256Polys do not have same GF256 field\");\r\n\t\t\t}\r\n\t\t\tif (other.Zero)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: Divide by 0\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar quotient = this.field.Zero;\r\n\t\t\tvar remainder = this;\r\n\t\t\t\r\n\t\t\tvar denominatorLeadingTerm = other.getCoefficient(other.Degree);\r\n\t\t\tvar inverseDenominatorLeadingTerm = this.field.inverse(denominatorLeadingTerm);\r\n\t\t\t\r\n\t\t\twhile (remainder.Degree >= other.Degree && !remainder.Zero)\r\n\t\t\t{\r\n\t\t\t\tvar degreeDifference = remainder.Degree - other.Degree;\r\n\t\t\t\tvar scale = this.field.multiply(remainder.getCoefficient(remainder.Degree), inverseDenominatorLeadingTerm);\r\n\t\t\t\tvar term = other.multiplyByMonomial(degreeDifference, scale);\r\n\t\t\t\tvar iterationQuotient = this.field.buildMonomial(degreeDifference, scale);\r\n\t\t\t\tquotient = quotient.addOrSubtract(iterationQuotient);\r\n\t\t\t\tremainder = remainder.addOrSubtract(term);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn new Array(quotient, remainder);\r\n\t\t}\r\n}","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction GF256( primitive)\r\n{\r\n\tthis.expTable = new Array(256);\r\n\tthis.logTable = new Array(256);\r\n\tvar x = 1;\r\n\tfor (var i = 0; i < 256; i++)\r\n\t{\r\n\t\tthis.expTable[i] = x;\r\n\t\tx <<= 1; // x = x * 2; we're assuming the generator alpha is 2\r\n\t\tif (x >= 0x100)\r\n\t\t{\r\n\t\t\tx ^= primitive;\r\n\t\t}\r\n\t}\r\n\tfor (var i = 0; i < 255; i++)\r\n\t{\r\n\t\tthis.logTable[this.expTable[i]] = i;\r\n\t}\r\n\t// logTable[0] == 0 but this should never be used\r\n\tvar at0=new Array(1);at0[0]=0;\r\n\tthis.zero = new GF256Poly(this, new Array(at0));\r\n\tvar at1=new Array(1);at1[0]=1;\r\n\tthis.one = new GF256Poly(this, new Array(at1));\r\n\t\r\n\tthis.__defineGetter__(\"Zero\", function()\r\n\t{\r\n\t\treturn this.zero;\r\n\t});\r\n\tthis.__defineGetter__(\"One\", function()\r\n\t{\r\n\t\treturn this.one;\r\n\t});\r\n\tthis.buildMonomial=function( degree,  coefficient)\r\n\t\t{\r\n\t\t\tif (degree < 0)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: System.ArgumentException\");\r\n\t\t\t}\r\n\t\t\tif (coefficient == 0)\r\n\t\t\t{\r\n\t\t\t\treturn this.zero;\r\n\t\t\t}\r\n\t\t\tvar coefficients = new Array(degree + 1);\r\n\t\t\tfor(var i=0;i<coefficients.length;i++)coefficients[i]=0;\r\n\t\t\tcoefficients[0] = coefficient;\r\n\t\t\treturn new GF256Poly(this, coefficients);\r\n\t\t}\r\n\tthis.exp=function( a)\r\n\t\t{\r\n\t\t\treturn this.expTable[a];\r\n\t\t}\r\n\tthis.log=function( a)\r\n\t\t{\r\n\t\t\tif (a == 0)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: System.ArgumentException\");\r\n\t\t\t}\r\n\t\t\treturn this.logTable[a];\r\n\t\t}\r\n\tthis.inverse=function( a)\r\n\t\t{\r\n\t\t\tif (a == 0)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: System.ArithmeticException\");\r\n\t\t\t}\r\n\t\t\treturn this.expTable[255 - this.logTable[a]];\r\n\t\t}\r\n\tthis.multiply=function( a,  b)\r\n\t\t{\r\n\t\t\tif (a == 0 || b == 0)\r\n\t\t\t{\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tif (a == 1)\r\n\t\t\t{\r\n\t\t\t\treturn b;\r\n\t\t\t}\r\n\t\t\tif (b == 1)\r\n\t\t\t{\r\n\t\t\t\treturn a;\r\n\t\t\t}\r\n\t\t\treturn this.expTable[(this.logTable[a] + this.logTable[b]) % 255];\r\n\t\t}\t\t\r\n}\r\n\r\nGF256.QR_CODE_FIELD = new GF256(0x011D);\r\nGF256.DATA_MATRIX_FIELD = new GF256(0x012D);\r\n\r\nGF256.addOrSubtract=function( a,  b)\r\n{\r\n\treturn a ^ b;\r\n}","/*\r\n   Copyright 2011 Lazar Laszlo (lazarsoft@gmail.com, www.lazarsoft.info)\r\n   \r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n\r\n\r\nvar qrcode = {};\r\nqrcode.imagedata = null;\r\nqrcode.width = 0;\r\nqrcode.height = 0;\r\nqrcode.qrCodeSymbol = null;\r\nqrcode.debug = false;\r\nqrcode.maxImgSize = 1024*1024;\r\n\r\nqrcode.sizeOfDataLengthInfo =  [  [ 10, 9, 8, 8 ],  [ 12, 11, 16, 10 ],  [ 14, 13, 16, 12 ] ];\r\n\r\nqrcode.callback = null;\r\n\r\nqrcode.decode = function(imageData) {\r\n    qrcode.imagedata = imageData;\r\n    qrcode.width = imageData.width;\r\n    qrcode.height = imageData.height;\r\n    qrcode.result = qrcode.process();\r\n    if(qrcode.callback!=null)\r\n        qrcode.callback(qrcode.result);\r\n    return qrcode.result;\r\n}\r\n\r\nqrcode.isUrl = function(s)\r\n{\r\n    try {\r\n        new URL(s);\r\n        return true;\r\n    } catch(e) {\r\n        return false;\r\n    }\r\n}\r\n\r\nqrcode.decode_url = function (s)\r\n{\r\n  var escaped = \"\";\r\n  try{\r\n    escaped = escape( s );\r\n  }\r\n  catch(e)\r\n  {\r\n    console.log(e);\r\n    escaped = s;\r\n  }\r\n  var ret = \"\";\r\n  try{\r\n    ret = decodeURIComponent( escaped );\r\n  }\r\n  catch(e)\r\n  {\r\n    console.log(e);\r\n    ret = escaped;\r\n  }\r\n  return ret;\r\n}\r\n\r\nqrcode.decode_utf8 = function ( s )\r\n{\r\n    if(qrcode.isUrl(s))\r\n        return qrcode.decode_url(s);\r\n    else\r\n        return s;\r\n}\r\n\r\nqrcode.process = function(){\r\n    var inputRgba = qrcode.imagedata.data;\r\n    // asign the grayscale and binary image within the rgba buffer as the rgba image will not be needed anymore\r\n    var offset = 0;\r\n    var grayscaleImage = new Uint8ClampedArray(inputRgba.buffer, offset, qrcode.width * qrcode.height);\r\n    offset += qrcode.width * qrcode.height;\r\n    var binaryImage = new Uint8ClampedArray(inputRgba.buffer, offset, qrcode.width * qrcode.height);\r\n    offset += qrcode.width * qrcode.height;\r\n    var binarizerBufferSize = Binarizer.calculateRequiredBufferSize(qrcode.width, qrcode.height);\r\n    var binarizerBuffer = new Uint8ClampedArray(inputRgba.buffer, offset, binarizerBufferSize);\r\n\r\n    qrcode.grayscale(inputRgba, qrcode.width, qrcode.height, grayscaleImage);\r\n    Binarizer.binarize(grayscaleImage, qrcode.width, qrcode.height, binaryImage, binarizerBuffer);\r\n\r\n    var debugImage;\r\n    if(qrcode.debug)\r\n    {\r\n        debugImage = new ImageData(new Uint8ClampedArray(qrcode.width * qrcode.height * 4), qrcode.width, qrcode.height);\r\n        for (var y = 0; y < qrcode.height; y++)\r\n        {\r\n            for (var x = 0; x < qrcode.width; x++)\r\n            {\r\n                var point = (x * 4) + (y * qrcode.width * 4);\r\n                var pixel = /*grayscaleImage[y * qrcode.width + x];*/ binaryImage[y * qrcode.width + x]? 0 : 255;\r\n                debugImage.data[point] = pixel;\r\n                debugImage.data[point+1] = pixel;\r\n                debugImage.data[point+2] = pixel;\r\n                debugImage.data[point+3] = 255; // alpha\r\n            }\r\n        }\r\n    }\r\n\r\n    try {\r\n        var detector = new Detector(binaryImage);\r\n\r\n        var qRCodeMatrix = detector.detect(); // throws if no qr code was found\r\n\r\n        if (qrcode.debug) {\r\n            for (var y = 0; y < qRCodeMatrix.bits.Height; y++) {\r\n                for (var x = 0; x < qRCodeMatrix.bits.Width; x++) {\r\n                    var point = (x * 4 * 2) + (y * 2 * qrcode.width * 4);\r\n                    var isSet = qRCodeMatrix.bits.get_Renamed(x, y)\r\n                    debugImage.data[point] = isSet ? 0 : 255;\r\n                    debugImage.data[point + 1] = isSet ? 0 : 255;\r\n                    debugImage.data[point + 2] = 255;\r\n                }\r\n            }\r\n        }\r\n    } finally {\r\n        if (qrcode.debug) {\r\n            sendDebugImage(debugImage);\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    var reader = Decoder.decode(qRCodeMatrix.bits);\r\n    var data = reader.DataByte;\r\n    var str=\"\";\r\n    for(var i=0;i<data.length;i++)\r\n    {\r\n        for(var j=0;j<data[i].length;j++)\r\n            str+=String.fromCharCode(data[i][j]);\r\n    }\r\n    \r\n    return qrcode.decode_utf8(str);\r\n}\r\n\r\n\r\nqrcode.grayscale = function(inputRgba, width, height, out_grayscale)\r\n{\r\n    for (var y = 0; y < height; y++)\r\n    {\r\n        for (var x = 0; x < width; x++)\r\n        {\r\n            var index = y*width + x;\r\n            var rgbaIndex = 4 * index;\r\n            // quick luma integer approximation (https://en.wikipedia.org/wiki/YUV#Full_swing_for_BT.601)\r\n            out_grayscale[index] = (77 * inputRgba[rgbaIndex] + 150 * inputRgba[rgbaIndex+1] +\r\n                29 * inputRgba[rgbaIndex+2] + 128) >> 8;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction URShift( number,  bits)\r\n{\r\n    if (number >= 0)\r\n        return number >> bits;\r\n    else\r\n        return (number >> bits) + (2 << ~bits);\r\n}","self.onmessage = event => {\n    const type = event.data.type;\n    const data = event.data.data;\n    if (type === 'setDebug') {\n        qrcode.debug = data;\n    } else if (type === 'decode') {\n        let result = null;\n        try {\n            result = qrcode.decode(data);\n        } catch(e) {\n            if (!e.message.startsWith('QR Error')) {\n                throw e; // some unexpected error\n            }\n        } finally {\n            self.postMessage({\n                type: 'qrResult',\n                data: result\n            });\n        }\n    }\n};\n\n\nfunction sendDebugImage(debugImage) {\n    self.postMessage({\n        type: 'debugImage',\n        data: debugImage\n    }, [debugImage.data.buffer]);\n}","// Implementation taken from https://github.com/nimiq-design/nimiqode and follows the idea of\n// https://github.com/zxing/zxing/blob/master/core/src/main/java/com/google/zxing/common/HybridBinarizer.java\n\n\nclass Binarizer {\n    static calculateRequiredBufferSize(imageWidth, imageHeight) {\n        // memory for threshold for every block\n        const [, blockCountX, blockCountY] = Binarizer._calculateBlockSize(imageWidth, imageHeight);\n        return blockCountX * blockCountY;\n    }\n\n    static _calculateBlockSize(imageWidth, imageHeight) {\n        const blockSize = Math.max(\n            Math.floor(Math.min(imageWidth, imageHeight) / Binarizer.TARGET_BLOCK_COUNT_ALONG_SHORTER_SIDE),\n            Binarizer.MIN_BLOCK_SIZE\n        );\n\n        const blockCountX = Math.ceil(imageWidth / blockSize);\n        const blockCountY = Math.ceil(imageHeight / blockSize);\n        return [blockSize, blockCountX, blockCountY];\n    }\n\n    static binarize(inputGrayscale, imageWidth, imageHeight, outputBinary = inputGrayscale, buffer = null) {\n        const [blockSize, blockCountX, blockCountY] =\n            Binarizer._calculateBlockSize(imageWidth, imageHeight);\n        let blockThresholds;\n        if (buffer) {\n            if (!(buffer instanceof Uint8ClampedArray) || buffer.byteLength !== blockCountX * blockCountY) {\n                throw new Error('QR Error: Illegal Buffer.');\n            }\n            blockThresholds = buffer;\n        } else {\n            blockThresholds = new Uint8ClampedArray(blockCountX * blockCountY);\n        }\n        // calculate the thresholds for the blocks\n        for (let blockIndexY=0; blockIndexY < blockCountY; ++blockIndexY) {\n            for (let blockIndexX=0; blockIndexX < blockCountX; ++blockIndexX) {\n                const threshold = Binarizer._calculateBlockThreshold(inputGrayscale, imageWidth, imageHeight,\n                    blockIndexX, blockIndexY, blockCountX, blockSize, blockThresholds);\n                blockThresholds[blockIndexY * blockCountX + blockIndexX] = threshold;\n            }\n        }\n        for (let blockIndexY=0; blockIndexY < blockCountY; ++blockIndexY) {\n            for (let blockIndexX=0; blockIndexX < blockCountX; ++blockIndexX) {\n                // calculate the average threshold over a 5x5 grid to essentially make the area bigger and increase\n                // the chance that we have a bright and dark pixel in the area for good threshold computation. By\n                // keeping the real block size small we ensure a good local threshold estimate (the step size in x and\n                // y direction is essentially smaller).\n                //\n                // Instead of (min+max)/2 like in _calculateBlockThreshold, here we use a real average to be more prune\n                // against outliers. E.g. imagine whats behind the scanned screen is really dark, the screen (including\n                // dark pixels on the screen) rather bright. In this case, we want the threshold on the screen to be\n                // rather bright and therefore not to factor in the background too much.\n                let sum = 0;\n                for (let i = -2; i<=2; ++i) {\n                    for (let j = -2; j<=2; ++j) {\n                        const neighborIndexX = Math.max(0, Math.min(blockCountX-1, blockIndexX+i));\n                        const neighborIndexY = Math.max(0, Math.min(blockCountY-1, blockIndexY+j));\n                        sum += blockThresholds[neighborIndexY * blockCountX + neighborIndexX];\n                    }\n                }\n                Binarizer._applyThresholdToBlock(inputGrayscale, imageWidth, imageHeight, blockIndexX, blockIndexY,\n                    blockSize, sum / 25, outputBinary);\n            }\n        }\n    }\n\n    static _calculateBlockThreshold(inputGrayscale, imageWidth, imageHeight, blockIndexX, blockIndexY, blockCountX, blockSize,\n                                    blockThresholds) {\n        let min = 0xFF, max = 0;\n        const left = Math.min(blockIndexX * blockSize, imageWidth - blockSize);\n        const top = Math.min(blockIndexY * blockSize, imageHeight - blockSize);\n        let rowStart = top * imageWidth + left;\n        for (let y=0; y<blockSize; ++y) {\n            for (let x=0; x<blockSize; ++x) {\n                const pixel = inputGrayscale[rowStart + x];\n                if (pixel < min) {\n                    min = pixel;\n                }\n                if (pixel > max) {\n                    max = pixel;\n                }\n            }\n            rowStart += imageWidth;\n        }\n        if (max - min > Binarizer.MIN_DYNAMIC_RANGE) {\n            // The values span a minimum dynamic range, so we can assume we have bright and dark pixels. Return the\n            // average of min and max as threshold. We could also compute the real average of all pixel but following\n            // the assumption that the nimiqode consists of bright and dark pixels and essentially not much in between\n            // then by (min + max)/2 we make the cut really between those two classes. If using the average over all\n            // pixel then in a block of mostly bright pixels and few dark pixels, the avg would tend to the bright side\n            // and darker bright pixels could be interpreted as dark.\n            return (min + max) / 2;\n        } else {\n            // We have a low dynamic range and assume the block is of solid bright or dark color.\n            // TODO this zxing implementation is somewhat weird. Think of a better threshold propagation strategy.\n            // Ideas:\n            // - start the propagation in the middle of the screen following the assumption that the nimiqode / screen\n            //   is centered in the image. By this, we avoid propagation of thresholds from the surrounding to the\n            //   screen which hold the only interesting information to us.\n            // - Combine the threshold propagation with edge detection\n            // - When propagating a threshold adapt it by comparing the average brightness in my block to the average\n            //   brightness in block we are propagating from\n            if (blockIndexX === 0 || blockIndexY === 0) {\n                // cant compare to the neighbours. Assume it's a light background\n                return min / 2;\n            } else {\n                const myIndex = blockIndexY * blockCountX + blockIndexX;\n                const leftBlockThreshold = blockThresholds[myIndex - 1];\n                const topBlockThreshold = blockThresholds[myIndex - blockCountX];\n                const topLeftBlockThreshold = blockCountX[myIndex - blockCountX - 1];\n                const neighbourAverage = (leftBlockThreshold + topBlockThreshold + topLeftBlockThreshold) / 3;\n                if (neighbourAverage > min) {\n                    return neighbourAverage;\n                } else {\n                    return min / 2;\n                }\n            }\n        }\n    }\n\n\n    static _applyThresholdToBlock(inputGrayscale, imageWidth, imageHeight, blockIndexX, blockIndexY, blockSize, threshold,\n                                 outputBinary = inputGrayscale) {\n        const left = Math.min(blockIndexX * blockSize, imageWidth - blockSize);\n        const top = Math.min(blockIndexY * blockSize, imageHeight - blockSize);\n        let rowStart = top * imageWidth + left;\n        for (let y=0; y<blockSize; ++y) {\n            for (let x=0; x<blockSize; ++x) {\n                const index = rowStart + x;\n                outputBinary[index] = inputGrayscale[index] <= threshold;\n            }\n            rowStart += imageWidth;\n        }\n    }\n}\nBinarizer.TARGET_BLOCK_COUNT_ALONG_SHORTER_SIDE = 40;\nBinarizer.MIN_BLOCK_SIZE = 16;\nBinarizer.MIN_DYNAMIC_RANGE = 12; // if the dynamic range in a block is below this value it's assumed to be single color","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nvar GridSampler = {};\r\n\r\nGridSampler.checkAndNudgePoints=function( image,  points)\r\n\t\t{\r\n\t\t\tvar width = qrcode.width;\r\n\t\t\tvar height = qrcode.height;\r\n\t\t\t// Check and nudge points from start until we see some that are OK:\r\n\t\t\tvar nudged = true;\r\n\t\t\tfor (var offset = 0; offset < points.length && nudged; offset += 2)\r\n\t\t\t{\r\n\t\t\t\tvar x = Math.floor (points[offset]);\r\n\t\t\t\tvar y = Math.floor( points[offset + 1]);\r\n\t\t\t\tif (x < - 1 || x > width || y < - 1 || y > height)\r\n\t\t\t\t{\r\n\t\t\t\t\tthrow new Error(\"QR Error: Error.checkAndNudgePoints\");\r\n\t\t\t\t}\r\n\t\t\t\tnudged = false;\r\n\t\t\t\tif (x == - 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoints[offset] = 0.0;\r\n\t\t\t\t\tnudged = true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (x == width)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoints[offset] = width - 1;\r\n\t\t\t\t\tnudged = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (y == - 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoints[offset + 1] = 0.0;\r\n\t\t\t\t\tnudged = true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (y == height)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoints[offset + 1] = height - 1;\r\n\t\t\t\t\tnudged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Check and nudge points from end:\r\n\t\t\tnudged = true;\r\n\t\t\tfor (var offset = points.length - 2; offset >= 0 && nudged; offset -= 2)\r\n\t\t\t{\r\n\t\t\t\tvar x = Math.floor( points[offset]);\r\n\t\t\t\tvar y = Math.floor( points[offset + 1]);\r\n\t\t\t\tif (x < - 1 || x > width || y < - 1 || y > height)\r\n\t\t\t\t{\r\n\t\t\t\t\tthrow new Error(\"QR Error: Error.checkAndNudgePoints\");\r\n\t\t\t\t}\r\n\t\t\t\tnudged = false;\r\n\t\t\t\tif (x == - 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoints[offset] = 0.0;\r\n\t\t\t\t\tnudged = true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (x == width)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoints[offset] = width - 1;\r\n\t\t\t\t\tnudged = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (y == - 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoints[offset + 1] = 0.0;\r\n\t\t\t\t\tnudged = true;\r\n\t\t\t\t}\r\n\t\t\t\telse if (y == height)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoints[offset + 1] = height - 1;\r\n\t\t\t\t\tnudged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\r\n\r\nGridSampler.sampleGrid3=function( image,  dimension,  transform)\r\n\t\t{\r\n\t\t\tvar bits = new BitMatrix(dimension);\r\n\t\t\tvar points = new Array(dimension << 1);\r\n\t\t\tfor (var y = 0; y < dimension; y++)\r\n\t\t\t{\r\n\t\t\t\tvar max = points.length;\r\n\t\t\t\tvar iValue =  y + 0.5;\r\n\t\t\t\tfor (var x = 0; x < max; x += 2)\r\n\t\t\t\t{\r\n\t\t\t\t\tpoints[x] =  (x >> 1) + 0.5;\r\n\t\t\t\t\tpoints[x + 1] = iValue;\r\n\t\t\t\t}\r\n\t\t\t\ttransform.transformPoints1(points);\r\n\t\t\t\t// Quick check to see if points transformed to something inside the image;\r\n\t\t\t\t// sufficient to check the endpoints\r\n\t\t\t\tGridSampler.checkAndNudgePoints(image, points);\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (var x = 0; x < max; x += 2)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//var xpoint = (Math.floor( points[x]) * 4) + (Math.floor( points[x + 1]) * qrcode.width * 4);\r\n                        var bit = image[Math.floor( points[x])+ qrcode.width* Math.floor( points[x + 1])];\r\n\t\t\t\t\t\t//qrcode.imagedata.data[xpoint] = bit?255:0;\r\n\t\t\t\t\t\t//qrcode.imagedata.data[xpoint+1] = bit?255:0;\r\n\t\t\t\t\t\t//qrcode.imagedata.data[xpoint+2] = 0;\r\n\t\t\t\t\t\t//qrcode.imagedata.data[xpoint+3] = 255;\r\n\t\t\t\t\t\t//bits[x >> 1][ y]=bit;\r\n\t\t\t\t\t\tif(bit)\r\n\t\t\t\t\t\t\tbits.set_Renamed(x >> 1, y);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch ( aioobe)\r\n\t\t\t\t{\r\n\t\t\t\t\t// This feels wrong, but, sometimes if the finder patterns are misidentified, the resulting\r\n\t\t\t\t\t// transform gets \"twisted\" such that it maps a straight line of points to a set of points\r\n\t\t\t\t\t// whose endpoints are in bounds, but others are not. There is probably some mathematical\r\n\t\t\t\t\t// way to detect this about the transformation that I don't know yet.\r\n\t\t\t\t\t// This results in an ugly runtime exception despite our clever checks above -- can't have\r\n\t\t\t\t\t// that. We could check each point's coordinates but that feels duplicative. We settle for\r\n\t\t\t\t\t// catching and wrapping ArrayIndexOutOfBoundsException.\r\n\t\t\t\t\tthrow new Error(\"QR Error: Error.checkAndNudgePoints\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn bits;\r\n\t\t}\r\n\r\nGridSampler.sampleGridx=function( image,  dimension,  p1ToX,  p1ToY,  p2ToX,  p2ToY,  p3ToX,  p3ToY,  p4ToX,  p4ToY,  p1FromX,  p1FromY,  p2FromX,  p2FromY,  p3FromX,  p3FromY,  p4FromX,  p4FromY)\r\n{\r\n\tvar transform = PerspectiveTransform.quadrilateralToQuadrilateral(p1ToX, p1ToY, p2ToX, p2ToY, p3ToX, p3ToY, p4ToX, p4ToY, p1FromX, p1FromY, p2FromX, p2FromY, p3FromX, p3FromY, p4FromX, p4FromY);\r\n\t\t\t\r\n\treturn GridSampler.sampleGrid3(image, dimension, transform);\r\n}","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nvar DataMask = {};\r\n\r\nDataMask.forReference = function(reference)\r\n{\r\n\tif (reference < 0 || reference > 7)\r\n\t{\r\n\t\tthrow new Error(\"QR Error: System.ArgumentException\");\r\n\t}\r\n\treturn DataMask.DATA_MASKS[reference];\r\n}\r\n\r\nfunction DataMask000()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\treturn ((i + j) & 0x01) == 0;\r\n\t}\r\n}\r\n\r\nfunction DataMask001()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\treturn (i & 0x01) == 0;\r\n\t}\r\n}\r\n\r\nfunction DataMask010()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\treturn j % 3 == 0;\r\n\t}\r\n}\r\n\r\nfunction DataMask011()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\treturn (i + j) % 3 == 0;\r\n\t}\r\n}\r\n\r\nfunction DataMask100()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\treturn (((URShift(i, 1)) + (j / 3)) & 0x01) == 0;\r\n\t}\r\n}\r\n\r\nfunction DataMask101()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\tvar temp = i * j;\r\n\t\treturn (temp & 0x01) + (temp % 3) == 0;\r\n\t}\r\n}\r\n\r\nfunction DataMask110()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\tvar temp = i * j;\r\n\t\treturn (((temp & 0x01) + (temp % 3)) & 0x01) == 0;\r\n\t}\r\n}\r\nfunction DataMask111()\r\n{\r\n\tthis.unmaskBitMatrix=function(bits,  dimension)\r\n\t{\r\n\t\tfor (var i = 0; i < dimension; i++)\r\n\t\t{\r\n\t\t\tfor (var j = 0; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tif (this.isMasked(i, j))\r\n\t\t\t\t{\r\n\t\t\t\t\tbits.flip(j, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tthis.isMasked=function( i,  j)\r\n\t{\r\n\t\treturn ((((i + j) & 0x01) + ((i * j) % 3)) & 0x01) == 0;\r\n\t}\r\n}\r\n\r\nDataMask.DATA_MASKS = new Array(new DataMask000(), new DataMask001(), new DataMask010(), new DataMask011(), new DataMask100(), new DataMask101(), new DataMask110(), new DataMask111());\r\n\r\n","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nvar Decoder={};\r\nDecoder.rsDecoder = new ReedSolomonDecoder(GF256.QR_CODE_FIELD);\r\n\r\nDecoder.correctErrors=function( codewordBytes,  numDataCodewords)\r\n{\r\n\tvar numCodewords = codewordBytes.length;\r\n\t// First read into an array of ints\r\n\tvar codewordsInts = new Array(numCodewords);\r\n\tfor (var i = 0; i < numCodewords; i++)\r\n\t{\r\n\t\tcodewordsInts[i] = codewordBytes[i] & 0xFF;\r\n\t}\r\n\tvar numECCodewords = codewordBytes.length - numDataCodewords;\r\n\ttry\r\n\t{\r\n\t\tDecoder.rsDecoder.decode(codewordsInts, numECCodewords);\r\n\t\t//var corrector = new ReedSolomon(codewordsInts, numECCodewords);\r\n\t\t//corrector.correct();\r\n\t}\r\n\tcatch ( rse)\r\n\t{\r\n\t\tthrow rse;\r\n\t}\r\n\t// Copy back into array of bytes -- only need to worry about the bytes that were data\r\n\t// We don't care about errors in the error-correction codewords\r\n\tfor (var i = 0; i < numDataCodewords; i++)\r\n\t{\r\n\t\tcodewordBytes[i] =  codewordsInts[i];\r\n\t}\r\n}\r\n\r\nDecoder.decode=function(bits)\r\n{\r\n\tvar parser = new BitMatrixParser(bits);\r\n\tvar version = parser.readVersion();\r\n\tvar ecLevel = parser.readFormatInformation().ErrorCorrectionLevel;\r\n\t\r\n\t// Read codewords\r\n\tvar codewords = parser.readCodewords();\r\n\r\n\t// Separate into data blocks\r\n\tvar dataBlocks = DataBlock.getDataBlocks(codewords, version, ecLevel);\r\n\t\r\n\t// Count total number of data bytes\r\n\tvar totalBytes = 0;\r\n\tfor (var i = 0; i < dataBlocks.length; i++)\r\n\t{\r\n\t\ttotalBytes += dataBlocks[i].NumDataCodewords;\r\n\t}\r\n\tvar resultBytes = new Array(totalBytes);\r\n\tvar resultOffset = 0;\r\n\t\r\n\t// Error-correct and copy data blocks together into a stream of bytes\r\n\tfor (var j = 0; j < dataBlocks.length; j++)\r\n\t{\r\n\t\tvar dataBlock = dataBlocks[j];\r\n\t\tvar codewordBytes = dataBlock.Codewords;\r\n\t\tvar numDataCodewords = dataBlock.NumDataCodewords;\r\n\t\tDecoder.correctErrors(codewordBytes, numDataCodewords);\r\n\t\tfor (var i = 0; i < numDataCodewords; i++)\r\n\t\t{\r\n\t\t\tresultBytes[resultOffset++] = codewordBytes[i];\r\n\t\t}\r\n\t}\r\n\t\r\n\t// Decode the contents of that stream of bytes\r\n\tvar reader = new QRCodeDataBlockReader(resultBytes, version.VersionNumber, ecLevel.Bits);\r\n\treturn reader;\r\n\t//return DecodedBitStreamParser.decode(resultBytes, version, ecLevel);\r\n}\r\n","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction ReedSolomonDecoder(field)\r\n{\r\n\tthis.field = field;\r\n\tthis.decode=function(received,  twoS)\r\n\t{\r\n\t\t\tvar poly = new GF256Poly(this.field, received);\r\n\t\t\tvar syndromeCoefficients = new Array(twoS);\r\n\t\t\tfor(var i=0;i<syndromeCoefficients.length;i++)syndromeCoefficients[i]=0;\r\n\t\t\tvar dataMatrix = false;//this.field.Equals(GF256.DATA_MATRIX_FIELD);\r\n\t\t\tvar noError = true;\r\n\t\t\tfor (var i = 0; i < twoS; i++)\r\n\t\t\t{\r\n\t\t\t\t// Thanks to sanfordsquires for this fix:\r\n\t\t\t\tvar evalu = poly.evaluateAt(this.field.exp(dataMatrix?i + 1:i));\r\n\t\t\t\tsyndromeCoefficients[syndromeCoefficients.length - 1 - i] = evalu;\r\n\t\t\t\tif (evalu != 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tnoError = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (noError)\r\n\t\t\t{\r\n\t\t\t\treturn ;\r\n\t\t\t}\r\n\t\t\tvar syndrome = new GF256Poly(this.field, syndromeCoefficients);\r\n\t\t\tvar sigmaOmega = this.runEuclideanAlgorithm(this.field.buildMonomial(twoS, 1), syndrome, twoS);\r\n\t\t\tvar sigma = sigmaOmega[0];\r\n\t\t\tvar omega = sigmaOmega[1];\r\n\t\t\tvar errorLocations = this.findErrorLocations(sigma);\r\n\t\t\tvar errorMagnitudes = this.findErrorMagnitudes(omega, errorLocations, dataMatrix);\r\n\t\t\tfor (var i = 0; i < errorLocations.length; i++)\r\n\t\t\t{\r\n\t\t\t\tvar position = received.length - 1 - this.field.log(errorLocations[i]);\r\n\t\t\t\tif (position < 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tthrow new Error(\"QR Error: ReedSolomonException Bad error location\");\r\n\t\t\t\t}\r\n\t\t\t\treceived[position] = GF256.addOrSubtract(received[position], errorMagnitudes[i]);\r\n\t\t\t}\r\n\t}\r\n\t\r\n\tthis.runEuclideanAlgorithm=function( a,  b,  R)\r\n\t\t{\r\n\t\t\t// Assume a's degree is >= b's\r\n\t\t\tif (a.Degree < b.Degree)\r\n\t\t\t{\r\n\t\t\t\tvar temp = a;\r\n\t\t\t\ta = b;\r\n\t\t\t\tb = temp;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar rLast = a;\r\n\t\t\tvar r = b;\r\n\t\t\tvar sLast = this.field.One;\r\n\t\t\tvar s = this.field.Zero;\r\n\t\t\tvar tLast = this.field.Zero;\r\n\t\t\tvar t = this.field.One;\r\n\t\t\t\r\n\t\t\t// Run Euclidean algorithm until r's degree is less than R/2\r\n\t\t\twhile (r.Degree >= Math.floor(R / 2))\r\n\t\t\t{\r\n\t\t\t\tvar rLastLast = rLast;\r\n\t\t\t\tvar sLastLast = sLast;\r\n\t\t\t\tvar tLastLast = tLast;\r\n\t\t\t\trLast = r;\r\n\t\t\t\tsLast = s;\r\n\t\t\t\ttLast = t;\r\n\t\t\t\t\r\n\t\t\t\t// Divide rLastLast by rLast, with quotient in q and remainder in r\r\n\t\t\t\tif (rLast.Zero)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Oops, Euclidean algorithm already terminated?\r\n\t\t\t\t\tthrow new Error(\"QR Error: r_{i-1} was zero\");\r\n\t\t\t\t}\r\n\t\t\t\tr = rLastLast;\r\n\t\t\t\tvar q = this.field.Zero;\r\n\t\t\t\tvar denominatorLeadingTerm = rLast.getCoefficient(rLast.Degree);\r\n\t\t\t\tvar dltInverse = this.field.inverse(denominatorLeadingTerm);\r\n\t\t\t\twhile (r.Degree >= rLast.Degree && !r.Zero)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar degreeDiff = r.Degree - rLast.Degree;\r\n\t\t\t\t\tvar scale = this.field.multiply(r.getCoefficient(r.Degree), dltInverse);\r\n\t\t\t\t\tq = q.addOrSubtract(this.field.buildMonomial(degreeDiff, scale));\r\n\t\t\t\t\tr = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\r\n\t\t\t\t\t//r.EXE();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ts = q.multiply1(sLast).addOrSubtract(sLastLast);\r\n\t\t\t\tt = q.multiply1(tLast).addOrSubtract(tLastLast);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar sigmaTildeAtZero = t.getCoefficient(0);\r\n\t\t\tif (sigmaTildeAtZero == 0)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: ReedSolomonException sigmaTilde(0) was zero\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar inverse = this.field.inverse(sigmaTildeAtZero);\r\n\t\t\tvar sigma = t.multiply2(inverse);\r\n\t\t\tvar omega = r.multiply2(inverse);\r\n\t\t\treturn new Array(sigma, omega);\r\n\t\t}\r\n\tthis.findErrorLocations=function( errorLocator)\r\n\t\t{\r\n\t\t\t// This is a direct application of Chien's search\r\n\t\t\tvar numErrors = errorLocator.Degree;\r\n\t\t\tif (numErrors == 1)\r\n\t\t\t{\r\n\t\t\t\t// shortcut\r\n\t\t\t\treturn new Array(errorLocator.getCoefficient(1));\r\n\t\t\t}\r\n\t\t\tvar result = new Array(numErrors);\r\n\t\t\tvar e = 0;\r\n\t\t\tfor (var i = 1; i < 256 && e < numErrors; i++)\r\n\t\t\t{\r\n\t\t\t\tif (errorLocator.evaluateAt(i) == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[e] = this.field.inverse(i);\r\n\t\t\t\t\te++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (e != numErrors)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: Error locator degree does not match number of roots\");\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\tthis.findErrorMagnitudes=function( errorEvaluator,  errorLocations,  dataMatrix)\r\n\t\t{\r\n\t\t\t// This is directly applying Forney's Formula\r\n\t\t\tvar s = errorLocations.length;\r\n\t\t\tvar result = new Array(s);\r\n\t\t\tfor (var i = 0; i < s; i++)\r\n\t\t\t{\r\n\t\t\t\tvar xiInverse = this.field.inverse(errorLocations[i]);\r\n\t\t\t\tvar denominator = 1;\r\n\t\t\t\tfor (var j = 0; j < s; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i != j)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdenominator = this.field.multiply(denominator, GF256.addOrSubtract(1, this.field.multiply(errorLocations[j], xiInverse)));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tresult[i] = this.field.multiply(errorEvaluator.evaluateAt(xiInverse), this.field.inverse(denominator));\r\n\t\t\t\t// Thanks to sanfordsquires for this fix:\r\n\t\t\t\tif (dataMatrix)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = this.field.multiply(result[i], xiInverse);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n}","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction BitMatrixParser(bitMatrix)\r\n{\r\n\tvar dimension = bitMatrix.Dimension;\r\n\tif (dimension < 21 || (dimension & 0x03) != 1)\r\n\t{\r\n\t\tthrow new Error(\"QR Error: Error BitMatrixParser\");\r\n\t}\r\n\tthis.bitMatrix = bitMatrix;\r\n\tthis.parsedVersion = null;\r\n\tthis.parsedFormatInfo = null;\r\n\t\r\n\tthis.copyBit=function( i,  j,  versionBits)\r\n\t{\r\n\t\treturn this.bitMatrix.get_Renamed(i, j)?(versionBits << 1) | 0x1:versionBits << 1;\r\n\t}\r\n\t\r\n\tthis.readFormatInformation=function()\r\n\t{\r\n\t\t\tif (this.parsedFormatInfo != null)\r\n\t\t\t{\r\n\t\t\t\treturn this.parsedFormatInfo;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Read top-left format info bits\r\n\t\t\tvar formatInfoBits = 0;\r\n\t\t\tfor (var i = 0; i < 6; i++)\r\n\t\t\t{\r\n\t\t\t\tformatInfoBits = this.copyBit(i, 8, formatInfoBits);\r\n\t\t\t}\r\n\t\t\t// .. and skip a bit in the timing pattern ...\r\n\t\t\tformatInfoBits = this.copyBit(7, 8, formatInfoBits);\r\n\t\t\tformatInfoBits = this.copyBit(8, 8, formatInfoBits);\r\n\t\t\tformatInfoBits = this.copyBit(8, 7, formatInfoBits);\r\n\t\t\t// .. and skip a bit in the timing pattern ...\r\n\t\t\tfor (var j = 5; j >= 0; j--)\r\n\t\t\t{\r\n\t\t\t\tformatInfoBits = this.copyBit(8, j, formatInfoBits);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits);\r\n\t\t\tif (this.parsedFormatInfo != null)\r\n\t\t\t{\r\n\t\t\t\treturn this.parsedFormatInfo;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Hmm, failed. Try the top-right/bottom-left pattern\r\n\t\t\tvar dimension = this.bitMatrix.Dimension;\r\n\t\t\tformatInfoBits = 0;\r\n\t\t\tvar iMin = dimension - 8;\r\n\t\t\tfor (var i = dimension - 1; i >= iMin; i--)\r\n\t\t\t{\r\n\t\t\t\tformatInfoBits = this.copyBit(i, 8, formatInfoBits);\r\n\t\t\t}\r\n\t\t\tfor (var j = dimension - 7; j < dimension; j++)\r\n\t\t\t{\r\n\t\t\t\tformatInfoBits = this.copyBit(8, j, formatInfoBits);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits);\r\n\t\t\tif (this.parsedFormatInfo != null)\r\n\t\t\t{\r\n\t\t\t\treturn this.parsedFormatInfo;\r\n\t\t\t}\r\n\t\t\tthrow new Error(\"QR Error: Error readFormatInformation\");\r\n\t}\r\n\tthis.readVersion=function()\r\n\t\t{\r\n\t\t\t\r\n\t\t\tif (this.parsedVersion != null)\r\n\t\t\t{\r\n\t\t\t\treturn this.parsedVersion;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar dimension = this.bitMatrix.Dimension;\r\n\t\t\t\r\n\t\t\tvar provisionalVersion = (dimension - 17) >> 2;\r\n\t\t\tif (provisionalVersion <= 6)\r\n\t\t\t{\r\n\t\t\t\treturn Version.getVersionForNumber(provisionalVersion);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Read top-right version info: 3 wide by 6 tall\r\n\t\t\tvar versionBits = 0;\r\n\t\t\tvar ijMin = dimension - 11;\r\n\t\t\tfor (var j = 5; j >= 0; j--)\r\n\t\t\t{\r\n\t\t\t\tfor (var i = dimension - 9; i >= ijMin; i--)\r\n\t\t\t\t{\r\n\t\t\t\t\tversionBits = this.copyBit(i, j, versionBits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.parsedVersion = Version.decodeVersionInformation(versionBits);\r\n\t\t\tif (this.parsedVersion != null && this.parsedVersion.DimensionForVersion == dimension)\r\n\t\t\t{\r\n\t\t\t\treturn this.parsedVersion;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Hmm, failed. Try bottom left: 6 wide by 3 tall\r\n\t\t\tversionBits = 0;\r\n\t\t\tfor (var i = 5; i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\tfor (var j = dimension - 9; j >= ijMin; j--)\r\n\t\t\t\t{\r\n\t\t\t\t\tversionBits = this.copyBit(i, j, versionBits);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.parsedVersion = Version.decodeVersionInformation(versionBits);\r\n\t\t\tif (this.parsedVersion != null && this.parsedVersion.DimensionForVersion == dimension)\r\n\t\t\t{\r\n\t\t\t\treturn this.parsedVersion;\r\n\t\t\t}\r\n\t\t\tthrow new Error(\"QR Error: Error readVersion\");\r\n\t\t}\r\n\tthis.readCodewords=function()\r\n\t\t{\r\n\t\t\t\r\n\t\t\tvar formatInfo = this.readFormatInformation();\r\n\t\t\tvar version = this.readVersion();\r\n\t\t\t\r\n\t\t\t// Get the data mask for the format used in this QR Code. This will exclude\r\n\t\t\t// some bits from reading as we wind through the bit matrix.\r\n\t\t\tvar dataMask = DataMask.forReference( formatInfo.DataMask);\r\n\t\t\tvar dimension = this.bitMatrix.Dimension;\r\n\t\t\tdataMask.unmaskBitMatrix(this.bitMatrix, dimension);\r\n\t\t\t\r\n\t\t\tvar functionPattern = version.buildFunctionPattern();\r\n\t\t\t\r\n\t\t\tvar readingUp = true;\r\n\t\t\tvar result = new Array(version.TotalCodewords);\r\n\t\t\tvar resultOffset = 0;\r\n\t\t\tvar currentByte = 0;\r\n\t\t\tvar bitsRead = 0;\r\n\t\t\t// Read columns in pairs, from right to left\r\n\t\t\tfor (var j = dimension - 1; j > 0; j -= 2)\r\n\t\t\t{\r\n\t\t\t\tif (j == 6)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Skip whole column with vertical alignment pattern;\r\n\t\t\t\t\t// saves time and makes the other code proceed more cleanly\r\n\t\t\t\t\tj--;\r\n\t\t\t\t}\r\n\t\t\t\t// Read alternatingly from bottom to top then top to bottom\r\n\t\t\t\tfor (var count = 0; count < dimension; count++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar i = readingUp?dimension - 1 - count:count;\r\n\t\t\t\t\tfor (var col = 0; col < 2; col++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Ignore bits covered by the function pattern\r\n\t\t\t\t\t\tif (!functionPattern.get_Renamed(j - col, i))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Read a bit\r\n\t\t\t\t\t\t\tbitsRead++;\r\n\t\t\t\t\t\t\tcurrentByte <<= 1;\r\n\t\t\t\t\t\t\tif (this.bitMatrix.get_Renamed(j - col, i))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrentByte |= 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// If we've made a whole byte, save it off\r\n\t\t\t\t\t\t\tif (bitsRead == 8)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tresult[resultOffset++] =  currentByte;\r\n\t\t\t\t\t\t\t\tbitsRead = 0;\r\n\t\t\t\t\t\t\t\tcurrentByte = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treadingUp ^= true; // readingUp = !readingUp; // switch directions\r\n\t\t\t}\r\n\t\t\tif (resultOffset != version.TotalCodewords)\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(\"QR Error: Error readCodewords\");\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n}","/*\r\n  Ported to JavaScript by Lazar Laszlo 2011 \r\n  \r\n  lazarsoft@gmail.com, www.lazarsoft.info\r\n  \r\n*/\r\n\r\n/*\r\n*\r\n* Copyright 2007 ZXing authors\r\n*\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*      http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\n\r\nfunction QRCodeDataBlockReader(blocks,  version,  numErrorCorrectionCode)\r\n{\r\n\tthis.blockPointer = 0;\r\n\tthis.bitPointer = 7;\r\n\tthis.dataLength = 0;\r\n\tthis.blocks = blocks;\r\n\tthis.numErrorCorrectionCode = numErrorCorrectionCode;\r\n\tif (version <= 9)\r\n\t\tthis.dataLengthMode = 0;\r\n\telse if (version >= 10 && version <= 26)\r\n\t\tthis.dataLengthMode = 1;\r\n\telse if (version >= 27 && version <= 40)\r\n\t\tthis.dataLengthMode = 2;\r\n\t\t\r\n\tthis.getNextBits = function( numBits)\r\n\t\t{\t\t\t\r\n\t\t\tvar bits = 0;\r\n\t\t\tif (numBits < this.bitPointer + 1)\r\n\t\t\t{\r\n\t\t\t\t// next word fits into current data block\r\n\t\t\t\tvar mask = 0;\r\n\t\t\t\tfor (var i = 0; i < numBits; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tmask += (1 << i);\r\n\t\t\t\t}\r\n\t\t\t\tmask <<= (this.bitPointer - numBits + 1);\r\n\t\t\t\t\r\n\t\t\t\tbits = (this.blocks[this.blockPointer] & mask) >> (this.bitPointer - numBits + 1);\r\n\t\t\t\tthis.bitPointer -= numBits;\r\n\t\t\t\treturn bits;\r\n\t\t\t}\r\n\t\t\telse if (numBits < this.bitPointer + 1 + 8)\r\n\t\t\t{\r\n\t\t\t\t// next word crosses 2 data blocks\r\n\t\t\t\tvar mask1 = 0;\r\n\t\t\t\tfor (var i = 0; i < this.bitPointer + 1; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tmask1 += (1 << i);\r\n\t\t\t\t}\r\n\t\t\t\tbits = (this.blocks[this.blockPointer] & mask1) << (numBits - (this.bitPointer + 1));\r\n                this.blockPointer++;\r\n\t\t\t\tbits += ((this.blocks[this.blockPointer]) >> (8 - (numBits - (this.bitPointer + 1))));\r\n\t\t\t\t\r\n\t\t\t\tthis.bitPointer = this.bitPointer - numBits % 8;\r\n\t\t\t\tif (this.bitPointer < 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.bitPointer = 8 + this.bitPointer;\r\n\t\t\t\t}\r\n\t\t\t\treturn bits;\r\n\t\t\t}\r\n\t\t\telse if (numBits < this.bitPointer + 1 + 16)\r\n\t\t\t{\r\n\t\t\t\t// next word crosses 3 data blocks\r\n\t\t\t\tvar mask1 = 0; // mask of first block\r\n\t\t\t\tvar mask3 = 0; // mask of 3rd block\r\n\t\t\t\t//bitPointer + 1 : number of bits of the 1st block\r\n\t\t\t\t//8 : number of the 2nd block (note that use already 8bits because next word uses 3 data blocks)\r\n\t\t\t\t//numBits - (bitPointer + 1 + 8) : number of bits of the 3rd block \r\n\t\t\t\tfor (var i = 0; i < this.bitPointer + 1; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tmask1 += (1 << i);\r\n\t\t\t\t}\r\n\t\t\t\tvar bitsFirstBlock = (this.blocks[this.blockPointer] & mask1) << (numBits - (this.bitPointer + 1));\r\n\t\t\t\tthis.blockPointer++;\r\n\t\t\t\t\r\n\t\t\t\tvar bitsSecondBlock = this.blocks[this.blockPointer] << (numBits - (this.bitPointer + 1 + 8));\r\n\t\t\t\tthis.blockPointer++;\r\n\t\t\t\t\r\n\t\t\t\tfor (var i = 0; i < numBits - (this.bitPointer + 1 + 8); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tmask3 += (1 << i);\r\n\t\t\t\t}\r\n\t\t\t\tmask3 <<= 8 - (numBits - (this.bitPointer + 1 + 8));\r\n\t\t\t\tvar bitsThirdBlock = (this.blocks[this.blockPointer] & mask3) >> (8 - (numBits - (this.bitPointer + 1 + 8)));\r\n\t\t\t\t\r\n\t\t\t\tbits = bitsFirstBlock + bitsSecondBlock + bitsThirdBlock;\r\n\t\t\t\tthis.bitPointer = this.bitPointer - (numBits - 8) % 8;\r\n\t\t\t\tif (this.bitPointer < 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.bitPointer = 8 + this.bitPointer;\r\n\t\t\t\t}\r\n\t\t\t\treturn bits;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t}\r\n\tthis.NextMode=function()\r\n\t{\r\n\t\tif ((this.blockPointer > this.blocks.length - this.numErrorCorrectionCode - 2))\r\n\t\t\treturn 0;\r\n\t\telse\r\n\t\t\treturn this.getNextBits(4);\r\n\t}\r\n\tthis.getDataLength=function( modeIndicator)\r\n\t\t{\r\n\t\t\tvar index = 0;\r\n\t\t\twhile (true)\r\n\t\t\t{\r\n\t\t\t\tif ((modeIndicator >> index) == 1)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn this.getNextBits(qrcode.sizeOfDataLengthInfo[this.dataLengthMode][index]);\r\n\t\t}\r\n\tthis.getRomanAndFigureString=function( dataLength)\r\n\t\t{\r\n\t\t\tvar length = dataLength;\r\n\t\t\tvar intData = 0;\r\n\t\t\tvar strData = \"\";\r\n\t\t\tvar tableRomanAndFigure = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':');\r\n\t\t\tdo \r\n\t\t\t{\r\n\t\t\t\tif (length > 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tintData = this.getNextBits(11);\r\n\t\t\t\t\tvar firstLetter = Math.floor(intData / 45);\r\n\t\t\t\t\tvar secondLetter = intData % 45;\r\n\t\t\t\t\tstrData += tableRomanAndFigure[firstLetter];\r\n\t\t\t\t\tstrData += tableRomanAndFigure[secondLetter];\r\n\t\t\t\t\tlength -= 2;\r\n\t\t\t\t}\r\n\t\t\t\telse if (length == 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tintData = this.getNextBits(6);\r\n\t\t\t\t\tstrData += tableRomanAndFigure[intData];\r\n\t\t\t\t\tlength -= 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twhile (length > 0);\r\n\t\t\t\r\n\t\t\treturn strData;\r\n\t\t}\r\n\tthis.getFigureString=function( dataLength)\r\n\t\t{\r\n\t\t\tvar length = dataLength;\r\n\t\t\tvar intData = 0;\r\n\t\t\tvar strData = \"\";\r\n\t\t\tdo \r\n\t\t\t{\r\n\t\t\t\tif (length >= 3)\r\n\t\t\t\t{\r\n\t\t\t\t\tintData = this.getNextBits(10);\r\n\t\t\t\t\tif (intData < 100)\r\n\t\t\t\t\t\tstrData += \"0\";\r\n\t\t\t\t\tif (intData < 10)\r\n\t\t\t\t\t\tstrData += \"0\";\r\n\t\t\t\t\tlength -= 3;\r\n\t\t\t\t}\r\n\t\t\t\telse if (length == 2)\r\n\t\t\t\t{\r\n\t\t\t\t\tintData = this.getNextBits(7);\r\n\t\t\t\t\tif (intData < 10)\r\n\t\t\t\t\t\tstrData += \"0\";\r\n\t\t\t\t\tlength -= 2;\r\n\t\t\t\t}\r\n\t\t\t\telse if (length == 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tintData = this.getNextBits(4);\r\n\t\t\t\t\tlength -= 1;\r\n\t\t\t\t}\r\n\t\t\t\tstrData += intData;\r\n\t\t\t}\r\n\t\t\twhile (length > 0);\r\n\t\t\t\r\n\t\t\treturn strData;\r\n\t\t}\r\n\tthis.get8bitByteArray=function( dataLength)\r\n\t\t{\r\n\t\t\tvar length = dataLength;\r\n\t\t\tvar intData = 0;\r\n\t\t\tvar output = new Array();\r\n\t\t\t\r\n\t\t\tdo \r\n\t\t\t{\r\n\t\t\t\tintData = this.getNextBits(8);\r\n\t\t\t\toutput.push( intData);\r\n\t\t\t\tlength--;\r\n\t\t\t}\r\n\t\t\twhile (length > 0);\r\n\t\t\treturn output;\r\n\t\t}\r\n    this.getKanjiString=function( dataLength)\r\n\t\t{\r\n\t\t\tvar length = dataLength;\r\n\t\t\tvar intData = 0;\r\n\t\t\tvar unicodeString = \"\";\r\n\t\t\tdo \r\n\t\t\t{\r\n\t\t\t\tintData = this.getNextBits(13);\r\n\t\t\t\tvar lowerByte = intData % 0xC0;\r\n\t\t\t\tvar higherByte = intData / 0xC0;\r\n\t\t\t\t\r\n\t\t\t\tvar tempWord = (higherByte << 8) + lowerByte;\r\n\t\t\t\tvar shiftjisWord = 0;\r\n\t\t\t\tif (tempWord + 0x8140 <= 0x9FFC)\r\n\t\t\t\t{\r\n\t\t\t\t\t// between 8140 - 9FFC on Shift_JIS character set\r\n\t\t\t\t\tshiftjisWord = tempWord + 0x8140;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// between E040 - EBBF on Shift_JIS character set\r\n\t\t\t\t\tshiftjisWord = tempWord + 0xC140;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//var tempByte = new Array(0,0);\r\n\t\t\t\t//tempByte[0] = (sbyte) (shiftjisWord >> 8);\r\n\t\t\t\t//tempByte[1] = (sbyte) (shiftjisWord & 0xFF);\r\n\t\t\t\t//unicodeString += new String(SystemUtils.ToCharArray(SystemUtils.ToByteArray(tempByte)));\r\n                unicodeString += String.fromCharCode(shiftjisWord);\r\n\t\t\t\tlength--;\r\n\t\t\t}\r\n\t\t\twhile (length > 0);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn unicodeString;\r\n\t\t}\r\n\r\n\tthis.parseECIValue = function ()\r\n\t{\r\n\t\tvar intData = 0;\r\n\t\tvar firstByte = this.getNextBits(8);\r\n\t\tif ((firstByte & 0x80) == 0) {\r\n\t\t\tintData = firstByte & 0x7F;\r\n\t\t}\r\n\t\tif ((firstByte & 0xC0) == 0x80) {\r\n\t\t\t// two bytes\r\n\t\t\tvar secondByte = this.getNextBits(8);\r\n\t\t\tintData = ((firstByte & 0x3F) << 8) | secondByte;\r\n\t\t}\r\n\t\tif ((firstByte & 0xE0) == 0xC0) {\r\n\t\t\t// three bytes\r\n\t\t\tvar secondThirdBytes = this.getNextBits(8);;\r\n\t\t\tintData = ((firstByte & 0x1F) << 16) | secondThirdBytes;\r\n\t\t}\r\n\t\treturn intData;\r\n\t}\r\n\r\n\tthis.__defineGetter__(\"DataByte\", function()\r\n\t{\r\n\t\tvar output = new Array();\r\n\t\tvar MODE_NUMBER = 1;\r\n\t    var MODE_ROMAN_AND_NUMBER = 2;\r\n\t    var MODE_8BIT_BYTE = 4;\r\n\t\tvar MODE_ECI = 7;\r\n\t    var MODE_KANJI = 8;\r\n\t\tdo \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar mode = this.NextMode();\r\n\t\t\t\t\t\t//canvas.println(\"mode: \" + mode);\r\n\t\t\t\t\t\tif (mode == 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (output.length > 0)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tthrow new Error(\"QR Error: Empty data block\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (mode != MODE_NUMBER && mode != MODE_ROMAN_AND_NUMBER && mode != MODE_8BIT_BYTE && mode != MODE_KANJI && mode != MODE_ECI)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrow new Error(\"QR Error: Invalid mode: \" + mode + \" in (block:\" + this.blockPointer + \" bit:\" + this.bitPointer + \")\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(mode == MODE_ECI)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar temp_sbyteArray3 = this.parseECIValue();\r\n\t\t\t\t\t\t\t//output.push(temp_sbyteArray3);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\r\n\t\t\t\t\t\t\tvar dataLength = this.getDataLength(mode);\r\n\t\t\t\t\t\t\tif (dataLength < 1)\r\n\t\t\t\t\t\t\t\tthrow new Error(\"QR Error: Invalid data length: \" + dataLength);\r\n\t\t\t\t\t\t\tswitch (mode)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcase MODE_NUMBER: \r\n\t\t\t\t\t\t\t\t\tvar temp_str = this.getFigureString(dataLength);\r\n\t\t\t\t\t\t\t\t\tvar ta = new Array(temp_str.length);\r\n\t\t\t\t\t\t\t\t\tfor(var j=0;j<temp_str.length;j++)\r\n\t\t\t\t\t\t\t\t\t\tta[j]=temp_str.charCodeAt(j);\r\n\t\t\t\t\t\t\t\t\toutput.push(ta);\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcase MODE_ROMAN_AND_NUMBER: \r\n\t\t\t\t\t\t\t\t\tvar temp_str = this.getRomanAndFigureString(dataLength);\r\n\t\t\t\t\t\t\t\t\tvar ta = new Array(temp_str.length);\r\n\t\t\t\t\t\t\t\t\tfor(var j=0;j<temp_str.length;j++)\r\n\t\t\t\t\t\t\t\t\t\tta[j]=temp_str.charCodeAt(j);\r\n\t\t\t\t\t\t\t\t\toutput.push(ta );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcase MODE_8BIT_BYTE: \r\n\t\t\t\t\t\t\t\t\tvar temp_sbyteArray3 = this.get8bitByteArray(dataLength);\r\n\t\t\t\t\t\t\t\t\toutput.push(temp_sbyteArray3);\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcase MODE_KANJI: \r\n\t\t\t\t\t\t\t\t\tvar temp_str = this.getKanjiString(dataLength);\r\n\t\t\t\t\t\t\t\t\toutput.push(temp_str);\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\twhile (true);\r\n\t\treturn output;\r\n\t});\r\n}\r\n"]}