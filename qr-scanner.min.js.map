{"version":3,"file":"qr-scanner.min.js","sources":["src/qr-scanner.js"],"sourcesContent":["export default class QrScanner {\n    /* async */\n    static hasCamera() {\n        // note that enumerateDevices can always be called and does not prompt the user for permission. However, device\n        // labels are only readable if served via https and an active media stream exists or permanent permission is\n        // given. That doesn't matter for us though as we don't require labels.\n        return !!navigator.mediaDevices && navigator.mediaDevices.enumerateDevices()\n            .then(devices => devices.some(device => device.kind === 'videoinput'))\n            .catch(() => false);\n    }\n\n    constructor(\n        video,\n        onDecode,\n        canvasSizeOrOnDecodeError = this._onDecodeError.bind(this),\n        canvasSize = QrScanner.DEFAULT_CANVAS_SIZE,\n        preferredFacingMode = 'environment'\n    ) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n        this._onDecode = onDecode;\n        this._preferredFacingMode = preferredFacingMode;\n        this._active = false;\n        this._paused = false;\n\n        if (typeof canvasSizeOrOnDecodeError === 'number') {\n            // legacy function signature where canvas size is the third argument\n            canvasSize = canvasSizeOrOnDecodeError;\n            console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                + 'the future');\n        } else {\n            this._onDecodeError = canvasSizeOrOnDecodeError;\n        }\n\n        this.$canvas.width = canvasSize;\n        this.$canvas.height = canvasSize;\n        this._sourceRect = {\n            x: 0,\n            y: 0,\n            width: canvasSize,\n            height: canvasSize\n        };\n\n        this._onPlay = this._onPlay.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n\n        // Allow inline playback on iPhone instead of requiring full screen playback,\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\n        this.$video.playsInline = true;\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\n        // includes no audio, but just to be safe.\n        this.$video.muted = true;\n        this.$video.disablePictureInPicture = true;\n        this.$video.addEventListener('play', this._onPlay);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        this._qrWorker = new Worker(QrScanner.WORKER_PATH);\n    }\n\n    destroy() {\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        this.stop();\n        this._qrWorker.postMessage({\n            type: 'close'\n        });\n    }\n\n    /* async */\n    start() {\n        if (this._active && !this._paused) {\n            return Promise.resolve();\n        }\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n        this._active = true;\n        this._paused = false;\n        if (document.hidden) {\n            // camera will be started as soon as tab is in foreground\n            return Promise.resolve();\n        }\n        clearTimeout(this._offTimeout);\n        this._offTimeout = null;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            this.$video.play();\n            return Promise.resolve();\n        }\n\n        let facingMode = this._preferredFacingMode;\n        return this._getCameraStream(facingMode, true)\n            .catch(() => {\n                // We (probably) don't have a camera of the requested facing mode\n                facingMode = facingMode === 'environment' ? 'user' : 'environment';\n                return this._getCameraStream(); // throws if camera is not accessible (e.g. due to not https)\n            })\n            .then(stream => {\n                // Try to determine the facing mode from the stream, otherwise use our guess. Note that the guess is not\n                // always accurate as Safari returns cameras of different facing mode, even for exact constraints.\n                facingMode = this._getFacingMode(stream) || facingMode;\n                this.$video.srcObject = stream;\n                this.$video.play();\n                this._setVideoMirror(facingMode);\n            })\n            .catch(e => {\n                this._active = false;\n                throw e;\n            });\n    }\n\n    stop() {\n        this.pause();\n        this._active = false;\n    }\n\n    pause() {\n        this._paused = true;\n        if (!this._active) {\n            return;\n        }\n        this.$video.pause();\n        if (this._offTimeout) {\n            return;\n        }\n        this._offTimeout = setTimeout(() => {\n            const tracks = this.$video.srcObject ? this.$video.srcObject.getTracks() : [];\n            for (const track of tracks) {\n                track.stop();\n            }\n            this.$video.srcObject = null;\n            this._offTimeout = null;\n        }, 300);\n    }\n\n    /* async */\n    static scanImage(imageOrFileOrUrl, sourceRect=null, worker=null, canvas=null, fixedCanvasSize=false,\n                     alsoTryWithoutSourceRect=false) {\n        let createdNewWorker = false;\n        let promise = new Promise((resolve, reject) => {\n            if (!worker) {\n                worker = new Worker(QrScanner.WORKER_PATH);\n                createdNewWorker = true;\n                worker.postMessage({ type: 'inversionMode', data: 'both' }); // scan inverted color qr codes too\n            }\n            let timeout, onMessage, onError;\n            onMessage = event => {\n                if (event.data.type !== 'qrResult') {\n                    return;\n                }\n                worker.removeEventListener('message', onMessage);\n                worker.removeEventListener('error', onError);\n                clearTimeout(timeout);\n                if (event.data.data !== null) {\n                    resolve(event.data.data);\n                } else {\n                    reject(QrScanner.NO_QR_CODE_FOUND);\n                }\n            };\n            onError = (e) => {\n                worker.removeEventListener('message', onMessage);\n                worker.removeEventListener('error', onError);\n                clearTimeout(timeout);\n                const errorMessage = !e ? 'Unknown Error' : (e.message || e);\n                reject('Scanner error: ' + errorMessage);\n            };\n            worker.addEventListener('message', onMessage);\n            worker.addEventListener('error', onError);\n            timeout = setTimeout(() => onError('timeout'), 3000);\n            QrScanner._loadImage(imageOrFileOrUrl).then(image => {\n                const imageData = QrScanner._getImageData(image, sourceRect, canvas, fixedCanvasSize);\n                worker.postMessage({\n                    type: 'decode',\n                    data: imageData\n                }, [imageData.data.buffer]);\n            }).catch(onError);\n        });\n\n        if (sourceRect && alsoTryWithoutSourceRect) {\n            promise = promise.catch(() => QrScanner.scanImage(imageOrFileOrUrl, null, worker, canvas, fixedCanvasSize));\n        }\n\n        promise = promise.finally(() => {\n            if (!createdNewWorker) return;\n            worker.postMessage({\n                type: 'close'\n            });\n        });\n\n        return promise;\n    }\n\n    setGrayscaleWeights(red, green, blue, useIntegerApproximation = true) {\n        this._qrWorker.postMessage({\n            type: 'grayscaleWeights',\n            data: { red, green, blue, useIntegerApproximation }\n        });\n    }\n\n    setInversionMode(inversionMode) {\n        this._qrWorker.postMessage({\n            type: 'inversionMode',\n            data: inversionMode\n        });\n    }\n\n    _onPlay() {\n        this._updateSourceRect();\n        this._scanFrame();\n    }\n\n    _onVisibilityChange() {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    _updateSourceRect() {\n        const smallestDimension = Math.min(this.$video.videoWidth, this.$video.videoHeight);\n        const sourceRectSize = Math.round(2 / 3 * smallestDimension);\n        this._sourceRect.width = this._sourceRect.height = sourceRectSize;\n        this._sourceRect.x = (this.$video.videoWidth - sourceRectSize) / 2;\n        this._sourceRect.y = (this.$video.videoHeight - sourceRectSize) / 2;\n    }\n\n    _scanFrame() {\n        if (!this._active || this.$video.paused || this.$video.ended) return false;\n        // using requestAnimationFrame to avoid scanning if tab is in background\n        requestAnimationFrame(() => {\n            if (this.$video.readyState <= 1) {\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\n                // the canvas until the video is started again and ready.\n                this._scanFrame();\n                return;\n            }\n            QrScanner.scanImage(this.$video, this._sourceRect, this._qrWorker, this.$canvas, true)\n                .then(this._onDecode, (error) => {\n                    if (!this._active) return;\n                    this._onDecodeError(error);\n                })\n                .then(() => this._scanFrame());\n        });\n    }\n\n    _onDecodeError(error) {\n        // default error handler; can be overwritten in the constructor\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\n        console.log(error);\n    }\n\n    _getCameraStream(facingMode, exact = false) {\n        const constraintsToTry = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n\n        if (facingMode) {\n            if (exact) {\n                facingMode = { exact: facingMode };\n            }\n            constraintsToTry.forEach(constraint => constraint.facingMode = facingMode);\n        }\n        return this._getMatchingCameraStream(constraintsToTry);\n    }\n\n    _getMatchingCameraStream(constraintsToTry) {\n        if (!navigator.mediaDevices || constraintsToTry.length === 0) {\n            return Promise.reject('Camera not found.');\n        }\n        return navigator.mediaDevices.getUserMedia({\n            video: constraintsToTry.shift()\n        }).catch(() => this._getMatchingCameraStream(constraintsToTry));\n    }\n\n    _setVideoMirror(facingMode) {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode==='user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    _getFacingMode(videoStream) {\n        const videoTrack = videoStream.getVideoTracks()[0];\n        if (!videoTrack) return null; // unknown\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\n        return /rear|back|environment/i.test(videoTrack.label)\n            ? 'environment'\n            : /front|user|face/i.test(videoTrack.label)\n                ? 'user'\n                : null; // unknown\n    }\n\n    static _getImageData(image, sourceRect=null, canvas=null, fixedCanvasSize=false) {\n        canvas = canvas || document.createElement('canvas');\n        const sourceRectX = sourceRect && sourceRect.x? sourceRect.x : 0;\n        const sourceRectY = sourceRect && sourceRect.y? sourceRect.y : 0;\n        const sourceRectWidth = sourceRect && sourceRect.width? sourceRect.width : image.width || image.videoWidth;\n        const sourceRectHeight = sourceRect && sourceRect.height? sourceRect.height : image.height || image.videoHeight;\n        if (!fixedCanvasSize && (canvas.width !== sourceRectWidth || canvas.height !== sourceRectHeight)) {\n            canvas.width = sourceRectWidth;\n            canvas.height = sourceRectHeight;\n        }\n        const context = canvas.getContext('2d', { alpha: false });\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(image, sourceRectX, sourceRectY, sourceRectWidth, sourceRectHeight, 0, 0, canvas.width, canvas.height);\n        return context.getImageData(0, 0, canvas.width, canvas.height);\n    }\n\n    /* async */\n    static _loadImage(imageOrFileOrUrl) {\n        if (imageOrFileOrUrl instanceof HTMLCanvasElement || imageOrFileOrUrl instanceof HTMLVideoElement\n            || window.ImageBitmap && imageOrFileOrUrl instanceof window.ImageBitmap\n            || window.OffscreenCanvas && imageOrFileOrUrl instanceof window.OffscreenCanvas) {\n            return Promise.resolve(imageOrFileOrUrl);\n        } else if (imageOrFileOrUrl instanceof Image) {\n            return QrScanner._awaitImageLoad(imageOrFileOrUrl).then(() => imageOrFileOrUrl);\n        } else if (imageOrFileOrUrl instanceof File || imageOrFileOrUrl instanceof URL\n            ||  typeof(imageOrFileOrUrl)==='string') {\n            const image = new Image();\n            if (imageOrFileOrUrl instanceof File) {\n                image.src = URL.createObjectURL(imageOrFileOrUrl);\n            } else {\n                image.src = imageOrFileOrUrl;\n            }\n            return QrScanner._awaitImageLoad(image).then(() => {\n                if (imageOrFileOrUrl instanceof File) {\n                    URL.revokeObjectURL(image.src);\n                }\n                return image;\n            });\n        } else {\n            return Promise.reject('Unsupported image type.');\n        }\n    }\n\n    /* async */\n    static _awaitImageLoad(image) {\n        return new Promise((resolve, reject) => {\n            if (image.complete && image.naturalWidth!==0) {\n                // already loaded\n                resolve();\n            } else {\n                let onLoad, onError;\n                onLoad = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    resolve();\n                };\n                onError = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    reject('Image load error');\n                };\n                image.addEventListener('load', onLoad);\n                image.addEventListener('error', onError);\n            }\n        });\n    }\n}\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\nQrScanner.NO_QR_CODE_FOUND = 'No QR code found';\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';\n"],"names":["QrScanner","navigator","mediaDevices","enumerateDevices","then","devices","some","device","kind","catch","video","onDecode","canvasSizeOrOnDecodeError","_onDecodeError","bind","canvasSize","DEFAULT_CANVAS_SIZE","preferredFacingMode","$video","$canvas","document","createElement","_onDecode","_preferredFacingMode","_paused","_active","console","warn","width","height","_sourceRect","x","y","_onPlay","_onVisibilityChange","playsInline","muted","disablePictureInPicture","addEventListener","_qrWorker","Worker","WORKER_PATH","removeEventListener","stop","postMessage","type","Promise","resolve","window","location","protocol","hidden","clearTimeout","_offTimeout","srcObject","play","facingMode","_getCameraStream","stream","_getFacingMode","_setVideoMirror","e","pause","setTimeout","track","imageOrFileOrUrl","sourceRect","worker","canvas","fixedCanvasSize","alsoTryWithoutSourceRect","createdNewWorker","promise","reject","data","timeout","onMessage","onError","event","NO_QR_CODE_FOUND","_loadImage","image","imageData","buffer","scanImage","finally","red","green","blue","useIntegerApproximation","inversionMode","_updateSourceRect","_scanFrame","start","videoHeight","sourceRectSize","videoWidth","paused","ended","requestAnimationFrame","readyState","error","log","exact","min","constraintsToTry","forEach","constraint","_getMatchingCameraStream","length","getUserMedia","shift","style","transform","videoStream","test","videoTrack","label","sourceRectWidth","sourceRectHeight","alpha","context","imageSmoothingEnabled","drawImage","sourceRectX","sourceRectY","getImageData","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","OffscreenCanvas","Image","_awaitImageLoad","File","URL","src","createObjectURL","revokeObjectURL","complete","naturalWidth","onLoad"],"mappings":"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"}